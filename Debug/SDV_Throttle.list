
SDV_Throttle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004758  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004990  08004990  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004990  08004990  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d8  20000010  080049a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e8  080049a8  000219e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d45  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9a  00000000  00000000  00031d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00035878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027ae  00000000  00000000  000367a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001003e  00000000  00000000  00038f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bef18  00000000  00000000  00048f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107eac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004340  00000000  00000000  00107efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004920 	.word	0x08004920

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08004920 	.word	0x08004920

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9a7 	bl	8000576 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f818 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f89c 	bl	8000368 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000230:	f000 f854 	bl	80002dc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000234:	f001 fdea 	bl	8001e0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <main+0x30>)
 800023a:	2100      	movs	r1, #0
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <main+0x34>)
 800023e:	f001 fe2f 	bl	8001ea0 <osThreadNew>
 8000242:	4603      	mov	r3, r0
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <main+0x38>)
 8000246:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000248:	f001 fe04 	bl	8001e54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024c:	e7fe      	b.n	800024c <main+0x2c>
 800024e:	bf00      	nop
 8000250:	0800495c 	.word	0x0800495c
 8000254:	08000399 	.word	0x08000399
 8000258:	20000090 	.word	0x20000090

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	; 0x50
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2238      	movs	r2, #56	; 0x38
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f004 fb50 	bl	8004910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000282:	f000 fdff 	bl	8000e84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000290:	2340      	movs	r3, #64	; 0x40
 8000292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	2300      	movs	r3, #0
 8000296:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fe95 	bl	8000fcc <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a8:	f000 f87e 	bl	80003a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 f999 	bl	80015fc <HAL_RCC_ClockConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002d0:	f000 f86a 	bl	80003a8 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3750      	adds	r7, #80	; 0x50
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002e0:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002e2:	4a20      	ldr	r2, [pc, #128]	; (8000364 <MX_FDCAN1_Init+0x88>)
 80002e4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002ec:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000300:	2200      	movs	r2, #0
 8000302:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000306:	2200      	movs	r2, #0
 8000308:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800030c:	2210      	movs	r2, #16
 800030e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000312:	2201      	movs	r2, #1
 8000314:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000318:	2202      	movs	r2, #2
 800031a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800031e:	2202      	movs	r2, #2
 8000320:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000324:	2201      	movs	r2, #1
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800032a:	2201      	movs	r2, #1
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000330:	2201      	movs	r2, #1
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000336:	2201      	movs	r2, #1
 8000338:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000342:	2200      	movs	r2, #0
 8000344:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000348:	2200      	movs	r2, #0
 800034a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800034e:	f000 fa67 	bl	8000820 <HAL_FDCAN_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000358:	f000 f826 	bl	80003a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000002c 	.word	0x2000002c
 8000364:	40006400 	.word	0x40006400

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_GPIO_Init+0x2c>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <MX_GPIO_Init+0x2c>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_GPIO_Init+0x2c>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f001 fe0f 	bl	8001fc4 <osDelay>
 80003a6:	e7fb      	b.n	80003a0 <StartDefaultTask+0x8>

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <Error_Handler+0x8>
	...

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <HAL_MspInit+0x4c>)
 80003bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003be:	4a10      	ldr	r2, [pc, #64]	; (8000400 <HAL_MspInit+0x4c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6613      	str	r3, [r2, #96]	; 0x60
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <HAL_MspInit+0x4c>)
 80003c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <HAL_MspInit+0x4c>)
 80003d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <HAL_MspInit+0x4c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	6593      	str	r3, [r2, #88]	; 0x58
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <HAL_MspInit+0x4c>)
 80003e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	210f      	movs	r1, #15
 80003ee:	f06f 0001 	mvn.w	r0, #1
 80003f2:	f000 f9ee 	bl	80007d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b09a      	sub	sp, #104	; 0x68
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	2244      	movs	r2, #68	; 0x44
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f004 fa73 	bl	8004910 <memset>
  if(hfdcan->Instance==FDCAN1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a20      	ldr	r2, [pc, #128]	; (80004b0 <HAL_FDCAN_MspInit+0xac>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d139      	bne.n	80004a8 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000438:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800043a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800043e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4618      	mov	r0, r3
 8000446:	f001 fabd 	bl	80019c4 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000450:	f7ff ffaa 	bl	80003a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000454:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <HAL_FDCAN_MspInit+0xb0>)
 8000456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <HAL_FDCAN_MspInit+0xb0>)
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045e:	6593      	str	r3, [r2, #88]	; 0x58
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <HAL_FDCAN_MspInit+0xb0>)
 8000462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <HAL_FDCAN_MspInit+0xb0>)
 800046e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000470:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <HAL_FDCAN_MspInit+0xb0>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000478:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <HAL_FDCAN_MspInit+0xb0>)
 800047a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000484:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000488:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	2302      	movs	r3, #2
 800048c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2300      	movs	r3, #0
 8000494:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000496:	2309      	movs	r3, #9
 8000498:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 fb6c 	bl	8000b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80004a8:	bf00      	nop
 80004aa:	3768      	adds	r7, #104	; 0x68
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40006400 	.word	0x40006400
 80004b4:	40021000 	.word	0x40021000

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f898 	bl	800061c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004ec:	f003 f978 	bl	80037e0 <xTaskGetSchedulerState>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d001      	beq.n	80004fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004f6:	f003 ff5f 	bl	80043b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <SystemInit+0x20>)
 8000506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800050a:	4a05      	ldr	r2, [pc, #20]	; (8000520 <SystemInit+0x20>)
 800050c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052a:	490e      	ldr	r1, [pc, #56]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000540:	4c0b      	ldr	r4, [pc, #44]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054e:	f7ff ffd7 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000552:	f004 f9ab 	bl	80048ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000556:	f7ff fe63 	bl	8000220 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000568:	08004998 	.word	0x08004998
  ldr r2, =_sbss
 800056c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000570:	200019e8 	.word	0x200019e8

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>

08000576 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800057c:	2300      	movs	r3, #0
 800057e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f91b 	bl	80007bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000586:	200f      	movs	r0, #15
 8000588:	f000 f80e 	bl	80005a8 <HAL_InitTick>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	e001      	b.n	800059c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000598:	f7ff ff0c 	bl	80003b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800059c:	79fb      	ldrb	r3, [r7, #7]

}
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_InitTick+0x68>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d022      	beq.n	8000602 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_InitTick+0x6c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <HAL_InitTick+0x68>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80005cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f918 	bl	8000806 <HAL_SYSTICK_Config>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d10f      	bne.n	80005fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b0f      	cmp	r3, #15
 80005e0:	d809      	bhi.n	80005f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e2:	2200      	movs	r2, #0
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	f04f 30ff 	mov.w	r0, #4294967295
 80005ea:	f000 f8f2 	bl	80007d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <HAL_InitTick+0x70>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	e007      	b.n	8000606 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e004      	b.n	8000606 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e001      	b.n	8000606 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000008 	.word	0x20000008
 8000614:	20000000 	.word	0x20000000
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_IncTick+0x1c>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x20>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4413      	add	r3, r2
 800062a:	4a03      	ldr	r2, [pc, #12]	; (8000638 <HAL_IncTick+0x1c>)
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	20000094 	.word	0x20000094
 800063c:	20000008 	.word	0x20000008

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_GetTick+0x14>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000094 	.word	0x20000094

08000658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <__NVIC_SetPriorityGrouping+0x44>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	60d3      	str	r3, [r2, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	6039      	str	r1, [r7, #0]
 80006c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db0a      	blt.n	80006e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	490c      	ldr	r1, [pc, #48]	; (8000708 <__NVIC_SetPriority+0x4c>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e4:	e00a      	b.n	80006fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4908      	ldr	r1, [pc, #32]	; (800070c <__NVIC_SetPriority+0x50>)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	3b04      	subs	r3, #4
 80006f4:	0112      	lsls	r2, r2, #4
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	440b      	add	r3, r1
 80006fa:	761a      	strb	r2, [r3, #24]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000710:	b480      	push	{r7}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	f1c3 0307 	rsb	r3, r3, #7
 800072a:	2b04      	cmp	r3, #4
 800072c:	bf28      	it	cs
 800072e:	2304      	movcs	r3, #4
 8000730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3304      	adds	r3, #4
 8000736:	2b06      	cmp	r3, #6
 8000738:	d902      	bls.n	8000740 <NVIC_EncodePriority+0x30>
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3b03      	subs	r3, #3
 800073e:	e000      	b.n	8000742 <NVIC_EncodePriority+0x32>
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	f04f 32ff 	mov.w	r2, #4294967295
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	43da      	mvns	r2, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	401a      	ands	r2, r3
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000758:	f04f 31ff 	mov.w	r1, #4294967295
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	43d9      	mvns	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	4313      	orrs	r3, r2
         );
}
 800076a:	4618      	mov	r0, r3
 800076c:	3724      	adds	r7, #36	; 0x24
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000788:	d301      	bcc.n	800078e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078a:	2301      	movs	r3, #1
 800078c:	e00f      	b.n	80007ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <SysTick_Config+0x40>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000796:	210f      	movs	r1, #15
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f7ff ff8e 	bl	80006bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Config+0x40>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SysTick_Config+0x40>)
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010

080007bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ff47 	bl	8000658 <__NVIC_SetPriorityGrouping>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff5e 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff90 	bl	8000710 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5f 	bl	80006bc <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffb2 	bl	8000778 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d101      	bne.n	8000832 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e147      	b.n	8000ac2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d106      	bne.n	800084c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fddc 	bl	8000404 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	699a      	ldr	r2, [r3, #24]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f022 0210 	bic.w	r2, r2, #16
 800085a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800085c:	f7ff fef0 	bl	8000640 <HAL_GetTick>
 8000860:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000862:	e012      	b.n	800088a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000864:	f7ff feec 	bl	8000640 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b0a      	cmp	r3, #10
 8000870:	d90b      	bls.n	800088a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f043 0201 	orr.w	r2, r3, #1
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2203      	movs	r2, #3
 8000882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e11b      	b.n	8000ac2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	2b08      	cmp	r3, #8
 8000896:	d0e5      	beq.n	8000864 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0201 	orr.w	r2, r2, #1
 80008a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008a8:	f7ff feca 	bl	8000640 <HAL_GetTick>
 80008ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80008ae:	e012      	b.n	80008d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80008b0:	f7ff fec6 	bl	8000640 <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	2b0a      	cmp	r3, #10
 80008bc:	d90b      	bls.n	80008d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c2:	f043 0201 	orr.w	r2, r3, #1
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2203      	movs	r2, #3
 80008ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e0f5      	b.n	8000ac2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0e5      	beq.n	80008b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0202 	orr.w	r2, r2, #2
 80008f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a74      	ldr	r2, [pc, #464]	; (8000acc <HAL_FDCAN_Init+0x2ac>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d103      	bne.n	8000906 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80008fe:	4a74      	ldr	r2, [pc, #464]	; (8000ad0 <HAL_FDCAN_Init+0x2b0>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7c1b      	ldrb	r3, [r3, #16]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d108      	bne.n	8000920 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	699a      	ldr	r2, [r3, #24]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800091c:	619a      	str	r2, [r3, #24]
 800091e:	e007      	b.n	8000930 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800092e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7c5b      	ldrb	r3, [r3, #17]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d108      	bne.n	800094a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	699a      	ldr	r2, [r3, #24]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000946:	619a      	str	r2, [r3, #24]
 8000948:	e007      	b.n	800095a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000958:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7c9b      	ldrb	r3, [r3, #18]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d108      	bne.n	8000974 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	699a      	ldr	r2, [r3, #24]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000970:	619a      	str	r2, [r3, #24]
 8000972:	e007      	b.n	8000984 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	699a      	ldr	r2, [r3, #24]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000982:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80009a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0210 	bic.w	r2, r2, #16
 80009b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d108      	bne.n	80009d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	699a      	ldr	r2, [r3, #24]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f042 0204 	orr.w	r2, r2, #4
 80009d0:	619a      	str	r2, [r3, #24]
 80009d2:	e02c      	b.n	8000a2e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d028      	beq.n	8000a2e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d01c      	beq.n	8000a1e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f042 0210 	orr.w	r2, r2, #16
 8000a02:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d110      	bne.n	8000a2e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	699a      	ldr	r2, [r3, #24]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0220 	orr.w	r2, r2, #32
 8000a1a:	619a      	str	r2, [r3, #24]
 8000a1c:	e007      	b.n	8000a2e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	699a      	ldr	r2, [r3, #24]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f042 0220 	orr.w	r2, r2, #32
 8000a2c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000a3e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000a46:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000a56:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000a58:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000a62:	d115      	bne.n	8000a90 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000a72:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000a7c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a84:	3b01      	subs	r3, #1
 8000a86:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000a8c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000a8e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f814 	bl	8000ad4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2201      	movs	r2, #1
 8000abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40006400 	.word	0x40006400
 8000ad0:	40006500 	.word	0x40006500

08000ad4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8000ade:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aee:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af6:	041a      	lsls	r2, r3, #16
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b14:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b1c:	061a      	lsls	r2, r3, #24
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e005      	b.n	8000b62 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3f3      	bcc.n	8000b56 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	4000a400 	.word	0x4000a400

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b8e:	e15a      	b.n	8000e46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 814c 	beq.w	8000e40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d005      	beq.n	8000bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d130      	bne.n	8000c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	091b      	lsrs	r3, r3, #4
 8000c0c:	f003 0201 	and.w	r2, r3, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d017      	beq.n	8000c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d123      	bne.n	8000cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3208      	adds	r2, #8
 8000c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	220f      	movs	r2, #15
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	691a      	ldr	r2, [r3, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	6939      	ldr	r1, [r7, #16]
 8000cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0203 	and.w	r2, r3, #3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 80a6 	beq.w	8000e40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf4:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf8:	4a5a      	ldr	r2, [pc, #360]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8000d00:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0c:	4a56      	ldr	r2, [pc, #344]	; (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d36:	d01f      	beq.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a4c      	ldr	r2, [pc, #304]	; (8000e6c <HAL_GPIO_Init+0x2ec>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d019      	beq.n	8000d74 <HAL_GPIO_Init+0x1f4>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a4b      	ldr	r2, [pc, #300]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d013      	beq.n	8000d70 <HAL_GPIO_Init+0x1f0>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <HAL_GPIO_Init+0x2f4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_Init+0x1ec>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a49      	ldr	r2, [pc, #292]	; (8000e78 <HAL_GPIO_Init+0x2f8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_Init+0x1e8>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a48      	ldr	r2, [pc, #288]	; (8000e7c <HAL_GPIO_Init+0x2fc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_Init+0x1e4>
 8000d60:	2305      	movs	r3, #5
 8000d62:	e00a      	b.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d64:	2306      	movs	r3, #6
 8000d66:	e008      	b.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e004      	b.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_Init+0x1fa>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	f002 0203 	and.w	r2, r2, #3
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d8a:	4937      	ldr	r1, [pc, #220]	; (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d98:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dbc:	4a30      	ldr	r2, [pc, #192]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000de6:	4a26      	ldr	r2, [pc, #152]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_GPIO_Init+0x300>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f47f ae9d 	bne.w	8000b90 <HAL_GPIO_Init+0x10>
  }
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	48000800 	.word	0x48000800
 8000e74:	48000c00 	.word	0x48000c00
 8000e78:	48001000 	.word	0x48001000
 8000e7c:	48001400 	.word	0x48001400
 8000e80:	40010400 	.word	0x40010400

08000e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d141      	bne.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e92:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e9e:	d131      	bne.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ea0:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ea6:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eb8:	4a41      	ldr	r2, [pc, #260]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ec0:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2232      	movs	r2, #50	; 0x32
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	0c9b      	lsrs	r3, r3, #18
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ed6:	e002      	b.n	8000ede <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eea:	d102      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f2      	bne.n	8000ed8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efe:	d158      	bne.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e057      	b.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f0a:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f14:	e04d      	b.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f1c:	d141      	bne.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2a:	d131      	bne.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f32:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f44:	4a1e      	ldr	r2, [pc, #120]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2232      	movs	r2, #50	; 0x32
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	0c9b      	lsrs	r3, r3, #18
 8000f5e:	3301      	adds	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f62:	e002      	b.n	8000f6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d102      	bne.n	8000f7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f2      	bne.n	8000f64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8a:	d112      	bne.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e011      	b.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fa0:	e007      	b.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40007000 	.word	0x40007000
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	431bde83 	.word	0x431bde83

08000fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e306      	b.n	80015ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d075      	beq.n	80010d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fea:	4b97      	ldr	r3, [pc, #604]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff4:	4b94      	ldr	r3, [pc, #592]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b0c      	cmp	r3, #12
 8001002:	d102      	bne.n	800100a <HAL_RCC_OscConfig+0x3e>
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d002      	beq.n	8001010 <HAL_RCC_OscConfig+0x44>
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2b08      	cmp	r3, #8
 800100e:	d10b      	bne.n	8001028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	4b8d      	ldr	r3, [pc, #564]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d05b      	beq.n	80010d4 <HAL_RCC_OscConfig+0x108>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d157      	bne.n	80010d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e2e1      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001030:	d106      	bne.n	8001040 <HAL_RCC_OscConfig+0x74>
 8001032:	4b85      	ldr	r3, [pc, #532]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a84      	ldr	r2, [pc, #528]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e01d      	b.n	800107c <HAL_RCC_OscConfig+0xb0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x98>
 800104a:	4b7f      	ldr	r3, [pc, #508]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a7e      	ldr	r2, [pc, #504]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4b7c      	ldr	r3, [pc, #496]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a7b      	ldr	r2, [pc, #492]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e00b      	b.n	800107c <HAL_RCC_OscConfig+0xb0>
 8001064:	4b78      	ldr	r3, [pc, #480]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a77      	ldr	r2, [pc, #476]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800106a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b75      	ldr	r3, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a74      	ldr	r2, [pc, #464]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001084:	f7ff fadc 	bl	8000640 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fad8 	bl	8000640 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e2a6      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800109e:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0xc0>
 80010aa:	e014      	b.n	80010d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fac8 	bl	8000640 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fac4 	bl	8000640 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	; 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e292      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c6:	4b60      	ldr	r3, [pc, #384]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0xe8>
 80010d2:	e000      	b.n	80010d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d075      	beq.n	80011ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e2:	4b59      	ldr	r3, [pc, #356]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ec:	4b56      	ldr	r3, [pc, #344]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b0c      	cmp	r3, #12
 80010fa:	d102      	bne.n	8001102 <HAL_RCC_OscConfig+0x136>
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d002      	beq.n	8001108 <HAL_RCC_OscConfig+0x13c>
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d11f      	bne.n	8001148 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001108:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_OscConfig+0x154>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e265      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b49      	ldr	r3, [pc, #292]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	061b      	lsls	r3, r3, #24
 800112e:	4946      	ldr	r1, [pc, #280]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001134:	4b45      	ldr	r3, [pc, #276]	; (800124c <HAL_RCC_OscConfig+0x280>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa35 	bl	80005a8 <HAL_InitTick>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d043      	beq.n	80011cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e251      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d023      	beq.n	8001198 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001150:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a3c      	ldr	r2, [pc, #240]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fa70 	bl	8000640 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fa6c 	bl	8000640 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e23a      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001176:	4b34      	ldr	r3, [pc, #208]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	061b      	lsls	r3, r3, #24
 8001190:	492d      	ldr	r1, [pc, #180]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
 8001196:	e01a      	b.n	80011ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2a      	ldr	r2, [pc, #168]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800119e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fa4c 	bl	8000640 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ac:	f7ff fa48 	bl	8000640 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e216      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1e0>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d041      	beq.n	800125e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d01c      	beq.n	800121c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e8:	4a17      	ldr	r2, [pc, #92]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f2:	f7ff fa25 	bl	8000640 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fa:	f7ff fa21 	bl	8000640 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1ef      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0ef      	beq.n	80011fa <HAL_RCC_OscConfig+0x22e>
 800121a:	e020      	b.n	800125e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 800121e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_RCC_OscConfig+0x27c>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122c:	f7ff fa08 	bl	8000640 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001232:	e00d      	b.n	8001250 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fa04 	bl	8000640 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d906      	bls.n	8001250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1d2      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001250:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ea      	bne.n	8001234 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80a6 	beq.w	80013b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001270:	4b84      	ldr	r3, [pc, #528]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_OscConfig+0x2b4>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x2b6>
 8001280:	2300      	movs	r3, #0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00d      	beq.n	80012a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b7f      	ldr	r3, [pc, #508]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a7e      	ldr	r2, [pc, #504]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b7c      	ldr	r3, [pc, #496]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800129e:	2301      	movs	r3, #1
 80012a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a2:	4b79      	ldr	r3, [pc, #484]	; (8001488 <HAL_RCC_OscConfig+0x4bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d118      	bne.n	80012e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x4bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a75      	ldr	r2, [pc, #468]	; (8001488 <HAL_RCC_OscConfig+0x4bc>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ba:	f7ff f9c1 	bl	8000640 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c2:	f7ff f9bd 	bl	8000640 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e18b      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d4:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x4bc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_RCC_OscConfig+0x32e>
 80012e8:	4b66      	ldr	r3, [pc, #408]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 80012ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ee:	4a65      	ldr	r2, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f8:	e024      	b.n	8001344 <HAL_RCC_OscConfig+0x378>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d110      	bne.n	8001324 <HAL_RCC_OscConfig+0x358>
 8001302:	4b60      	ldr	r3, [pc, #384]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001308:	4a5e      	ldr	r2, [pc, #376]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001312:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001318:	4a5a      	ldr	r2, [pc, #360]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001322:	e00f      	b.n	8001344 <HAL_RCC_OscConfig+0x378>
 8001324:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132a:	4a56      	ldr	r2, [pc, #344]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001334:	4b53      	ldr	r3, [pc, #332]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133a:	4a52      	ldr	r2, [pc, #328]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d016      	beq.n	800137a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff f978 	bl	8000640 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001352:	e00a      	b.n	800136a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f7ff f974 	bl	8000640 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e140      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136a:	4b46      	ldr	r3, [pc, #280]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800136c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0ed      	beq.n	8001354 <HAL_RCC_OscConfig+0x388>
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137a:	f7ff f961 	bl	8000640 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff f95d 	bl	8000640 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e129      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800139a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ed      	bne.n	8001382 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d105      	bne.n	80013b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	4a34      	ldr	r2, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 80013b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d03c      	beq.n	800143e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01c      	beq.n	8001406 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 80013ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013d2:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff f930 	bl	8000640 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e4:	f7ff f92c 	bl	8000640 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0fa      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 80013f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ef      	beq.n	80013e4 <HAL_RCC_OscConfig+0x418>
 8001404:	e01b      	b.n	800143e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7ff f913 	bl	8000640 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800141e:	f7ff f90f 	bl	8000640 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0dd      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ef      	bne.n	800141e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80d1 	beq.w	80015ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b0c      	cmp	r3, #12
 8001452:	f000 808b 	beq.w	800156c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d15e      	bne.n	800151c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_RCC_OscConfig+0x4b8>)
 8001464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff f8e9 	bl	8000640 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001470:	e00c      	b.n	800148c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff f8e5 	bl	8000640 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d905      	bls.n	800148c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0b3      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ec      	bne.n	8001472 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001498:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <HAL_RCC_OscConfig+0x62c>)
 800149e:	4013      	ands	r3, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6a11      	ldr	r1, [r2, #32]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a8:	3a01      	subs	r2, #1
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	4311      	orrs	r1, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80014b2:	0212      	lsls	r2, r2, #8
 80014b4:	4311      	orrs	r1, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014ba:	0852      	lsrs	r2, r2, #1
 80014bc:	3a01      	subs	r2, #1
 80014be:	0552      	lsls	r2, r2, #21
 80014c0:	4311      	orrs	r1, r2
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014c6:	0852      	lsrs	r2, r2, #1
 80014c8:	3a01      	subs	r2, #1
 80014ca:	0652      	lsls	r2, r2, #25
 80014cc:	4311      	orrs	r1, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014d2:	06d2      	lsls	r2, r2, #27
 80014d4:	430a      	orrs	r2, r1
 80014d6:	4947      	ldr	r1, [pc, #284]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a44      	ldr	r2, [pc, #272]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 80014e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014e8:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4a41      	ldr	r2, [pc, #260]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 80014ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff f8a4 	bl	8000640 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff f8a0 	bl	8000640 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e06e      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x530>
 800151a:	e066      	b.n	80015ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a34      	ldr	r2, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 8001522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001526:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800152e:	f023 0303 	bic.w	r3, r3, #3
 8001532:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a2e      	ldr	r2, [pc, #184]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800153a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff f87c 	bl	8000640 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff f878 	bl	8000640 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e046      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800155e:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x580>
 800156a:	e03e      	b.n	80015ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e039      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001578:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_RCC_OscConfig+0x628>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0203 	and.w	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	429a      	cmp	r2, r3
 800158a:	d12c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d123      	bne.n	80015e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d11b      	bne.n	80015e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d113      	bne.n	80015e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	3b01      	subs	r3, #1
 80015e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	019f800c 	.word	0x019f800c

080015fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e11e      	b.n	8001852 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b91      	ldr	r3, [pc, #580]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d910      	bls.n	8001644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b8e      	ldr	r3, [pc, #568]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 020f 	bic.w	r2, r3, #15
 800162a:	498c      	ldr	r1, [pc, #560]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b8a      	ldr	r3, [pc, #552]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e106      	b.n	8001852 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d073      	beq.n	8001738 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d129      	bne.n	80016ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001658:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0f4      	b.n	8001852 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001668:	f000 f966 	bl	8001938 <RCC_GetSysClockFreqFromPLLSource>
 800166c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4a7c      	ldr	r2, [pc, #496]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d93f      	bls.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001676:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800168a:	2b00      	cmp	r3, #0
 800168c:	d033      	beq.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d12f      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800169e:	4a70      	ldr	r2, [pc, #448]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e024      	b.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b4:	4b6a      	ldr	r3, [pc, #424]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0c6      	b.n	8001852 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c4:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0be      	b.n	8001852 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80016d4:	f000 f8ce 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4a61      	ldr	r2, [pc, #388]	; (8001864 <HAL_RCC_ClockConfig+0x268>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d909      	bls.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80016e2:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016ea:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4957      	ldr	r1, [pc, #348]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001708:	f7fe ff9a 	bl	8000640 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7fe ff96 	bl	8000640 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e095      	b.n	8001852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a42      	ldr	r2, [pc, #264]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800175a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001770:	4a3b      	ldr	r2, [pc, #236]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001776:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4936      	ldr	r1, [pc, #216]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
 800178a:	e008      	b.n	800179e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b80      	cmp	r3, #128	; 0x80
 8001790:	d105      	bne.n	800179e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4a32      	ldr	r2, [pc, #200]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800179c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d21d      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 020f 	bic.w	r2, r3, #15
 80017b4:	4929      	ldr	r1, [pc, #164]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017bc:	f7fe ff40 	bl	8000640 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7fe ff3c 	bl	8000640 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e03b      	b.n	8001852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_RCC_ClockConfig+0x260>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1ed      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4917      	ldr	r1, [pc, #92]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	490f      	ldr	r1, [pc, #60]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001826:	f000 f825 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 800182a:	4602      	mov	r2, r0
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_RCC_ClockConfig+0x264>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <HAL_RCC_ClockConfig+0x26c>)
 8001838:	5ccb      	ldrb	r3, [r1, r3]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x270>)
 8001844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe feac 	bl	80005a8 <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000
 8001860:	40021000 	.word	0x40021000
 8001864:	04c4b400 	.word	0x04c4b400
 8001868:	08004980 	.word	0x08004980
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b04      	cmp	r3, #4
 8001884:	d102      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	e047      	b.n	800191c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d102      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_RCC_GetSysClockFreq+0xc0>)
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	e03e      	b.n	800191c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800189e:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d136      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3301      	adds	r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018d2:	68d2      	ldr	r2, [r2, #12]
 80018d4:	0a12      	lsrs	r2, r2, #8
 80018d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
      break;
 80018e0:	e00c      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ec:	68d2      	ldr	r2, [r2, #12]
 80018ee:	0a12      	lsrs	r2, r2, #8
 80018f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
      break;
 80018fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0e5b      	lsrs	r3, r3, #25
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	e001      	b.n	800191c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800191c:	693b      	ldr	r3, [r7, #16]
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	00f42400 	.word	0x00f42400
 8001934:	007a1200 	.word	0x007a1200

08001938 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d10c      	bne.n	8001976 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800195c:	4a17      	ldr	r2, [pc, #92]	; (80019bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001966:	68d2      	ldr	r2, [r2, #12]
 8001968:	0a12      	lsrs	r2, r2, #8
 800196a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	617b      	str	r3, [r7, #20]
    break;
 8001974:	e00c      	b.n	8001990 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001980:	68d2      	ldr	r2, [r2, #12]
 8001982:	0a12      	lsrs	r2, r2, #8
 8001984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    break;
 800198e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0e5b      	lsrs	r3, r3, #25
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	3301      	adds	r3, #1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80019aa:	687b      	ldr	r3, [r7, #4]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000
 80019bc:	007a1200 	.word	0x007a1200
 80019c0:	00f42400 	.word	0x00f42400

080019c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80019cc:	2300      	movs	r3, #0
 80019ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019d0:	2300      	movs	r3, #0
 80019d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8098 	beq.w	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a39      	ldr	r2, [pc, #228]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a1a:	f7fe fe11 	bl	8000640 <HAL_GetTick>
 8001a1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a20:	e009      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7fe fe0d 	bl	8000640 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d902      	bls.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	74fb      	strb	r3, [r7, #19]
        break;
 8001a34:	e005      	b.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a36:	4b30      	ldr	r3, [pc, #192]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0ef      	beq.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001a42:	7cfb      	ldrb	r3, [r7, #19]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d159      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01e      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d019      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a90:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d016      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7fe fdcd 	bl	8000640 <HAL_GetTick>
 8001aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe fdc9 	bl	8000640 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d902      	bls.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	74fb      	strb	r3, [r7, #19]
            break;
 8001ac0:	e006      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ec      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ad0:	7cfb      	ldrb	r3, [r7, #19]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001aec:	e008      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	74bb      	strb	r3, [r7, #18]
 8001af2:	e005      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001afc:	7cfb      	ldrb	r3, [r7, #19]
 8001afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b00:	7c7b      	ldrb	r3, [r7, #17]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d105      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4aa5      	ldr	r2, [pc, #660]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b1e:	4ba0      	ldr	r3, [pc, #640]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b24:	f023 0203 	bic.w	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	499c      	ldr	r1, [pc, #624]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b40:	4b97      	ldr	r3, [pc, #604]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	f023 020c 	bic.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4994      	ldr	r1, [pc, #592]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b62:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	498b      	ldr	r1, [pc, #556]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00a      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b84:	4b86      	ldr	r3, [pc, #536]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	4983      	ldr	r1, [pc, #524]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ba6:	4b7e      	ldr	r3, [pc, #504]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	497a      	ldr	r1, [pc, #488]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00a      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bc8:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4972      	ldr	r1, [pc, #456]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00a      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bea:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	4969      	ldr	r1, [pc, #420]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c0c:	4b64      	ldr	r3, [pc, #400]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4961      	ldr	r1, [pc, #388]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	4958      	ldr	r1, [pc, #352]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d015      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	4950      	ldr	r1, [pc, #320]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c88:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	4942      	ldr	r1, [pc, #264]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ca8:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4a3c      	ldr	r2, [pc, #240]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d015      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001cc0:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4934      	ldr	r1, [pc, #208]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cde:	d105      	bne.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a2e      	ldr	r2, [pc, #184]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d015      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cf8:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	4926      	ldr	r1, [pc, #152]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d16:	d105      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	4918      	ldr	r1, [pc, #96]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	490a      	ldr	r1, [pc, #40]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d86:	d105      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001d94:	7cbb      	ldrb	r3, [r7, #18]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000

08001da4 <__NVIC_SetPriority>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f06f 0004 	mvn.w	r0, #4
 8001e02:	f7ff ffcf 	bl	8001da4 <__NVIC_SetPriority>
#endif
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e12:	f3ef 8305 	mrs	r3, IPSR
 8001e16:	603b      	str	r3, [r7, #0]
  return(result);
 8001e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e1e:	f06f 0305 	mvn.w	r3, #5
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	e00c      	b.n	8001e40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <osKernelInitialize+0x44>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <osKernelInitialize+0x44>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	e002      	b.n	8001e40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e40:	687b      	ldr	r3, [r7, #4]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000098 	.word	0x20000098

08001e54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e5a:	f3ef 8305 	mrs	r3, IPSR
 8001e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e66:	f06f 0305 	mvn.w	r3, #5
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	e010      	b.n	8001e90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <osKernelStart+0x48>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d109      	bne.n	8001e8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e76:	f7ff ffbf 	bl	8001df8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <osKernelStart+0x48>)
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e80:	f001 f866 	bl	8002f50 <vTaskStartScheduler>
      stat = osOK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	e002      	b.n	8001e90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000098 	.word	0x20000098

08001ea0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af04      	add	r7, sp, #16
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eb0:	f3ef 8305 	mrs	r3, IPSR
 8001eb4:	617b      	str	r3, [r7, #20]
  return(result);
 8001eb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d17e      	bne.n	8001fba <osThreadNew+0x11a>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d07b      	beq.n	8001fba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001ec6:	2318      	movs	r3, #24
 8001ec8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d045      	beq.n	8001f66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <osThreadNew+0x48>
        name = attr->name;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <osThreadNew+0x6e>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b38      	cmp	r3, #56	; 0x38
 8001f00:	d805      	bhi.n	8001f0e <osThreadNew+0x6e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <osThreadNew+0x72>
        return (NULL);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e054      	b.n	8001fbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00e      	beq.n	8001f48 <osThreadNew+0xa8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b5b      	cmp	r3, #91	; 0x5b
 8001f30:	d90a      	bls.n	8001f48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <osThreadNew+0xa8>
        mem = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	e010      	b.n	8001f6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <osThreadNew+0xca>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d108      	bne.n	8001f6a <osThreadNew+0xca>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d104      	bne.n	8001f6a <osThreadNew+0xca>
          mem = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	e001      	b.n	8001f6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d110      	bne.n	8001f92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f78:	9202      	str	r2, [sp, #8]
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6a3a      	ldr	r2, [r7, #32]
 8001f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fe0c 	bl	8002ba4 <xTaskCreateStatic>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e013      	b.n	8001fba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d110      	bne.n	8001fba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fe57 	bl	8002c5e <xTaskCreate>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <osThreadNew+0x11a>
            hTask = NULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fba:	693b      	ldr	r3, [r7, #16]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fcc:	f3ef 8305 	mrs	r3, IPSR
 8001fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <osDelay+0x1c>
    stat = osErrorISR;
 8001fd8:	f06f 0305 	mvn.w	r3, #5
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e007      	b.n	8001ff0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 ff7c 	bl	8002ee8 <vTaskDelay>
    }
  }

  return (stat);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <vApplicationGetIdleTaskMemory+0x2c>)
 800200c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <vApplicationGetIdleTaskMemory+0x30>)
 8002012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	601a      	str	r2, [r3, #0]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	2000009c 	.word	0x2000009c
 800202c:	200000f8 	.word	0x200000f8

08002030 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <vApplicationGetTimerTaskMemory+0x2c>)
 8002040:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <vApplicationGetTimerTaskMemory+0x30>)
 8002046:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	200002f8 	.word	0x200002f8
 8002060:	20000354 	.word	0x20000354

08002064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f103 0208 	add.w	r2, r3, #8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f103 0208 	add.w	r2, r3, #8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f103 0208 	add.w	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d103      	bne.n	8002126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e00c      	b.n	8002140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3308      	adds	r3, #8
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e002      	b.n	8002134 <vListInsert+0x2e>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d2f6      	bcs.n	800212e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6892      	ldr	r2, [r2, #8]
 800218e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6852      	ldr	r2, [r2, #4]
 8002198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d103      	bne.n	80021ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021f2:	bf00      	nop
 80021f4:	e7fe      	b.n	80021f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021f6:	f002 f84d 	bl	8004294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	441a      	add	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	3b01      	subs	r3, #1
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	441a      	add	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	22ff      	movs	r2, #255	; 0xff
 800223a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	22ff      	movs	r2, #255	; 0xff
 8002242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d114      	bne.n	8002276 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01a      	beq.n	800228a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3310      	adds	r3, #16
 8002258:	4618      	mov	r0, r3
 800225a:	f001 f903 	bl	8003464 <xTaskRemoveFromEventList>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <xQueueGenericReset+0xcc>)
 8002266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	e009      	b.n	800228a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3310      	adds	r3, #16
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fef2 	bl	8002064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3324      	adds	r3, #36	; 0x24
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff feed 	bl	8002064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800228a:	f002 f833 	bl	80042f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	e000ed04 	.word	0xe000ed04

0800229c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	; 0x38
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022c2:	bf00      	nop
 80022c4:	e7fe      	b.n	80022c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022de:	bf00      	nop
 80022e0:	e7fe      	b.n	80022e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <xQueueGenericCreateStatic+0x52>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <xQueueGenericCreateStatic+0x56>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <xQueueGenericCreateStatic+0x58>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	623b      	str	r3, [r7, #32]
}
 800230a:	bf00      	nop
 800230c:	e7fe      	b.n	800230c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <xQueueGenericCreateStatic+0x7e>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <xQueueGenericCreateStatic+0x82>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <xQueueGenericCreateStatic+0x84>
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	61fb      	str	r3, [r7, #28]
}
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800233a:	2350      	movs	r3, #80	; 0x50
 800233c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b50      	cmp	r3, #80	; 0x50
 8002342:	d00a      	beq.n	800235a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	61bb      	str	r3, [r7, #24]
}
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800235a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800236e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	4613      	mov	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f805 	bl	800238c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002384:	4618      	mov	r0, r3
 8002386:	3730      	adds	r7, #48	; 0x30
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d103      	bne.n	80023a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e002      	b.n	80023ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023ba:	2101      	movs	r1, #1
 80023bc:	69b8      	ldr	r0, [r7, #24]
 80023be:	f7ff ff05 	bl	80021cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023e2:	2300      	movs	r3, #0
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueGenericSend+0x32>
	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <xQueueGenericSend+0x40>
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <xQueueGenericSend+0x44>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <xQueueGenericSend+0x46>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10a      	bne.n	8002434 <xQueueGenericSend+0x60>
	__asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002430:	bf00      	nop
 8002432:	e7fe      	b.n	8002432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d103      	bne.n	8002442 <xQueueGenericSend+0x6e>
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <xQueueGenericSend+0x72>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <xQueueGenericSend+0x74>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <xQueueGenericSend+0x8e>
	__asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	623b      	str	r3, [r7, #32]
}
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002462:	f001 f9bd 	bl	80037e0 <xTaskGetSchedulerState>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <xQueueGenericSend+0x9e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <xQueueGenericSend+0xa2>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <xQueueGenericSend+0xa4>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericSend+0xbe>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	61fb      	str	r3, [r7, #28]
}
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002492:	f001 feff 	bl	8004294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	429a      	cmp	r2, r3
 80024a0:	d302      	bcc.n	80024a8 <xQueueGenericSend+0xd4>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d129      	bne.n	80024fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ae:	f000 fa0b 	bl	80028c8 <prvCopyDataToQueue>
 80024b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d010      	beq.n	80024de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	3324      	adds	r3, #36	; 0x24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 ffcf 	bl	8003464 <xTaskRemoveFromEventList>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024cc:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <xQueueGenericSend+0x1f8>)
 80024ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	e00a      	b.n	80024f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024e4:	4b39      	ldr	r3, [pc, #228]	; (80025cc <xQueueGenericSend+0x1f8>)
 80024e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024f4:	f001 fefe 	bl	80042f4 <vPortExitCritical>
				return pdPASS;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e063      	b.n	80025c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002502:	f001 fef7 	bl	80042f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002506:	2300      	movs	r3, #0
 8002508:	e05c      	b.n	80025c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4618      	mov	r0, r3
 8002516:	f001 f809 	bl	800352c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800251a:	2301      	movs	r3, #1
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800251e:	f001 fee9 	bl	80042f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002522:	f000 fd7b 	bl	800301c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002526:	f001 feb5 	bl	8004294 <vPortEnterCritical>
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002530:	b25b      	sxtb	r3, r3
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d103      	bne.n	8002540 <xQueueGenericSend+0x16c>
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002546:	b25b      	sxtb	r3, r3
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d103      	bne.n	8002556 <xQueueGenericSend+0x182>
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002556:	f001 fecd 	bl	80042f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800255a:	1d3a      	adds	r2, r7, #4
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fff8 	bl	8003558 <xTaskCheckForTimeOut>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d124      	bne.n	80025b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800256e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002570:	f000 faa2 	bl	8002ab8 <prvIsQueueFull>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d018      	beq.n	80025ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	3310      	adds	r3, #16
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f000 ff1e 	bl	80033c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258a:	f000 fa2d 	bl	80029e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800258e:	f000 fd53 	bl	8003038 <xTaskResumeAll>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f af7c 	bne.w	8002492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <xQueueGenericSend+0x1f8>)
 800259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	e772      	b.n	8002492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ae:	f000 fa1b 	bl	80029e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025b2:	f000 fd41 	bl	8003038 <xTaskResumeAll>
 80025b6:	e76c      	b.n	8002492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ba:	f000 fa15 	bl	80029e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025be:	f000 fd3b 	bl	8003038 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3738      	adds	r7, #56	; 0x38
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b090      	sub	sp, #64	; 0x40
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80025e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <xQueueGenericSendFromISR+0x3c>
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <xQueueGenericSendFromISR+0x40>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <xQueueGenericSendFromISR+0x42>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002628:	bf00      	nop
 800262a:	e7fe      	b.n	800262a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d103      	bne.n	800263a <xQueueGenericSendFromISR+0x6a>
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <xQueueGenericSendFromISR+0x6e>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericSendFromISR+0x70>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	623b      	str	r3, [r7, #32]
}
 8002656:	bf00      	nop
 8002658:	e7fe      	b.n	8002658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800265a:	f001 fefd 	bl	8004458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800265e:	f3ef 8211 	mrs	r2, BASEPRI
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	61fa      	str	r2, [r7, #28]
 8002674:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002676:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <xQueueGenericSendFromISR+0xbc>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d12f      	bne.n	80026ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026a2:	f000 f911 	bl	80028c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d112      	bne.n	80026d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d016      	beq.n	80026e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	3324      	adds	r3, #36	; 0x24
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fed1 	bl	8003464 <xTaskRemoveFromEventList>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e007      	b.n	80026e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026da:	3301      	adds	r3, #1
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	b25a      	sxtb	r2, r3
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026e6:	2301      	movs	r3, #1
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80026ea:	e001      	b.n	80026f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3740      	adds	r7, #64	; 0x40
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <xQueueReceive+0x30>
	__asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	623b      	str	r3, [r7, #32]
}
 8002734:	bf00      	nop
 8002736:	e7fe      	b.n	8002736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <xQueueReceive+0x3e>
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <xQueueReceive+0x42>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <xQueueReceive+0x44>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <xQueueReceive+0x5e>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	61fb      	str	r3, [r7, #28]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002766:	f001 f83b 	bl	80037e0 <xTaskGetSchedulerState>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <xQueueReceive+0x6e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <xQueueReceive+0x72>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <xQueueReceive+0x74>
 800277a:	2300      	movs	r3, #0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <xQueueReceive+0x8e>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	61bb      	str	r3, [r7, #24]
}
 8002792:	bf00      	nop
 8002794:	e7fe      	b.n	8002794 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002796:	f001 fd7d 	bl	8004294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01f      	beq.n	80027e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027aa:	f000 f8f7 	bl	800299c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00f      	beq.n	80027de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	3310      	adds	r3, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fe4e 	bl	8003464 <xTaskRemoveFromEventList>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <xQueueReceive+0x1bc>)
 80027d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027de:	f001 fd89 	bl	80042f4 <vPortExitCritical>
				return pdPASS;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e069      	b.n	80028ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ec:	f001 fd82 	bl	80042f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e062      	b.n	80028ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fe94 	bl	800352c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002804:	2301      	movs	r3, #1
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002808:	f001 fd74 	bl	80042f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800280c:	f000 fc06 	bl	800301c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002810:	f001 fd40 	bl	8004294 <vPortEnterCritical>
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800281a:	b25b      	sxtb	r3, r3
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d103      	bne.n	800282a <xQueueReceive+0x122>
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002830:	b25b      	sxtb	r3, r3
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d103      	bne.n	8002840 <xQueueReceive+0x138>
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002840:	f001 fd58 	bl	80042f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002844:	1d3a      	adds	r2, r7, #4
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fe83 	bl	8003558 <xTaskCheckForTimeOut>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d123      	bne.n	80028a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285a:	f000 f917 	bl	8002a8c <prvIsQueueEmpty>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d017      	beq.n	8002894 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	3324      	adds	r3, #36	; 0x24
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fda9 	bl	80033c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002874:	f000 f8b8 	bl	80029e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002878:	f000 fbde 	bl	8003038 <xTaskResumeAll>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d189      	bne.n	8002796 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <xQueueReceive+0x1bc>)
 8002884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	e780      	b.n	8002796 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002896:	f000 f8a7 	bl	80029e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800289a:	f000 fbcd 	bl	8003038 <xTaskResumeAll>
 800289e:	e77a      	b.n	8002796 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a2:	f000 f8a1 	bl	80029e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028a6:	f000 fbc7 	bl	8003038 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ac:	f000 f8ee 	bl	8002a8c <prvIsQueueEmpty>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f43f af6f 	beq.w	8002796 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3730      	adds	r7, #48	; 0x30
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d14d      	bne.n	800298a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 ff92 	bl	800381c <xTaskPriorityDisinherit>
 80028f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	e043      	b.n	800298a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d119      	bne.n	800293c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6858      	ldr	r0, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	461a      	mov	r2, r3
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	f001 ffee 	bl	80048f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d32b      	bcc.n	800298a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e026      	b.n	800298a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	68d8      	ldr	r0, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	461a      	mov	r2, r3
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	f001 ffd4 	bl	80048f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	425b      	negs	r3, r3
 8002956:	441a      	add	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	425b      	negs	r3, r3
 8002972:	441a      	add	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d105      	bne.n	800298a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	3b01      	subs	r3, #1
 8002988:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002992:	697b      	ldr	r3, [r7, #20]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	441a      	add	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d303      	bcc.n	80029d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	461a      	mov	r2, r3
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	f001 ff8a 	bl	80048f4 <memcpy>
	}
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029f0:	f001 fc50 	bl	8004294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029fc:	e011      	b.n	8002a22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3324      	adds	r3, #36	; 0x24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fd2a 	bl	8003464 <xTaskRemoveFromEventList>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a16:	f000 fe01 	bl	800361c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dce9      	bgt.n	80029fe <prvUnlockQueue+0x16>
 8002a2a:	e000      	b.n	8002a2e <prvUnlockQueue+0x46>
					break;
 8002a2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	22ff      	movs	r2, #255	; 0xff
 8002a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a36:	f001 fc5d 	bl	80042f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a3a:	f001 fc2b 	bl	8004294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a46:	e011      	b.n	8002a6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d012      	beq.n	8002a76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3310      	adds	r3, #16
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fd05 	bl	8003464 <xTaskRemoveFromEventList>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a60:	f000 fddc 	bl	800361c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	dce9      	bgt.n	8002a48 <prvUnlockQueue+0x60>
 8002a74:	e000      	b.n	8002a78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	22ff      	movs	r2, #255	; 0xff
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a80:	f001 fc38 	bl	80042f4 <vPortExitCritical>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a94:	f001 fbfe 	bl	8004294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e001      	b.n	8002aaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aaa:	f001 fc23 	bl	80042f4 <vPortExitCritical>

	return xReturn;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ac0:	f001 fbe8 	bl	8004294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d102      	bne.n	8002ad6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e001      	b.n	8002ada <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ada:	f001 fc0b 	bl	80042f4 <vPortExitCritical>

	return xReturn;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	e014      	b.n	8002b22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002af8:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <vQueueAddToRegistry+0x50>)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <vQueueAddToRegistry+0x50>)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <vQueueAddToRegistry+0x50>)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b1a:	e006      	b.n	8002b2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b07      	cmp	r3, #7
 8002b26:	d9e7      	bls.n	8002af8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000754 	.word	0x20000754

08002b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b4c:	f001 fba2 	bl	8004294 <vPortEnterCritical>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d103      	bne.n	8002b66 <vQueueWaitForMessageRestricted+0x2a>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d103      	bne.n	8002b7c <vQueueWaitForMessageRestricted+0x40>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b7c:	f001 fbba 	bl	80042f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3324      	adds	r3, #36	; 0x24
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fc3b 	bl	800340c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff26 	bl	80029e8 <prvUnlockQueue>
	}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	; 0x38
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <xTaskCreateStatic+0x2a>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	623b      	str	r3, [r7, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <xTaskCreateStatic+0x46>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	61fb      	str	r3, [r7, #28]
}
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bea:	235c      	movs	r3, #92	; 0x5c
 8002bec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b5c      	cmp	r3, #92	; 0x5c
 8002bf2:	d00a      	beq.n	8002c0a <xTaskCreateStatic+0x66>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	61bb      	str	r3, [r7, #24]
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01e      	beq.n	8002c50 <xTaskCreateStatic+0xac>
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	2202      	movs	r2, #2
 8002c26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9303      	str	r3, [sp, #12]
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	9302      	str	r3, [sp, #8]
 8002c32:	f107 0314 	add.w	r3, r7, #20
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f850 	bl	8002ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c4a:	f000 f8dd 	bl	8002e08 <prvAddNewTaskToReadyList>
 8002c4e:	e001      	b.n	8002c54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c54:	697b      	ldr	r3, [r7, #20]
	}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3728      	adds	r7, #40	; 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b08c      	sub	sp, #48	; 0x30
 8002c62:	af04      	add	r7, sp, #16
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fc30 	bl	80044d8 <pvPortMalloc>
 8002c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c80:	205c      	movs	r0, #92	; 0x5c
 8002c82:	f001 fc29 	bl	80044d8 <pvPortMalloc>
 8002c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
 8002c94:	e005      	b.n	8002ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f001 fcea 	bl	8004670 <vPortFree>
 8002c9c:	e001      	b.n	8002ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9303      	str	r3, [sp, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	9302      	str	r3, [sp, #8]
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f80e 	bl	8002ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ccc:	69f8      	ldr	r0, [r7, #28]
 8002cce:	f000 f89b 	bl	8002e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e002      	b.n	8002cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cde:	69bb      	ldr	r3, [r7, #24]
	}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	21a5      	movs	r1, #165	; 0xa5
 8002d02:	f001 fe05 	bl	8004910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d10:	3b01      	subs	r3, #1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f023 0307 	bic.w	r3, r3, #7
 8002d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	617b      	str	r3, [r7, #20]
}
 8002d3c:	bf00      	nop
 8002d3e:	e7fe      	b.n	8002d3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01f      	beq.n	8002d86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e012      	b.n	8002d72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4413      	add	r3, r2
 8002d52:	7819      	ldrb	r1, [r3, #0]
 8002d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3334      	adds	r3, #52	; 0x34
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d9e9      	bls.n	8002d4c <prvInitialiseNewTask+0x64>
 8002d78:	e000      	b.n	8002d7c <prvInitialiseNewTask+0x94>
			{
				break;
 8002d7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d84:	e003      	b.n	8002d8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	2b37      	cmp	r3, #55	; 0x37
 8002d92:	d901      	bls.n	8002d98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d94:	2337      	movs	r3, #55	; 0x37
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	2200      	movs	r2, #0
 8002da8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f978 	bl	80020a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	3318      	adds	r3, #24
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f973 	bl	80020a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	69b8      	ldr	r0, [r7, #24]
 8002de8:	f001 f928 	bl	800403c <pxPortInitialiseStack>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dfe:	bf00      	nop
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e10:	f001 fa40 	bl	8004294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <prvAddNewTaskToReadyList+0xc4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <prvAddNewTaskToReadyList+0xc4>)
 8002e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <prvAddNewTaskToReadyList+0xc8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e26:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <prvAddNewTaskToReadyList+0xc8>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <prvAddNewTaskToReadyList+0xc4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d110      	bne.n	8002e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e34:	f000 fc16 	bl	8003664 <prvInitialiseTaskLists>
 8002e38:	e00d      	b.n	8002e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <prvAddNewTaskToReadyList+0xcc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <prvAddNewTaskToReadyList+0xc8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d802      	bhi.n	8002e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <prvAddNewTaskToReadyList+0xc8>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <prvAddNewTaskToReadyList+0xd0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <prvAddNewTaskToReadyList+0xd0>)
 8002e5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <prvAddNewTaskToReadyList+0xd0>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <prvAddNewTaskToReadyList+0xd4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d903      	bls.n	8002e7c <prvAddNewTaskToReadyList+0x74>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	4a18      	ldr	r2, [pc, #96]	; (8002edc <prvAddNewTaskToReadyList+0xd4>)
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <prvAddNewTaskToReadyList+0xd8>)
 8002e8a:	441a      	add	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7ff f913 	bl	80020be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e98:	f001 fa2c 	bl	80042f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <prvAddNewTaskToReadyList+0xcc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <prvAddNewTaskToReadyList+0xc8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d207      	bcs.n	8002ec2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <prvAddNewTaskToReadyList+0xdc>)
 8002eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000c68 	.word	0x20000c68
 8002ed0:	20000794 	.word	0x20000794
 8002ed4:	20000c74 	.word	0x20000c74
 8002ed8:	20000c84 	.word	0x20000c84
 8002edc:	20000c70 	.word	0x20000c70
 8002ee0:	20000798 	.word	0x20000798
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d017      	beq.n	8002f2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <vTaskDelay+0x60>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <vTaskDelay+0x30>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	60bb      	str	r3, [r7, #8]
}
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f18:	f000 f880 	bl	800301c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fcea 	bl	80038f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f24:	f000 f888 	bl	8003038 <xTaskResumeAll>
 8002f28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <vTaskDelay+0x64>)
 8002f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000c90 	.word	0x20000c90
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f5e:	463a      	mov	r2, r7
 8002f60:	1d39      	adds	r1, r7, #4
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f848 	bl	8001ffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	9202      	str	r2, [sp, #8]
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2300      	movs	r3, #0
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	460a      	mov	r2, r1
 8002f7e:	4921      	ldr	r1, [pc, #132]	; (8003004 <vTaskStartScheduler+0xb4>)
 8002f80:	4821      	ldr	r0, [pc, #132]	; (8003008 <vTaskStartScheduler+0xb8>)
 8002f82:	f7ff fe0f 	bl	8002ba4 <xTaskCreateStatic>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a20      	ldr	r2, [pc, #128]	; (800300c <vTaskStartScheduler+0xbc>)
 8002f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	; (800300c <vTaskStartScheduler+0xbc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f94:	2301      	movs	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e001      	b.n	8002f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d102      	bne.n	8002faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fa4:	f000 fcfc 	bl	80039a0 <xTimerCreateTimerTask>
 8002fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d116      	bne.n	8002fde <vTaskStartScheduler+0x8e>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	613b      	str	r3, [r7, #16]
}
 8002fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <vTaskStartScheduler+0xc0>)
 8002fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <vTaskStartScheduler+0xc4>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <vTaskStartScheduler+0xc8>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fd8:	f001 f8ba 	bl	8004150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fdc:	e00e      	b.n	8002ffc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d10a      	bne.n	8002ffc <vTaskStartScheduler+0xac>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	60fb      	str	r3, [r7, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <vTaskStartScheduler+0xaa>
}
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	08004944 	.word	0x08004944
 8003008:	08003635 	.word	0x08003635
 800300c:	20000c8c 	.word	0x20000c8c
 8003010:	20000c88 	.word	0x20000c88
 8003014:	20000c74 	.word	0x20000c74
 8003018:	20000c6c 	.word	0x20000c6c

0800301c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <vTaskSuspendAll+0x18>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a03      	ldr	r2, [pc, #12]	; (8003034 <vTaskSuspendAll+0x18>)
 8003028:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000c90 	.word	0x20000c90

08003038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003046:	4b42      	ldr	r3, [pc, #264]	; (8003150 <xTaskResumeAll+0x118>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <xTaskResumeAll+0x2c>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	603b      	str	r3, [r7, #0]
}
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003064:	f001 f916 	bl	8004294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <xTaskResumeAll+0x118>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a38      	ldr	r2, [pc, #224]	; (8003150 <xTaskResumeAll+0x118>)
 8003070:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003072:	4b37      	ldr	r3, [pc, #220]	; (8003150 <xTaskResumeAll+0x118>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d162      	bne.n	8003140 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800307a:	4b36      	ldr	r3, [pc, #216]	; (8003154 <xTaskResumeAll+0x11c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d05e      	beq.n	8003140 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003082:	e02f      	b.n	80030e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003084:	4b34      	ldr	r3, [pc, #208]	; (8003158 <xTaskResumeAll+0x120>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3318      	adds	r3, #24
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff f871 	bl	8002178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff f86c 	bl	8002178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <xTaskResumeAll+0x124>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d903      	bls.n	80030b4 <xTaskResumeAll+0x7c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4a2a      	ldr	r2, [pc, #168]	; (800315c <xTaskResumeAll+0x124>)
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4a27      	ldr	r2, [pc, #156]	; (8003160 <xTaskResumeAll+0x128>)
 80030c2:	441a      	add	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f7fe fff7 	bl	80020be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	4b23      	ldr	r3, [pc, #140]	; (8003164 <xTaskResumeAll+0x12c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <xTaskResumeAll+0x130>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <xTaskResumeAll+0x120>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1cb      	bne.n	8003084 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030f2:	f000 fb55 	bl	80037a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <xTaskResumeAll+0x134>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003102:	f000 f847 	bl	8003194 <xTaskIncrementTick>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <xTaskResumeAll+0x130>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3b01      	subs	r3, #1
 8003116:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f1      	bne.n	8003102 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <xTaskResumeAll+0x134>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003124:	4b10      	ldr	r3, [pc, #64]	; (8003168 <xTaskResumeAll+0x130>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <xTaskResumeAll+0x138>)
 8003132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003140:	f001 f8d8 	bl	80042f4 <vPortExitCritical>

	return xAlreadyYielded;
 8003144:	68bb      	ldr	r3, [r7, #8]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000c90 	.word	0x20000c90
 8003154:	20000c68 	.word	0x20000c68
 8003158:	20000c28 	.word	0x20000c28
 800315c:	20000c70 	.word	0x20000c70
 8003160:	20000798 	.word	0x20000798
 8003164:	20000794 	.word	0x20000794
 8003168:	20000c7c 	.word	0x20000c7c
 800316c:	20000c78 	.word	0x20000c78
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <xTaskGetTickCount+0x1c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003180:	687b      	ldr	r3, [r7, #4]
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000c6c 	.word	0x20000c6c

08003194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800319e:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <xTaskIncrementTick+0x148>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 808f 	bne.w	80032c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031a8:	4b4d      	ldr	r3, [pc, #308]	; (80032e0 <xTaskIncrementTick+0x14c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031b0:	4a4b      	ldr	r2, [pc, #300]	; (80032e0 <xTaskIncrementTick+0x14c>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d120      	bne.n	80031fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031bc:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <xTaskIncrementTick+0x150>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <xTaskIncrementTick+0x48>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	603b      	str	r3, [r7, #0]
}
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <xTaskIncrementTick+0x46>
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <xTaskIncrementTick+0x150>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <xTaskIncrementTick+0x154>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <xTaskIncrementTick+0x150>)
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4a3f      	ldr	r2, [pc, #252]	; (80032e8 <xTaskIncrementTick+0x154>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <xTaskIncrementTick+0x158>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4a3d      	ldr	r2, [pc, #244]	; (80032ec <xTaskIncrementTick+0x158>)
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	f000 fad1 	bl	80037a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031fe:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <xTaskIncrementTick+0x15c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	429a      	cmp	r2, r3
 8003206:	d349      	bcc.n	800329c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <xTaskIncrementTick+0x150>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d104      	bne.n	800321c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <xTaskIncrementTick+0x15c>)
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	601a      	str	r2, [r3, #0]
					break;
 800321a:	e03f      	b.n	800329c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <xTaskIncrementTick+0x150>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d203      	bcs.n	800323c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003234:	4a2e      	ldr	r2, [pc, #184]	; (80032f0 <xTaskIncrementTick+0x15c>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800323a:	e02f      	b.n	800329c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	3304      	adds	r3, #4
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe ff99 	bl	8002178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3318      	adds	r3, #24
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe ff90 	bl	8002178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <xTaskIncrementTick+0x160>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d903      	bls.n	800326c <xTaskIncrementTick+0xd8>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <xTaskIncrementTick+0x160>)
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <xTaskIncrementTick+0x164>)
 800327a:	441a      	add	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f7fe ff1b 	bl	80020be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <xTaskIncrementTick+0x168>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	429a      	cmp	r2, r3
 8003294:	d3b8      	bcc.n	8003208 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003296:	2301      	movs	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329a:	e7b5      	b.n	8003208 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <xTaskIncrementTick+0x168>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	4915      	ldr	r1, [pc, #84]	; (80032f8 <xTaskIncrementTick+0x164>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d901      	bls.n	80032b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <xTaskIncrementTick+0x16c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e004      	b.n	80032d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <xTaskIncrementTick+0x170>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <xTaskIncrementTick+0x170>)
 80032ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032d0:	697b      	ldr	r3, [r7, #20]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000c90 	.word	0x20000c90
 80032e0:	20000c6c 	.word	0x20000c6c
 80032e4:	20000c20 	.word	0x20000c20
 80032e8:	20000c24 	.word	0x20000c24
 80032ec:	20000c80 	.word	0x20000c80
 80032f0:	20000c88 	.word	0x20000c88
 80032f4:	20000c70 	.word	0x20000c70
 80032f8:	20000798 	.word	0x20000798
 80032fc:	20000794 	.word	0x20000794
 8003300:	20000c7c 	.word	0x20000c7c
 8003304:	20000c78 	.word	0x20000c78

08003308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800330e:	4b28      	ldr	r3, [pc, #160]	; (80033b0 <vTaskSwitchContext+0xa8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <vTaskSwitchContext+0xac>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800331c:	e041      	b.n	80033a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800331e:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <vTaskSwitchContext+0xac>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <vTaskSwitchContext+0xb0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e010      	b.n	800334e <vTaskSwitchContext+0x46>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <vTaskSwitchContext+0x40>
	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	607b      	str	r3, [r7, #4]
}
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <vTaskSwitchContext+0x3e>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3b01      	subs	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	491b      	ldr	r1, [pc, #108]	; (80033bc <vTaskSwitchContext+0xb4>)
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0e4      	beq.n	800332c <vTaskSwitchContext+0x24>
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4a13      	ldr	r2, [pc, #76]	; (80033bc <vTaskSwitchContext+0xb4>)
 800336e:	4413      	add	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3308      	adds	r3, #8
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <vTaskSwitchContext+0x8a>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <vTaskSwitchContext+0xb8>)
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <vTaskSwitchContext+0xb0>)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6013      	str	r3, [r2, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000c90 	.word	0x20000c90
 80033b4:	20000c7c 	.word	0x20000c7c
 80033b8:	20000c70 	.word	0x20000c70
 80033bc:	20000798 	.word	0x20000798
 80033c0:	20000794 	.word	0x20000794

080033c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	60fb      	str	r3, [r7, #12]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <vTaskPlaceOnEventList+0x44>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3318      	adds	r3, #24
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fe87 	bl	8002106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033f8:	2101      	movs	r1, #1
 80033fa:	6838      	ldr	r0, [r7, #0]
 80033fc:	f000 fa7c 	bl	80038f8 <prvAddCurrentTaskToDelayedList>
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000794 	.word	0x20000794

0800340c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	617b      	str	r3, [r7, #20]
}
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <vTaskPlaceOnEventListRestricted+0x54>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3318      	adds	r3, #24
 800343a:	4619      	mov	r1, r3
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7fe fe3e 	bl	80020be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	68b8      	ldr	r0, [r7, #8]
 8003452:	f000 fa51 	bl	80038f8 <prvAddCurrentTaskToDelayedList>
	}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000794 	.word	0x20000794

08003464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	60fb      	str	r3, [r7, #12]
}
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	3318      	adds	r3, #24
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fe6f 	bl	8002178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <xTaskRemoveFromEventList+0xb0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11d      	bne.n	80034de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	3304      	adds	r3, #4
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fe66 	bl	8002178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <xTaskRemoveFromEventList+0xb4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d903      	bls.n	80034c0 <xTaskRemoveFromEventList+0x5c>
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <xTaskRemoveFromEventList+0xb4>)
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <xTaskRemoveFromEventList+0xb8>)
 80034ce:	441a      	add	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f7fe fdf1 	bl	80020be <vListInsertEnd>
 80034dc:	e005      	b.n	80034ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3318      	adds	r3, #24
 80034e2:	4619      	mov	r1, r3
 80034e4:	480e      	ldr	r0, [pc, #56]	; (8003520 <xTaskRemoveFromEventList+0xbc>)
 80034e6:	f7fe fdea 	bl	80020be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <xTaskRemoveFromEventList+0xc0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d905      	bls.n	8003504 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <xTaskRemoveFromEventList+0xc4>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e001      	b.n	8003508 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003508:	697b      	ldr	r3, [r7, #20]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000c90 	.word	0x20000c90
 8003518:	20000c70 	.word	0x20000c70
 800351c:	20000798 	.word	0x20000798
 8003520:	20000c28 	.word	0x20000c28
 8003524:	20000794 	.word	0x20000794
 8003528:	20000c7c 	.word	0x20000c7c

0800352c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <vTaskInternalSetTimeOutState+0x24>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <vTaskInternalSetTimeOutState+0x28>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	605a      	str	r2, [r3, #4]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000c80 	.word	0x20000c80
 8003554:	20000c6c 	.word	0x20000c6c

08003558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	613b      	str	r3, [r7, #16]
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	60fb      	str	r3, [r7, #12]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800359a:	f000 fe7b 	bl	8004294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <xTaskCheckForTimeOut+0xbc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d102      	bne.n	80035be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	e023      	b.n	8003606 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <xTaskCheckForTimeOut+0xc0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d007      	beq.n	80035da <xTaskCheckForTimeOut+0x82>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d302      	bcc.n	80035da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e015      	b.n	8003606 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d20b      	bcs.n	80035fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	1ad2      	subs	r2, r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff9b 	bl	800352c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e004      	b.n	8003606 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003602:	2301      	movs	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003606:	f000 fe75 	bl	80042f4 <vPortExitCritical>

	return xReturn;
 800360a:	69fb      	ldr	r3, [r7, #28]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000c6c 	.word	0x20000c6c
 8003618:	20000c80 	.word	0x20000c80

0800361c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <vTaskMissedYield+0x14>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	20000c7c 	.word	0x20000c7c

08003634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800363c:	f000 f852 	bl	80036e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <prvIdleTask+0x28>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d9f9      	bls.n	800363c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <prvIdleTask+0x2c>)
 800364a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003658:	e7f0      	b.n	800363c <prvIdleTask+0x8>
 800365a:	bf00      	nop
 800365c:	20000798 	.word	0x20000798
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	e00c      	b.n	800368a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <prvInitialiseTaskLists+0x60>)
 800367c:	4413      	add	r3, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fcf0 	bl	8002064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3301      	adds	r3, #1
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b37      	cmp	r3, #55	; 0x37
 800368e:	d9ef      	bls.n	8003670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003690:	480d      	ldr	r0, [pc, #52]	; (80036c8 <prvInitialiseTaskLists+0x64>)
 8003692:	f7fe fce7 	bl	8002064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003696:	480d      	ldr	r0, [pc, #52]	; (80036cc <prvInitialiseTaskLists+0x68>)
 8003698:	f7fe fce4 	bl	8002064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800369c:	480c      	ldr	r0, [pc, #48]	; (80036d0 <prvInitialiseTaskLists+0x6c>)
 800369e:	f7fe fce1 	bl	8002064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036a2:	480c      	ldr	r0, [pc, #48]	; (80036d4 <prvInitialiseTaskLists+0x70>)
 80036a4:	f7fe fcde 	bl	8002064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036a8:	480b      	ldr	r0, [pc, #44]	; (80036d8 <prvInitialiseTaskLists+0x74>)
 80036aa:	f7fe fcdb 	bl	8002064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <prvInitialiseTaskLists+0x78>)
 80036b0:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <prvInitialiseTaskLists+0x64>)
 80036b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <prvInitialiseTaskLists+0x7c>)
 80036b6:	4a05      	ldr	r2, [pc, #20]	; (80036cc <prvInitialiseTaskLists+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000798 	.word	0x20000798
 80036c8:	20000bf8 	.word	0x20000bf8
 80036cc:	20000c0c 	.word	0x20000c0c
 80036d0:	20000c28 	.word	0x20000c28
 80036d4:	20000c3c 	.word	0x20000c3c
 80036d8:	20000c54 	.word	0x20000c54
 80036dc:	20000c20 	.word	0x20000c20
 80036e0:	20000c24 	.word	0x20000c24

080036e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ea:	e019      	b.n	8003720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036ec:	f000 fdd2 	bl	8004294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <prvCheckTasksWaitingTermination+0x50>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fe fd3b 	bl	8002178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <prvCheckTasksWaitingTermination+0x54>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3b01      	subs	r3, #1
 8003708:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <prvCheckTasksWaitingTermination+0x54>)
 800370a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <prvCheckTasksWaitingTermination+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <prvCheckTasksWaitingTermination+0x58>)
 8003714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003716:	f000 fded 	bl	80042f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f810 	bl	8003740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <prvCheckTasksWaitingTermination+0x58>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e1      	bne.n	80036ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000c3c 	.word	0x20000c3c
 8003738:	20000c68 	.word	0x20000c68
 800373c:	20000c50 	.word	0x20000c50

08003740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800374e:	2b00      	cmp	r3, #0
 8003750:	d108      	bne.n	8003764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4618      	mov	r0, r3
 8003758:	f000 ff8a 	bl	8004670 <vPortFree>
				vPortFree( pxTCB );
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 ff87 	bl	8004670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003762:	e018      	b.n	8003796 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800376a:	2b01      	cmp	r3, #1
 800376c:	d103      	bne.n	8003776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 ff7e 	bl	8004670 <vPortFree>
	}
 8003774:	e00f      	b.n	8003796 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800377c:	2b02      	cmp	r3, #2
 800377e:	d00a      	beq.n	8003796 <prvDeleteTCB+0x56>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	60fb      	str	r3, [r7, #12]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <prvDeleteTCB+0x54>
	}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <prvResetNextTaskUnblockTime+0x38>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d104      	bne.n	80037ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <prvResetNextTaskUnblockTime+0x3c>)
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295
 80037b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037b8:	e008      	b.n	80037cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <prvResetNextTaskUnblockTime+0x38>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <prvResetNextTaskUnblockTime+0x3c>)
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	20000c20 	.word	0x20000c20
 80037dc:	20000c88 	.word	0x20000c88

080037e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <xTaskGetSchedulerState+0x34>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037ee:	2301      	movs	r3, #1
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	e008      	b.n	8003806 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <xTaskGetSchedulerState+0x38>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037fc:	2302      	movs	r3, #2
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	e001      	b.n	8003806 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003806:	687b      	ldr	r3, [r7, #4]
	}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	20000c74 	.word	0x20000c74
 8003818:	20000c90 	.word	0x20000c90

0800381c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d056      	beq.n	80038e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003832:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <xTaskPriorityDisinherit+0xd0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d00a      	beq.n	8003852 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	60fb      	str	r3, [r7, #12]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10a      	bne.n	8003870 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	60bb      	str	r3, [r7, #8]
}
 800386c:	bf00      	nop
 800386e:	e7fe      	b.n	800386e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	1e5a      	subs	r2, r3, #1
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	429a      	cmp	r2, r3
 8003884:	d02c      	beq.n	80038e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	2b00      	cmp	r3, #0
 800388c:	d128      	bne.n	80038e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3304      	adds	r3, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fc70 	bl	8002178 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <xTaskPriorityDisinherit+0xd4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d903      	bls.n	80038c0 <xTaskPriorityDisinherit+0xa4>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <xTaskPriorityDisinherit+0xd4>)
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <xTaskPriorityDisinherit+0xd8>)
 80038ce:	441a      	add	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f7fe fbf1 	bl	80020be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038dc:	2301      	movs	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038e0:	697b      	ldr	r3, [r7, #20]
	}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000794 	.word	0x20000794
 80038f0:	20000c70 	.word	0x20000c70
 80038f4:	20000798 	.word	0x20000798

080038f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003902:	4b21      	ldr	r3, [pc, #132]	; (8003988 <prvAddCurrentTaskToDelayedList+0x90>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <prvAddCurrentTaskToDelayedList+0x94>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fc32 	bl	8002178 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d10a      	bne.n	8003932 <prvAddCurrentTaskToDelayedList+0x3a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003922:	4b1a      	ldr	r3, [pc, #104]	; (800398c <prvAddCurrentTaskToDelayedList+0x94>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3304      	adds	r3, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4819      	ldr	r0, [pc, #100]	; (8003990 <prvAddCurrentTaskToDelayedList+0x98>)
 800392c:	f7fe fbc7 	bl	80020be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003930:	e026      	b.n	8003980 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <prvAddCurrentTaskToDelayedList+0x94>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	429a      	cmp	r2, r3
 8003948:	d209      	bcs.n	800395e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800394a:	4b12      	ldr	r3, [pc, #72]	; (8003994 <prvAddCurrentTaskToDelayedList+0x9c>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <prvAddCurrentTaskToDelayedList+0x94>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f7fe fbd5 	bl	8002106 <vListInsert>
}
 800395c:	e010      	b.n	8003980 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <prvAddCurrentTaskToDelayedList+0x94>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f7fe fbcb 	bl	8002106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	d202      	bcs.n	8003980 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800397a:	4a08      	ldr	r2, [pc, #32]	; (800399c <prvAddCurrentTaskToDelayedList+0xa4>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6013      	str	r3, [r2, #0]
}
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000c6c 	.word	0x20000c6c
 800398c:	20000794 	.word	0x20000794
 8003990:	20000c54 	.word	0x20000c54
 8003994:	20000c24 	.word	0x20000c24
 8003998:	20000c20 	.word	0x20000c20
 800399c:	20000c88 	.word	0x20000c88

080039a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039aa:	f000 fb07 	bl	8003fbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <xTimerCreateTimerTask+0x80>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d021      	beq.n	80039fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039be:	1d3a      	adds	r2, r7, #4
 80039c0:	f107 0108 	add.w	r1, r7, #8
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fb31 	bl	8002030 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	9202      	str	r2, [sp, #8]
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	2302      	movs	r3, #2
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	460a      	mov	r2, r1
 80039e0:	4910      	ldr	r1, [pc, #64]	; (8003a24 <xTimerCreateTimerTask+0x84>)
 80039e2:	4811      	ldr	r0, [pc, #68]	; (8003a28 <xTimerCreateTimerTask+0x88>)
 80039e4:	f7ff f8de 	bl	8002ba4 <xTaskCreateStatic>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <xTimerCreateTimerTask+0x8c>)
 80039ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <xTimerCreateTimerTask+0x8c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039f6:	2301      	movs	r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	613b      	str	r3, [r7, #16]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a16:	697b      	ldr	r3, [r7, #20]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000cc4 	.word	0x20000cc4
 8003a24:	0800494c 	.word	0x0800494c
 8003a28:	08003b65 	.word	0x08003b65
 8003a2c:	20000cc8 	.word	0x20000cc8

08003a30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	623b      	str	r3, [r7, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <xTimerGenericCommand+0x98>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02a      	beq.n	8003abc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	dc18      	bgt.n	8003aaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a78:	f7ff feb2 	bl	80037e0 <xTaskGetSchedulerState>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d109      	bne.n	8003a96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <xTimerGenericCommand+0x98>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	f107 0110 	add.w	r1, r7, #16
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8e:	f7fe fca1 	bl	80023d4 <xQueueGenericSend>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24
 8003a94:	e012      	b.n	8003abc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <xTimerGenericCommand+0x98>)
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f107 0110 	add.w	r1, r7, #16
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f7fe fc97 	bl	80023d4 <xQueueGenericSend>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8003aa8:	e008      	b.n	8003abc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <xTimerGenericCommand+0x98>)
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	f107 0110 	add.w	r1, r7, #16
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	f7fe fd8b 	bl	80025d0 <xQueueGenericSendFromISR>
 8003aba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3728      	adds	r7, #40	; 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000cc4 	.word	0x20000cc4

08003acc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <prvProcessExpiredTimer+0x94>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fb47 	bl	8002178 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d022      	beq.n	8003b3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	18d1      	adds	r1, r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	6978      	ldr	r0, [r7, #20]
 8003b06:	f000 f8d1 	bl	8003cac <prvInsertTimerInActiveList>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01f      	beq.n	8003b50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff88 	bl	8003a30 <xTimerGenericCommand>
 8003b20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d113      	bne.n	8003b50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	60fb      	str	r3, [r7, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	6978      	ldr	r0, [r7, #20]
 8003b56:	4798      	blx	r3
}
 8003b58:	bf00      	nop
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000cbc 	.word	0x20000cbc

08003b64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b6c:	f107 0308 	add.w	r3, r7, #8
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 f857 	bl	8003c24 <prvGetNextExpireTime>
 8003b76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f803 	bl	8003b88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b82:	f000 f8d5 	bl	8003d30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b86:	e7f1      	b.n	8003b6c <prvTimerTask+0x8>

08003b88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b92:	f7ff fa43 	bl	800301c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b96:	f107 0308 	add.w	r3, r7, #8
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f866 	bl	8003c6c <prvSampleTimeNow>
 8003ba0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d130      	bne.n	8003c0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <prvProcessTimerOrBlockTask+0x3c>
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d806      	bhi.n	8003bc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bb6:	f7ff fa3f 	bl	8003038 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff85 	bl	8003acc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bc2:	e024      	b.n	8003c0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <prvProcessTimerOrBlockTask+0x90>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <prvProcessTimerOrBlockTask+0x50>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <prvProcessTimerOrBlockTask+0x52>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <prvProcessTimerOrBlockTask+0x94>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	4619      	mov	r1, r3
 8003bea:	f7fe ffa7 	bl	8002b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bee:	f7ff fa23 	bl	8003038 <xTaskResumeAll>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <prvProcessTimerOrBlockTask+0x98>)
 8003bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	f3bf 8f6f 	isb	sy
}
 8003c08:	e001      	b.n	8003c0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c0a:	f7ff fa15 	bl	8003038 <xTaskResumeAll>
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000cc0 	.word	0x20000cc0
 8003c1c:	20000cc4 	.word	0x20000cc4
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <prvGetNextExpireTime+0x44>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <prvGetNextExpireTime+0x16>
 8003c36:	2201      	movs	r2, #1
 8003c38:	e000      	b.n	8003c3c <prvGetNextExpireTime+0x18>
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <prvGetNextExpireTime+0x44>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e001      	b.n	8003c58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c58:	68fb      	ldr	r3, [r7, #12]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000cbc 	.word	0x20000cbc

08003c6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c74:	f7ff fa7e 	bl	8003174 <xTaskGetTickCount>
 8003c78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <prvSampleTimeNow+0x3c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d205      	bcs.n	8003c90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c84:	f000 f936 	bl	8003ef4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e002      	b.n	8003c96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <prvSampleTimeNow+0x3c>)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000ccc 	.word	0x20000ccc

08003cac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d812      	bhi.n	8003cf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	e01b      	b.n	8003d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <prvInsertTimerInActiveList+0x7c>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fe fa08 	bl	8002106 <vListInsert>
 8003cf6:	e012      	b.n	8003d1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d206      	bcs.n	8003d0e <prvInsertTimerInActiveList+0x62>
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d302      	bcc.n	8003d0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e007      	b.n	8003d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <prvInsertTimerInActiveList+0x80>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f7fe f9f4 	bl	8002106 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d1e:	697b      	ldr	r3, [r7, #20]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000cc0 	.word	0x20000cc0
 8003d2c:	20000cbc 	.word	0x20000cbc

08003d30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	; 0x38
 8003d34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d36:	e0ca      	b.n	8003ece <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da18      	bge.n	8003d70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	3304      	adds	r3, #4
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	61fb      	str	r3, [r7, #28]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d66:	6850      	ldr	r0, [r2, #4]
 8003d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6a:	6892      	ldr	r2, [r2, #8]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f2c0 80aa 	blt.w	8003ecc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	3304      	adds	r3, #4
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe f9f5 	bl	8002178 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d8e:	463b      	mov	r3, r7
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff6b 	bl	8003c6c <prvSampleTimeNow>
 8003d96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	f200 8097 	bhi.w	8003ece <prvProcessReceivedCommands+0x19e>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <prvProcessReceivedCommands+0x78>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003dd1 	.word	0x08003dd1
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003dd1 	.word	0x08003dd1
 8003db4:	08003e45 	.word	0x08003e45
 8003db8:	08003e59 	.word	0x08003e59
 8003dbc:	08003ea3 	.word	0x08003ea3
 8003dc0:	08003dd1 	.word	0x08003dd1
 8003dc4:	08003dd1 	.word	0x08003dd1
 8003dc8:	08003e45 	.word	0x08003e45
 8003dcc:	08003e59 	.word	0x08003e59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	18d1      	adds	r1, r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df0:	f7ff ff5c 	bl	8003cac <prvInsertTimerInActiveList>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d069      	beq.n	8003ece <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05e      	beq.n	8003ece <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	441a      	add	r2, r3
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e22:	f7ff fe05 	bl	8003a30 <xTimerGenericCommand>
 8003e26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d14f      	bne.n	8003ece <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	61bb      	str	r3, [r7, #24]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e56:	e03a      	b.n	8003ece <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	617b      	str	r3, [r7, #20]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	18d1      	adds	r1, r2, r3
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9c:	f7ff ff06 	bl	8003cac <prvInsertTimerInActiveList>
					break;
 8003ea0:	e015      	b.n	8003ece <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb2:	f000 fbdd 	bl	8004670 <vPortFree>
 8003eb6:	e00a      	b.n	8003ece <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003eca:	e000      	b.n	8003ece <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003ecc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <prvProcessReceivedCommands+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	1d39      	adds	r1, r7, #4
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fc16 	bl	8002708 <xQueueReceive>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f47f af2a 	bne.w	8003d38 <prvProcessReceivedCommands+0x8>
	}
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	3730      	adds	r7, #48	; 0x30
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000cc4 	.word	0x20000cc4

08003ef4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003efa:	e048      	b.n	8003f8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <prvSwitchTimerLists+0xc0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <prvSwitchTimerLists+0xc0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe f92f 	bl	8002178 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d02e      	beq.n	8003f8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d90e      	bls.n	8003f60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f4e:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <prvSwitchTimerLists+0xc0>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fe f8d4 	bl	8002106 <vListInsert>
 8003f5e:	e016      	b.n	8003f8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f60:	2300      	movs	r3, #0
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	2100      	movs	r1, #0
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff fd60 	bl	8003a30 <xTimerGenericCommand>
 8003f70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	603b      	str	r3, [r7, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <prvSwitchTimerLists+0xc0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1b1      	bne.n	8003efc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <prvSwitchTimerLists+0xc0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <prvSwitchTimerLists+0xc4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <prvSwitchTimerLists+0xc0>)
 8003fa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fa6:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <prvSwitchTimerLists+0xc4>)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000cbc 	.word	0x20000cbc
 8003fb8:	20000cc0 	.word	0x20000cc0

08003fbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fc2:	f000 f967 	bl	8004294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <prvCheckForValidListAndQueue+0x60>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d120      	bne.n	8004010 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fce:	4814      	ldr	r0, [pc, #80]	; (8004020 <prvCheckForValidListAndQueue+0x64>)
 8003fd0:	f7fe f848 	bl	8002064 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fd4:	4813      	ldr	r0, [pc, #76]	; (8004024 <prvCheckForValidListAndQueue+0x68>)
 8003fd6:	f7fe f845 	bl	8002064 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <prvCheckForValidListAndQueue+0x6c>)
 8003fdc:	4a10      	ldr	r2, [pc, #64]	; (8004020 <prvCheckForValidListAndQueue+0x64>)
 8003fde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <prvCheckForValidListAndQueue+0x70>)
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <prvCheckForValidListAndQueue+0x68>)
 8003fe4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	4b11      	ldr	r3, [pc, #68]	; (8004030 <prvCheckForValidListAndQueue+0x74>)
 8003fec:	4a11      	ldr	r2, [pc, #68]	; (8004034 <prvCheckForValidListAndQueue+0x78>)
 8003fee:	2110      	movs	r1, #16
 8003ff0:	200a      	movs	r0, #10
 8003ff2:	f7fe f953 	bl	800229c <xQueueGenericCreateStatic>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a08      	ldr	r2, [pc, #32]	; (800401c <prvCheckForValidListAndQueue+0x60>)
 8003ffa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ffc:	4b07      	ldr	r3, [pc, #28]	; (800401c <prvCheckForValidListAndQueue+0x60>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <prvCheckForValidListAndQueue+0x60>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	490b      	ldr	r1, [pc, #44]	; (8004038 <prvCheckForValidListAndQueue+0x7c>)
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fd6c 	bl	8002ae8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004010:	f000 f970 	bl	80042f4 <vPortExitCritical>
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000cc4 	.word	0x20000cc4
 8004020:	20000c94 	.word	0x20000c94
 8004024:	20000ca8 	.word	0x20000ca8
 8004028:	20000cbc 	.word	0x20000cbc
 800402c:	20000cc0 	.word	0x20000cc0
 8004030:	20000d70 	.word	0x20000d70
 8004034:	20000cd0 	.word	0x20000cd0
 8004038:	08004954 	.word	0x08004954

0800403c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b04      	subs	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3b04      	subs	r3, #4
 800405a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b04      	subs	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800406c:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <pxPortInitialiseStack+0x64>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b14      	subs	r3, #20
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b04      	subs	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f06f 0202 	mvn.w	r2, #2
 800408a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b20      	subs	r3, #32
 8004090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	080040a5 	.word	0x080040a5

080040a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <prvTaskExitError+0x54>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d00a      	beq.n	80040ce <prvTaskExitError+0x2a>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	60fb      	str	r3, [r7, #12]
}
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <prvTaskExitError+0x28>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60bb      	str	r3, [r7, #8]
}
 80040e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040e2:	bf00      	nop
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0fc      	beq.n	80040e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	2000000c 	.word	0x2000000c
 80040fc:	00000000 	.word	0x00000000

08004100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	4770      	bx	lr
 800411c:	f3af 8000 	nop.w

08004120 <pxCurrentTCBConst2>:
 8004120:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004128:	4808      	ldr	r0, [pc, #32]	; (800414c <prvPortStartFirstTask+0x24>)
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f380 8808 	msr	MSP, r0
 8004132:	f04f 0000 	mov.w	r0, #0
 8004136:	f380 8814 	msr	CONTROL, r0
 800413a:	b662      	cpsie	i
 800413c:	b661      	cpsie	f
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	df00      	svc	0
 8004148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800414a:	bf00      	nop
 800414c:	e000ed08 	.word	0xe000ed08

08004150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004156:	4b46      	ldr	r3, [pc, #280]	; (8004270 <xPortStartScheduler+0x120>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a46      	ldr	r2, [pc, #280]	; (8004274 <xPortStartScheduler+0x124>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10a      	bne.n	8004176 <xPortStartScheduler+0x26>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	613b      	str	r3, [r7, #16]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004176:	4b3e      	ldr	r3, [pc, #248]	; (8004270 <xPortStartScheduler+0x120>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <xPortStartScheduler+0x128>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10a      	bne.n	8004196 <xPortStartScheduler+0x46>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	60fb      	str	r3, [r7, #12]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004196:	4b39      	ldr	r3, [pc, #228]	; (800427c <xPortStartScheduler+0x12c>)
 8004198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	4b31      	ldr	r3, [pc, #196]	; (8004280 <xPortStartScheduler+0x130>)
 80041bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <xPortStartScheduler+0x134>)
 80041c0:	2207      	movs	r2, #7
 80041c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041c4:	e009      	b.n	80041da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041c6:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <xPortStartScheduler+0x134>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <xPortStartScheduler+0x134>)
 80041ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d0ef      	beq.n	80041c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041e6:	4b27      	ldr	r3, [pc, #156]	; (8004284 <xPortStartScheduler+0x134>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1c3 0307 	rsb	r3, r3, #7
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d00a      	beq.n	8004208 <xPortStartScheduler+0xb8>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <xPortStartScheduler+0x134>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <xPortStartScheduler+0x134>)
 8004210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <xPortStartScheduler+0x134>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <xPortStartScheduler+0x134>)
 800421c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <xPortStartScheduler+0x138>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a17      	ldr	r2, [pc, #92]	; (8004288 <xPortStartScheduler+0x138>)
 800422c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <xPortStartScheduler+0x138>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a14      	ldr	r2, [pc, #80]	; (8004288 <xPortStartScheduler+0x138>)
 8004238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800423c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800423e:	f000 f8dd 	bl	80043fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <xPortStartScheduler+0x13c>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004248:	f000 f8fc 	bl	8004444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800424c:	4b10      	ldr	r3, [pc, #64]	; (8004290 <xPortStartScheduler+0x140>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <xPortStartScheduler+0x140>)
 8004252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004258:	f7ff ff66 	bl	8004128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800425c:	f7ff f854 	bl	8003308 <vTaskSwitchContext>
	prvTaskExitError();
 8004260:	f7ff ff20 	bl	80040a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00
 8004274:	410fc271 	.word	0x410fc271
 8004278:	410fc270 	.word	0x410fc270
 800427c:	e000e400 	.word	0xe000e400
 8004280:	20000dc0 	.word	0x20000dc0
 8004284:	20000dc4 	.word	0x20000dc4
 8004288:	e000ed20 	.word	0xe000ed20
 800428c:	2000000c 	.word	0x2000000c
 8004290:	e000ef34 	.word	0xe000ef34

08004294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	607b      	str	r3, [r7, #4]
}
 80042ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042ae:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <vPortEnterCritical+0x58>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <vPortEnterCritical+0x58>)
 80042b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042b8:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <vPortEnterCritical+0x58>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10f      	bne.n	80042e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <vPortEnterCritical+0x5c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	603b      	str	r3, [r7, #0]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <vPortEnterCritical+0x4a>
	}
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	2000000c 	.word	0x2000000c
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042fa:	4b12      	ldr	r3, [pc, #72]	; (8004344 <vPortExitCritical+0x50>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <vPortExitCritical+0x24>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	607b      	str	r3, [r7, #4]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <vPortExitCritical+0x50>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3b01      	subs	r3, #1
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <vPortExitCritical+0x50>)
 8004320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <vPortExitCritical+0x50>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d105      	bne.n	8004336 <vPortExitCritical+0x42>
 800432a:	2300      	movs	r3, #0
 800432c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f383 8811 	msr	BASEPRI, r3
}
 8004334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
	...

08004350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004350:	f3ef 8009 	mrs	r0, PSP
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <pxCurrentTCBConst>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	f01e 0f10 	tst.w	lr, #16
 8004360:	bf08      	it	eq
 8004362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436a:	6010      	str	r0, [r2, #0]
 800436c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004374:	f380 8811 	msr	BASEPRI, r0
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f7fe ffc2 	bl	8003308 <vTaskSwitchContext>
 8004384:	f04f 0000 	mov.w	r0, #0
 8004388:	f380 8811 	msr	BASEPRI, r0
 800438c:	bc09      	pop	{r0, r3}
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	6808      	ldr	r0, [r1, #0]
 8004392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004396:	f01e 0f10 	tst.w	lr, #16
 800439a:	bf08      	it	eq
 800439c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043a0:	f380 8809 	msr	PSP, r0
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	f3af 8000 	nop.w

080043b0 <pxCurrentTCBConst>:
 80043b0:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
}
 80043d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043d2:	f7fe fedf 	bl	8003194 <xTaskIncrementTick>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <xPortSysTickHandler+0x40>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	2300      	movs	r3, #0
 80043e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f383 8811 	msr	BASEPRI, r3
}
 80043ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	e000ed04 	.word	0xe000ed04

080043fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <vPortSetupTimerInterrupt+0x34>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <vPortSetupTimerInterrupt+0x38>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <vPortSetupTimerInterrupt+0x3c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <vPortSetupTimerInterrupt+0x40>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	4a09      	ldr	r2, [pc, #36]	; (8004440 <vPortSetupTimerInterrupt+0x44>)
 800441a:	3b01      	subs	r3, #1
 800441c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800441e:	4b04      	ldr	r3, [pc, #16]	; (8004430 <vPortSetupTimerInterrupt+0x34>)
 8004420:	2207      	movs	r2, #7
 8004422:	601a      	str	r2, [r3, #0]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e010 	.word	0xe000e010
 8004434:	e000e018 	.word	0xe000e018
 8004438:	20000000 	.word	0x20000000
 800443c:	10624dd3 	.word	0x10624dd3
 8004440:	e000e014 	.word	0xe000e014

08004444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004454 <vPortEnableVFP+0x10>
 8004448:	6801      	ldr	r1, [r0, #0]
 800444a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800444e:	6001      	str	r1, [r0, #0]
 8004450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004452:	bf00      	nop
 8004454:	e000ed88 	.word	0xe000ed88

08004458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800445e:	f3ef 8305 	mrs	r3, IPSR
 8004462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	d914      	bls.n	8004494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800446a:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <vPortValidateInterruptPriority+0x70>)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <vPortValidateInterruptPriority+0x74>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	7afa      	ldrb	r2, [r7, #11]
 800447a:	429a      	cmp	r2, r3
 800447c:	d20a      	bcs.n	8004494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <vPortValidateInterruptPriority+0x78>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <vPortValidateInterruptPriority+0x7c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d90a      	bls.n	80044ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	603b      	str	r3, [r7, #0]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <vPortValidateInterruptPriority+0x60>
	}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000e3f0 	.word	0xe000e3f0
 80044cc:	20000dc0 	.word	0x20000dc0
 80044d0:	e000ed0c 	.word	0xe000ed0c
 80044d4:	20000dc4 	.word	0x20000dc4

080044d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044e4:	f7fe fd9a 	bl	800301c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044e8:	4b5b      	ldr	r3, [pc, #364]	; (8004658 <pvPortMalloc+0x180>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044f0:	f000 f920 	bl	8004734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <pvPortMalloc+0x184>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8093 	bne.w	8004628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01d      	beq.n	8004544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004508:	2208      	movs	r2, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	2b00      	cmp	r3, #0
 8004518:	d014      	beq.n	8004544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f023 0307 	bic.w	r3, r3, #7
 8004520:	3308      	adds	r3, #8
 8004522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <pvPortMalloc+0x6c>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	617b      	str	r3, [r7, #20]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d06e      	beq.n	8004628 <pvPortMalloc+0x150>
 800454a:	4b45      	ldr	r3, [pc, #276]	; (8004660 <pvPortMalloc+0x188>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d869      	bhi.n	8004628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004554:	4b43      	ldr	r3, [pc, #268]	; (8004664 <pvPortMalloc+0x18c>)
 8004556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004558:	4b42      	ldr	r3, [pc, #264]	; (8004664 <pvPortMalloc+0x18c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800455e:	e004      	b.n	800456a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d903      	bls.n	800457c <pvPortMalloc+0xa4>
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f1      	bne.n	8004560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800457c:	4b36      	ldr	r3, [pc, #216]	; (8004658 <pvPortMalloc+0x180>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004582:	429a      	cmp	r2, r3
 8004584:	d050      	beq.n	8004628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2208      	movs	r2, #8
 800458c:	4413      	add	r3, r2
 800458e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad2      	subs	r2, r2, r3
 80045a0:	2308      	movs	r3, #8
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d91f      	bls.n	80045e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <pvPortMalloc+0xf8>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	613b      	str	r3, [r7, #16]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1ad2      	subs	r2, r2, r3
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045e2:	69b8      	ldr	r0, [r7, #24]
 80045e4:	f000 f908 	bl	80047f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <pvPortMalloc+0x188>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <pvPortMalloc+0x188>)
 80045f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <pvPortMalloc+0x188>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <pvPortMalloc+0x190>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d203      	bcs.n	800460a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <pvPortMalloc+0x188>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	; (8004668 <pvPortMalloc+0x190>)
 8004608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <pvPortMalloc+0x184>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	431a      	orrs	r2, r3
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <pvPortMalloc+0x194>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <pvPortMalloc+0x194>)
 8004626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004628:	f7fe fd06 	bl	8003038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <pvPortMalloc+0x174>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60fb      	str	r3, [r7, #12]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <pvPortMalloc+0x172>
	return pvReturn;
 800464c:	69fb      	ldr	r3, [r7, #28]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200019d0 	.word	0x200019d0
 800465c:	200019e4 	.word	0x200019e4
 8004660:	200019d4 	.word	0x200019d4
 8004664:	200019c8 	.word	0x200019c8
 8004668:	200019d8 	.word	0x200019d8
 800466c:	200019dc 	.word	0x200019dc

08004670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d04d      	beq.n	800471e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004682:	2308      	movs	r3, #8
 8004684:	425b      	negs	r3, r3
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4413      	add	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <vPortFree+0xb8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4013      	ands	r3, r2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <vPortFree+0x44>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <vPortFree+0x62>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	60bb      	str	r3, [r7, #8]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	4b14      	ldr	r3, [pc, #80]	; (8004728 <vPortFree+0xb8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01e      	beq.n	800471e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11a      	bne.n	800471e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <vPortFree+0xb8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	401a      	ands	r2, r3
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046f8:	f7fe fc90 	bl	800301c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <vPortFree+0xbc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4413      	add	r3, r2
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <vPortFree+0xbc>)
 8004708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800470a:	6938      	ldr	r0, [r7, #16]
 800470c:	f000 f874 	bl	80047f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <vPortFree+0xc0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	4a06      	ldr	r2, [pc, #24]	; (8004730 <vPortFree+0xc0>)
 8004718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800471a:	f7fe fc8d 	bl	8003038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800471e:	bf00      	nop
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	200019e4 	.word	0x200019e4
 800472c:	200019d4 	.word	0x200019d4
 8004730:	200019e0 	.word	0x200019e0

08004734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800473a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800473e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <prvHeapInit+0xac>)
 8004742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3307      	adds	r3, #7
 8004752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <prvHeapInit+0xac>)
 8004764:	4413      	add	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <prvHeapInit+0xb0>)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <prvHeapInit+0xb0>)
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4413      	add	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004780:	2208      	movs	r2, #8
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0307 	bic.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <prvHeapInit+0xb4>)
 8004794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <prvHeapInit+0xb4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <prvHeapInit+0xb4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <prvHeapInit+0xb4>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <prvHeapInit+0xb8>)
 80047c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <prvHeapInit+0xbc>)
 80047ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <prvHeapInit+0xc0>)
 80047ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000dc8 	.word	0x20000dc8
 80047e4:	200019c8 	.word	0x200019c8
 80047e8:	200019d0 	.word	0x200019d0
 80047ec:	200019d8 	.word	0x200019d8
 80047f0:	200019d4 	.word	0x200019d4
 80047f4:	200019e4 	.word	0x200019e4

080047f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004800:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <prvInsertBlockIntoFreeList+0xac>)
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e002      	b.n	800480c <prvInsertBlockIntoFreeList+0x14>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d8f7      	bhi.n	8004806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4413      	add	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	429a      	cmp	r2, r3
 8004826:	d108      	bne.n	800483a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	441a      	add	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	441a      	add	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d118      	bne.n	8004880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d00d      	beq.n	8004876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e008      	b.n	8004888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e003      	b.n	8004888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d002      	beq.n	8004896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	200019c8 	.word	0x200019c8
 80048a8:	200019d0 	.word	0x200019d0

080048ac <__libc_init_array>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	4d0d      	ldr	r5, [pc, #52]	; (80048e4 <__libc_init_array+0x38>)
 80048b0:	4c0d      	ldr	r4, [pc, #52]	; (80048e8 <__libc_init_array+0x3c>)
 80048b2:	1b64      	subs	r4, r4, r5
 80048b4:	10a4      	asrs	r4, r4, #2
 80048b6:	2600      	movs	r6, #0
 80048b8:	42a6      	cmp	r6, r4
 80048ba:	d109      	bne.n	80048d0 <__libc_init_array+0x24>
 80048bc:	4d0b      	ldr	r5, [pc, #44]	; (80048ec <__libc_init_array+0x40>)
 80048be:	4c0c      	ldr	r4, [pc, #48]	; (80048f0 <__libc_init_array+0x44>)
 80048c0:	f000 f82e 	bl	8004920 <_init>
 80048c4:	1b64      	subs	r4, r4, r5
 80048c6:	10a4      	asrs	r4, r4, #2
 80048c8:	2600      	movs	r6, #0
 80048ca:	42a6      	cmp	r6, r4
 80048cc:	d105      	bne.n	80048da <__libc_init_array+0x2e>
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d4:	4798      	blx	r3
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7ee      	b.n	80048b8 <__libc_init_array+0xc>
 80048da:	f855 3b04 	ldr.w	r3, [r5], #4
 80048de:	4798      	blx	r3
 80048e0:	3601      	adds	r6, #1
 80048e2:	e7f2      	b.n	80048ca <__libc_init_array+0x1e>
 80048e4:	08004990 	.word	0x08004990
 80048e8:	08004990 	.word	0x08004990
 80048ec:	08004990 	.word	0x08004990
 80048f0:	08004994 	.word	0x08004994

080048f4 <memcpy>:
 80048f4:	440a      	add	r2, r1
 80048f6:	4291      	cmp	r1, r2
 80048f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048fc:	d100      	bne.n	8004900 <memcpy+0xc>
 80048fe:	4770      	bx	lr
 8004900:	b510      	push	{r4, lr}
 8004902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800490a:	4291      	cmp	r1, r2
 800490c:	d1f9      	bne.n	8004902 <memcpy+0xe>
 800490e:	bd10      	pop	{r4, pc}

08004910 <memset>:
 8004910:	4402      	add	r2, r0
 8004912:	4603      	mov	r3, r0
 8004914:	4293      	cmp	r3, r2
 8004916:	d100      	bne.n	800491a <memset+0xa>
 8004918:	4770      	bx	lr
 800491a:	f803 1b01 	strb.w	r1, [r3], #1
 800491e:	e7f9      	b.n	8004914 <memset+0x4>

08004920 <_init>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr

0800492c <_fini>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	bf00      	nop
 8004930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004932:	bc08      	pop	{r3}
 8004934:	469e      	mov	lr, r3
 8004936:	4770      	bx	lr
