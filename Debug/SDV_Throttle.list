
SDV_Throttle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b14  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006cf4  08006cf4  00016cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006eec  08006eec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006eec  08006eec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b0c  20000074  08006f68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  08006f68  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019615  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037dc  00000000  00000000  000396b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003e378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a54  00000000  00000000  0003f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166e7  00000000  00000000  00044124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c508b  00000000  00000000  0005a80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e38  00000000  00000000  0011f8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006cdc 	.word	0x08006cdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006cdc 	.word	0x08006cdc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <can_init>:
static const uint8_t DS3502_ADDR = 0x28<<1 ;
static const uint8_t DS3502_MODE_WR = 0x80;
static const uint8_t DS3502_MODE_WR_IVR = 0x00;
static const uint8_t DS3502_REG_WR_IVR = 0x00;
static const uint8_t DS3502_REG_CR = 0x02;
void can_init(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0

	FDCAN_FilterTypeDef sFilterConfig;

	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80002c6:	2300      	movs	r3, #0
 80002c8:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x111;
 80002d6:	f240 1311 	movw	r3, #273	; 0x111
 80002da:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0xFFF;
 80002dc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80002e0:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80002e2:	463b      	mov	r3, r7
 80002e4:	4619      	mov	r1, r3
 80002e6:	480f      	ldr	r0, [pc, #60]	; (8000324 <can_init+0x64>)
 80002e8:	f000 fea4 	bl	8001034 <HAL_FDCAN_ConfigFilter>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <can_init+0x36>
	  {
		Error_Handler();
 80002f2:	f000 f9ef 	bl	80006d4 <Error_Handler>
	  }
	  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <can_init+0x64>)
 80002f8:	f000 fef6 	bl	80010e8 <HAL_FDCAN_Start>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <can_init+0x46>
	  {
		  Error_Handler();
 8000302:	f000 f9e7 	bl	80006d4 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000306:	2200      	movs	r2, #0
 8000308:	2101      	movs	r1, #1
 800030a:	4806      	ldr	r0, [pc, #24]	; (8000324 <can_init+0x64>)
 800030c:	f000 ff14 	bl	8001138 <HAL_FDCAN_ActivateNotification>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <can_init+0x5a>
	  {
	    /* Notification Error */
	    Error_Handler();
 8000316:	f000 f9dd 	bl	80006d4 <Error_Handler>
	  }
}
 800031a:	bf00      	nop
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000a0 	.word	0x200000a0

08000328 <setWiper>:
	 else{
		 return true;

	 }
}
bool setWiper(uint8_t reg,uint8_t data){
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af02      	add	r7, sp, #8
 800032e:	4603      	mov	r3, r0
 8000330:	460a      	mov	r2, r1
 8000332:	71fb      	strb	r3, [r7, #7]
 8000334:	4613      	mov	r3, r2
 8000336:	71bb      	strb	r3, [r7, #6]
	 buf_pot[0] = reg;
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <setWiper+0x48>)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	7013      	strb	r3, [r2, #0]
	 buf_pot[1] = data;
 800033e:	4a0c      	ldr	r2, [pc, #48]	; (8000370 <setWiper+0x48>)
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	7053      	strb	r3, [r2, #1]
	 HAL_StatusTypeDef  ret = HAL_I2C_Master_Transmit(&hi2c3, DS3502_ADDR, buf_pot, 2, HAL_MAX_DELAY);
 8000344:	2350      	movs	r3, #80	; 0x50
 8000346:	b299      	uxth	r1, r3
 8000348:	f04f 33ff 	mov.w	r3, #4294967295
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2302      	movs	r3, #2
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <setWiper+0x48>)
 8000352:	4808      	ldr	r0, [pc, #32]	; (8000374 <setWiper+0x4c>)
 8000354:	f001 fa3e 	bl	80017d4 <HAL_I2C_Master_Transmit>
 8000358:	4603      	mov	r3, r0
 800035a:	73fb      	strb	r3, [r7, #15]
	 if (ret != HAL_OK){
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <setWiper+0x3e>
		 return false;
 8000362:	2300      	movs	r3, #0
 8000364:	e000      	b.n	8000368 <setWiper+0x40>
	 }
	 else{
		 return true;
 8000366:	2301      	movs	r3, #1

	 }
}
 8000368:	4618      	mov	r0, r3
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000090 	.word	0x20000090
 8000374:	20000104 	.word	0x20000104

08000378 <can_task_pot>:
		}
	  osDelay(500);
  }
  /* USER CODE END panel_task */
}
void can_task_pot(){
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af02      	add	r7, sp, #8
	for(;;){
		if(enable_potentiometer){
 800037e:	4b3c      	ldr	r3, [pc, #240]	; (8000470 <can_task_pot+0xf8>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d024      	beq.n	80003d2 <can_task_pot+0x5a>
			setWiper(DS3502_REG_WR_IVR,5);
 8000388:	2300      	movs	r3, #0
 800038a:	2105      	movs	r1, #5
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ffcb 	bl	8000328 <setWiper>
			osDelay(1000);
 8000392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000396:	f002 ff4f 	bl	8003238 <osDelay>
			setWiper(DS3502_REG_WR_IVR,20);
 800039a:	2300      	movs	r3, #0
 800039c:	2114      	movs	r1, #20
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ffc2 	bl	8000328 <setWiper>
			osDelay(1000);
 80003a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a8:	f002 ff46 	bl	8003238 <osDelay>
			setWiper(DS3502_REG_WR_IVR,30);
 80003ac:	2300      	movs	r3, #0
 80003ae:	211e      	movs	r1, #30
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ffb9 	bl	8000328 <setWiper>
			osDelay(1000);
 80003b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ba:	f002 ff3d 	bl	8003238 <osDelay>
			setWiper(DS3502_REG_WR_IVR,120);
 80003be:	2300      	movs	r3, #0
 80003c0:	2178      	movs	r1, #120	; 0x78
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffb0 	bl	8000328 <setWiper>
			osDelay(1000);
 80003c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003cc:	f002 ff34 	bl	8003238 <osDelay>
 80003d0:	e048      	b.n	8000464 <can_task_pot+0xec>
		}
		else{
		    //@return True if initialization was successful, otherwise false.
			uint8_t devices = 0u;
 80003d2:	2300      	movs	r3, #0
 80003d4:	71fb      	strb	r3, [r7, #7]

			printf("Searching for I2C devices on the bus...\n");
 80003d6:	4827      	ldr	r0, [pc, #156]	; (8000474 <can_task_pot+0xfc>)
 80003d8:	f005 fe24 	bl	8006024 <puts>
			HAL_StatusTypeDef  status ;
			/* Values outside 0x03 and 0x77 are invalid. */
			for (uint8_t i = 0x03u; i < 0x77u; i++)
 80003dc:	2303      	movs	r3, #3
 80003de:	71bb      	strb	r3, [r7, #6]
 80003e0:	e019      	b.n	8000416 <can_task_pot+0x9e>
			{
				uint8_t address = i << 1u ;
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	713b      	strb	r3, [r7, #4]
				status = HAL_I2C_IsDeviceReady(&hi2c3, address, 3u, 10u);
 80003e8:	793b      	ldrb	r3, [r7, #4]
 80003ea:	b299      	uxth	r1, r3
 80003ec:	230a      	movs	r3, #10
 80003ee:	2203      	movs	r2, #3
 80003f0:	4821      	ldr	r0, [pc, #132]	; (8000478 <can_task_pot+0x100>)
 80003f2:	f001 fae3 	bl	80019bc <HAL_I2C_IsDeviceReady>
 80003f6:	4603      	mov	r3, r0
 80003f8:	70fb      	strb	r3, [r7, #3]
				/* In case there is a positive feedback, print it out. */
				if (HAL_OK == status)
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d107      	bne.n	8000410 <can_task_pot+0x98>
				{
				  printf("Device found: 0x%02X\n", address);
 8000400:	793b      	ldrb	r3, [r7, #4]
 8000402:	4619      	mov	r1, r3
 8000404:	481d      	ldr	r0, [pc, #116]	; (800047c <can_task_pot+0x104>)
 8000406:	f005 fd87 	bl	8005f18 <iprintf>
				  devices++;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3301      	adds	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
			for (uint8_t i = 0x03u; i < 0x77u; i++)
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	3301      	adds	r3, #1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	2b76      	cmp	r3, #118	; 0x76
 800041a:	d9e2      	bls.n	80003e2 <can_task_pot+0x6a>
				}
			 }
			  /* Feedback of the total number of devices. */
			  if (0u == devices)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d103      	bne.n	800042a <can_task_pot+0xb2>
			  {
				printf("No device found.\n");
 8000422:	4817      	ldr	r0, [pc, #92]	; (8000480 <can_task_pot+0x108>)
 8000424:	f005 fdfe 	bl	8006024 <puts>
 8000428:	e01c      	b.n	8000464 <can_task_pot+0xec>
			  }
			  else
			  {
				printf("Total found devices: %d\n", devices);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	4619      	mov	r1, r3
 800042e:	4815      	ldr	r0, [pc, #84]	; (8000484 <can_task_pot+0x10c>)
 8000430:	f005 fd72 	bl	8005f18 <iprintf>
				   // Tell DS3502 that we want to read from the pot register
					 buf_pot[0] = DS3502_REG_CR;
 8000434:	2202      	movs	r2, #2
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <can_task_pot+0x110>)
 8000438:	701a      	strb	r2, [r3, #0]
				   //Write the MODE bit which determines how I2C data is written to the WR and IVR data register
					 buf_pot[1] = DS3502_MODE_WR;
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <can_task_pot+0x110>)
 800043e:	705a      	strb	r2, [r3, #1]
					 HAL_StatusTypeDef  ret = HAL_I2C_Master_Transmit(&hi2c3, DS3502_ADDR, buf_pot, 2, HAL_MAX_DELAY);
 8000440:	2350      	movs	r3, #80	; 0x50
 8000442:	b299      	uxth	r1, r3
 8000444:	f04f 33ff 	mov.w	r3, #4294967295
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2302      	movs	r3, #2
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <can_task_pot+0x110>)
 800044e:	480a      	ldr	r0, [pc, #40]	; (8000478 <can_task_pot+0x100>)
 8000450:	f001 f9c0 	bl	80017d4 <HAL_I2C_Master_Transmit>
 8000454:	4603      	mov	r3, r0
 8000456:	717b      	strb	r3, [r7, #5]
					 if (ret == HAL_OK){
 8000458:	797b      	ldrb	r3, [r7, #5]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d102      	bne.n	8000464 <can_task_pot+0xec>
						 enable_potentiometer = true;
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <can_task_pot+0xf8>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
//				getWiper(DS3502_REG_WR_IVR,pos);
//			}
//			g_sendInfothrottle = 1;
//			g_throttleModule = 0;
//		}
       osDelay(500);
 8000464:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000468:	f002 fee6 	bl	8003238 <osDelay>
		if(enable_potentiometer){
 800046c:	e787      	b.n	800037e <can_task_pot+0x6>
 800046e:	bf00      	nop
 8000470:	2000009c 	.word	0x2000009c
 8000474:	08006d1c 	.word	0x08006d1c
 8000478:	20000104 	.word	0x20000104
 800047c:	08006d44 	.word	0x08006d44
 8000480:	08006d5c 	.word	0x08006d5c
 8000484:	08006d70 	.word	0x08006d70
 8000488:	20000090 	.word	0x20000090

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fb21 	bl	8000ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f82c 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f8f0 	bl	800067c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800049c:	f000 f868 	bl	8000570 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 80004a0:	f000 f8ac 	bl	80005fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  can_init();
 80004a4:	f7ff ff0c 	bl	80002c0 <can_init>
  //pot_init();
  //lcd_init();
  /* Init scheduler */
  osKernelInitialize();
 80004a8:	f002 fdea 	bl	8003080 <osKernelInitialize>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ac:	f002 fde8 	bl	8003080 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004b0:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <main+0x4c>)
 80004b2:	2100      	movs	r1, #0
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <main+0x50>)
 80004b6:	f002 fe2d 	bl	8003114 <osThreadNew>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <main+0x54>)
 80004be:	6013      	str	r3, [r2, #0]

  /* creation of canTask_panel */
  //canTask_panelHandle = osThreadNew(can_task_panel, NULL, &canTask_panel_attributes);

  /* creation of canTask_pot */
  canTask_potHandle = osThreadNew(can_task_pot, NULL, &canTask_pot_attributes);
 80004c0:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <main+0x58>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	4808      	ldr	r0, [pc, #32]	; (80004e8 <main+0x5c>)
 80004c6:	f002 fe25 	bl	8003114 <osThreadNew>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <main+0x60>)
 80004ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004d0:	f002 fdfa 	bl	80030c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x48>
 80004d6:	bf00      	nop
 80004d8:	08006dfc 	.word	0x08006dfc
 80004dc:	080006c5 	.word	0x080006c5
 80004e0:	20000150 	.word	0x20000150
 80004e4:	08006e20 	.word	0x08006e20
 80004e8:	08000379 	.word	0x08000379
 80004ec:	20000154 	.word	0x20000154

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0318 	add.w	r3, r7, #24
 80004fa:	2238      	movs	r2, #56	; 0x38
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f005 fc6d 	bl	8005dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000512:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000516:	f001 fdef 	bl	80020f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000524:	2340      	movs	r3, #64	; 0x40
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000528:	2300      	movs	r3, #0
 800052a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052c:	f107 0318 	add.w	r3, r7, #24
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fe85 	bl	8002240 <HAL_RCC_OscConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800053c:	f000 f8ca 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	230f      	movs	r3, #15
 8000542:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000544:	2301      	movs	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f002 f989 	bl	8002870 <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000564:	f000 f8b6 	bl	80006d4 <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3750      	adds	r7, #80	; 0x50
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 8000576:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <MX_FDCAN1_Init+0x88>)
 8000578:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 800058e:	2200      	movs	r2, #0
 8000590:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 8000594:	2200      	movs	r2, #0
 8000596:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 800059a:	2200      	movs	r2, #0
 800059c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005ac:	220d      	movs	r2, #13
 80005ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 16;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005b8:	2210      	movs	r2, #16
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005be:	2201      	movs	r2, #1
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005c4:	220e      	movs	r2, #14
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005dc:	2200      	movs	r2, #0
 80005de:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_FDCAN1_Init+0x84>)
 80005e2:	f000 fbcd 	bl	8000d80 <HAL_FDCAN_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80005ec:	f000 f872 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200000a0 	.word	0x200000a0
 80005f8:	40006400 	.word	0x40006400

080005fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_I2C3_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_I2C3_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_I2C3_Init+0x74>)
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <MX_I2C3_Init+0x7c>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_I2C3_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_I2C3_Init+0x74>)
 8000614:	2201      	movs	r2, #1
 8000616:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_I2C3_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_I2C3_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C3_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C3_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C3_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <MX_I2C3_Init+0x74>)
 8000638:	f001 f83c 	bl	80016b4 <HAL_I2C_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000642:	f000 f847 	bl	80006d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000646:	2100      	movs	r1, #0
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <MX_I2C3_Init+0x74>)
 800064a:	f001 fcbd 	bl	8001fc8 <HAL_I2CEx_ConfigAnalogFilter>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000654:	f000 f83e 	bl	80006d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000658:	2100      	movs	r1, #0
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_I2C3_Init+0x74>)
 800065c:	f001 fcff 	bl	800205e <HAL_I2CEx_ConfigDigitalFilter>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 f835 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000104 	.word	0x20000104
 8000674:	40007800 	.word	0x40007800
 8000678:	00303d5b 	.word	0x00303d5b

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_GPIO_Init+0x44>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <MX_GPIO_Init+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <MX_GPIO_Init+0x44>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_GPIO_Init+0x44>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <MX_GPIO_Init+0x44>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_GPIO_Init+0x44>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f002 fdb3 	bl	8003238 <osDelay>
 80006d2:	e7fb      	b.n	80006cc <StartDefaultTask+0x8>

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_MspInit+0x4c>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <HAL_MspInit+0x4c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6613      	str	r3, [r2, #96]	; 0x60
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_MspInit+0x4c>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <HAL_MspInit+0x4c>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <HAL_MspInit+0x4c>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6593      	str	r3, [r2, #88]	; 0x58
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_MspInit+0x4c>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	210f      	movs	r1, #15
 800071a:	f06f 0001 	mvn.w	r0, #1
 800071e:	f000 fb08 	bl	8000d32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09a      	sub	sp, #104	; 0x68
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	2244      	movs	r2, #68	; 0x44
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f005 fb44 	bl	8005dde <memset>
  if(hfdcan->Instance==FDCAN1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a20      	ldr	r2, [pc, #128]	; (80007dc <HAL_FDCAN_MspInit+0xac>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d139      	bne.n	80007d4 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fa61 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800077c:	f7ff ffaa 	bl	80006d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_FDCAN_MspInit+0xb0>)
 8000782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <HAL_FDCAN_MspInit+0xb0>)
 8000786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078a:	6593      	str	r3, [r2, #88]	; 0x58
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_FDCAN_MspInit+0xb0>)
 800078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_FDCAN_MspInit+0xb0>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <HAL_FDCAN_MspInit+0xb0>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_FDCAN_MspInit+0xb0>)
 80007a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007c2:	2309      	movs	r3, #9
 80007c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d0:	f000 fdee 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	3768      	adds	r7, #104	; 0x68
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40006400 	.word	0x40006400
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	2244      	movs	r2, #68	; 0x44
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f005 faea 	bl	8005dde <memset>
  if(hi2c->Instance==I2C3)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a2e      	ldr	r2, [pc, #184]	; (80008c8 <HAL_I2C_MspInit+0xe4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d154      	bne.n	80008be <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000818:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081e:	f107 0318 	add.w	r3, r7, #24
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fa08 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f7ff ff51 	bl	80006d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000866:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000868:	2312      	movs	r3, #18
 800086a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000874:	2302      	movs	r3, #2
 8000876:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800087c:	4619      	mov	r1, r3
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f000 fd95 	bl	80013b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000886:	2320      	movs	r3, #32
 8000888:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088a:	2312      	movs	r3, #18
 800088c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000896:	2308      	movs	r3, #8
 8000898:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <HAL_I2C_MspInit+0xec>)
 80008a2:	f000 fd85 	bl	80013b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 80008a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 80008ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008b0:	6593      	str	r3, [r2, #88]	; 0x58
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_I2C_MspInit+0xe8>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3770      	adds	r7, #112	; 0x70
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40007800 	.word	0x40007800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000400 	.word	0x48000400

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f93a 	bl	8000b7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000908:	f004 f8ce 	bl	8004aa8 <xTaskGetSchedulerState>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	d001      	beq.n	8000916 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000912:	f004 feb9 	bl	8005688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	e00a      	b.n	8000942 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800092c:	f3af 8000 	nop.w
 8000930:	4601      	mov	r1, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	60ba      	str	r2, [r7, #8]
 8000938:	b2ca      	uxtb	r2, r1
 800093a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	3301      	adds	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	429a      	cmp	r2, r3
 8000948:	dbf0      	blt.n	800092c <_read+0x12>
	}

return len;
 800094a:	687b      	ldr	r3, [r7, #4]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e009      	b.n	800097a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	60ba      	str	r2, [r7, #8]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	3301      	adds	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	429a      	cmp	r2, r3
 8000980:	dbf1      	blt.n	8000966 <_write+0x12>
	}
	return len;
 8000982:	687b      	ldr	r3, [r7, #4]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <_close>:

int _close(int file)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	return -1;
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b4:	605a      	str	r2, [r3, #4]
	return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_isatty>:

int _isatty(int file)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
	return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f005 f8aa 	bl	8005b7c <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20008000 	.word	0x20008000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	20000158 	.word	0x20000158
 8000a5c:	20001b80 	.word	0x20001b80

08000a60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f005 f95f 	bl	8005d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fce9 	bl	800048c <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   r0, =_estack
 8000abc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ac8:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8000acc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ad0:	20001b80 	.word	0x20001b80

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>

08000ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f91b 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f000 f80e 	bl	8000b08 <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e001      	b.n	8000afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af8:	f7ff fdf2 	bl	80006e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]

}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_InitTick+0x68>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d022      	beq.n	8000b62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <HAL_InitTick+0x68>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f918 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10f      	bne.n	8000b5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d809      	bhi.n	8000b56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4a:	f000 f8f2 	bl	8000d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_InitTick+0x70>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e004      	b.n	8000b66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e001      	b.n	8000b66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x20>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <HAL_IncTick+0x1c>)
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	2000015c 	.word	0x2000015c
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000015c 	.word	0x2000015c

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff47 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff90 	bl	8000c70 <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5f 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb2 	bl	8000cd8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e147      	b.n	8001022 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fcc2 	bl	8000730 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	699a      	ldr	r2, [r3, #24]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0210 	bic.w	r2, r2, #16
 8000dba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dbc:	f7ff fef0 	bl	8000ba0 <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dc2:	e012      	b.n	8000dea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dc4:	f7ff feec 	bl	8000ba0 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	d90b      	bls.n	8000dea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f043 0201 	orr.w	r2, r3, #1
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e11b      	b.n	8001022 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	d0e5      	beq.n	8000dc4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e08:	f7ff feca 	bl	8000ba0 <HAL_GetTick>
 8000e0c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e0e:	e012      	b.n	8000e36 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e10:	f7ff fec6 	bl	8000ba0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	d90b      	bls.n	8000e36 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	f043 0201 	orr.w	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e0f5      	b.n	8001022 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0e5      	beq.n	8000e10 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	699a      	ldr	r2, [r3, #24]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 0202 	orr.w	r2, r2, #2
 8000e52:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a74      	ldr	r2, [pc, #464]	; (800102c <HAL_FDCAN_Init+0x2ac>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d103      	bne.n	8000e66 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000e5e:	4a74      	ldr	r2, [pc, #464]	; (8001030 <HAL_FDCAN_Init+0x2b0>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7c1b      	ldrb	r3, [r3, #16]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d108      	bne.n	8000e80 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e7c:	619a      	str	r2, [r3, #24]
 8000e7e:	e007      	b.n	8000e90 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e8e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7c5b      	ldrb	r3, [r3, #17]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ea6:	619a      	str	r2, [r3, #24]
 8000ea8:	e007      	b.n	8000eba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	699a      	ldr	r2, [r3, #24]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000eb8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7c9b      	ldrb	r3, [r3, #18]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ed0:	619a      	str	r2, [r3, #24]
 8000ed2:	e007      	b.n	8000ee4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ee2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	699a      	ldr	r2, [r3, #24]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f08:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0210 	bic.w	r2, r2, #16
 8000f18:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0204 	orr.w	r2, r2, #4
 8000f30:	619a      	str	r2, [r3, #24]
 8000f32:	e02c      	b.n	8000f8e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d028      	beq.n	8000f8e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d01c      	beq.n	8000f7e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f52:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0210 	orr.w	r2, r2, #16
 8000f62:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d110      	bne.n	8000f8e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	699a      	ldr	r2, [r3, #24]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0220 	orr.w	r2, r2, #32
 8000f7a:	619a      	str	r2, [r3, #24]
 8000f7c:	e007      	b.n	8000f8e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	699a      	ldr	r2, [r3, #24]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0220 	orr.w	r2, r2, #32
 8000f8c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f9e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fa6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fb6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fb8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fc2:	d115      	bne.n	8000ff0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fd2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000fdc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000fec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000fee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f97c 	bl	8001304 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40006400 	.word	0x40006400
 8001030:	40006500 	.word	0x40006500

08001034 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001044:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d002      	beq.n	8001052 <HAL_FDCAN_ConfigFilter+0x1e>
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d13d      	bne.n	80010ce <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d119      	bne.n	800108e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001066:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800106e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e01d      	b.n	80010ca <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	075a      	lsls	r2, r3, #29
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	079a      	lsls	r2, r3, #30
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3304      	adds	r3, #4
 80010c2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e006      	b.n	80010dc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f043 0202 	orr.w	r2, r3, #2
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
  }
}
 80010dc:	4618      	mov	r0, r3
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d110      	bne.n	800111e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2202      	movs	r2, #2
 8001100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	699a      	ldr	r2, [r3, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e006      	b.n	800112c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f043 0204 	orr.w	r2, r3, #4
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
  }
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800114a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d003      	beq.n	800115a <HAL_FDCAN_ActivateNotification+0x22>
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	2b02      	cmp	r3, #2
 8001156:	f040 80c8 	bne.w	80012ea <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d03b      	beq.n	80011ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d031      	beq.n	80011ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d027      	beq.n	80011ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01d      	beq.n	80011ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d013      	beq.n	80011ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d107      	bne.n	80011fe <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0201 	orr.w	r2, r2, #1
 80011fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d13b      	bne.n	800128a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d131      	bne.n	800128a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d127      	bne.n	800128a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d11d      	bne.n	800128a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	d113      	bne.n	800128a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00c      	beq.n	800129a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0202 	orr.w	r2, r2, #2
 8001298:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d009      	beq.n	80012b8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e006      	b.n	80012f8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	f043 0202 	orr.w	r2, r3, #2
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
  }
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800130e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800131e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001344:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	061a      	lsls	r2, r3, #24
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e005      	b.n	8001392 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3304      	adds	r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3f3      	bcc.n	8001386 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	4000a400 	.word	0x4000a400

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013be:	e15a      	b.n	8001676 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 814c 	beq.w	8001670 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d005      	beq.n	80013f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d130      	bne.n	8001452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001426:	2201      	movs	r2, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f003 0201 	and.w	r2, r3, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b03      	cmp	r3, #3
 800145c:	d017      	beq.n	800148e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d123      	bne.n	80014e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0203 	and.w	r2, r3, #3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 80a6 	beq.w	8001670 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001524:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <HAL_GPIO_Init+0x2e4>)
 8001526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001528:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HAL_GPIO_Init+0x2e4>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6613      	str	r3, [r2, #96]	; 0x60
 8001530:	4b58      	ldr	r3, [pc, #352]	; (8001694 <HAL_GPIO_Init+0x2e4>)
 8001532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153c:	4a56      	ldr	r2, [pc, #344]	; (8001698 <HAL_GPIO_Init+0x2e8>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001566:	d01f      	beq.n	80015a8 <HAL_GPIO_Init+0x1f8>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x2ec>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d019      	beq.n	80015a4 <HAL_GPIO_Init+0x1f4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_GPIO_Init+0x2f0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1f0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_GPIO_Init+0x2f4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1ec>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_GPIO_Init+0x2f8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1e8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_GPIO_Init+0x2fc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1e4>
 8001590:	2305      	movs	r3, #5
 8001592:	e00a      	b.n	80015aa <HAL_GPIO_Init+0x1fa>
 8001594:	2306      	movs	r3, #6
 8001596:	e008      	b.n	80015aa <HAL_GPIO_Init+0x1fa>
 8001598:	2304      	movs	r3, #4
 800159a:	e006      	b.n	80015aa <HAL_GPIO_Init+0x1fa>
 800159c:	2303      	movs	r3, #3
 800159e:	e004      	b.n	80015aa <HAL_GPIO_Init+0x1fa>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_Init+0x1fa>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_GPIO_Init+0x1fa>
 80015a8:	2300      	movs	r3, #0
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	f002 0203 	and.w	r2, r2, #3
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	4093      	lsls	r3, r2
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ba:	4937      	ldr	r1, [pc, #220]	; (8001698 <HAL_GPIO_Init+0x2e8>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c8:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_GPIO_Init+0x300>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ec:	4a30      	ldr	r2, [pc, #192]	; (80016b0 <HAL_GPIO_Init+0x300>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x300>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001616:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <HAL_GPIO_Init+0x300>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_GPIO_Init+0x300>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_GPIO_Init+0x300>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_GPIO_Init+0x300>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_GPIO_Init+0x300>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	f47f ae9d 	bne.w	80013c0 <HAL_GPIO_Init+0x10>
  }
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000c00 	.word	0x48000c00
 80016a8:	48001000 	.word	0x48001000
 80016ac:	48001400 	.word	0x48001400
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e081      	b.n	80017ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff f882 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	; 0x24
 80016e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	e006      	b.n	800173c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800173a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d104      	bne.n	800174e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800174c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800175c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69d9      	ldr	r1, [r3, #28]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1a      	ldr	r2, [r3, #32]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	461a      	mov	r2, r3
 80017e0:	460b      	mov	r3, r1
 80017e2:	817b      	strh	r3, [r7, #10]
 80017e4:	4613      	mov	r3, r2
 80017e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	f040 80da 	bne.w	80019aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_I2C_Master_Transmit+0x30>
 8001800:	2302      	movs	r3, #2
 8001802:	e0d3      	b.n	80019ac <HAL_I2C_Master_Transmit+0x1d8>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800180c:	f7ff f9c8 	bl	8000ba0 <HAL_GetTick>
 8001810:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2319      	movs	r3, #25
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f9f7 	bl	8001c12 <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0be      	b.n	80019ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2221      	movs	r2, #33	; 0x21
 8001832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2210      	movs	r2, #16
 800183a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	893a      	ldrh	r2, [r7, #8]
 800184e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d90e      	bls.n	800187e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	22ff      	movs	r2, #255	; 0xff
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	b2da      	uxtb	r2, r3
 800186c:	8979      	ldrh	r1, [r7, #10]
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fb74 	bl	8001f64 <I2C_TransferConfig>
 800187c:	e06c      	b.n	8001958 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29a      	uxth	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188c:	b2da      	uxtb	r2, r3
 800188e:	8979      	ldrh	r1, [r7, #10]
 8001890:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fb63 	bl	8001f64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800189e:	e05b      	b.n	8001958 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	6a39      	ldr	r1, [r7, #32]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f9f4 	bl	8001c92 <I2C_WaitOnTXISFlagUntilTimeout>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e07b      	b.n	80019ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	781a      	ldrb	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29a      	uxth	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d034      	beq.n	8001958 <HAL_I2C_Master_Transmit+0x184>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d130      	bne.n	8001958 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	2200      	movs	r2, #0
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f986 	bl	8001c12 <I2C_WaitOnFlagUntilTimeout>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e04d      	b.n	80019ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d90e      	bls.n	8001938 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	22ff      	movs	r2, #255	; 0xff
 800191e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	b2da      	uxtb	r2, r3
 8001926:	8979      	ldrh	r1, [r7, #10]
 8001928:	2300      	movs	r3, #0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 fb17 	bl	8001f64 <I2C_TransferConfig>
 8001936:	e00f      	b.n	8001958 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	b2da      	uxtb	r2, r3
 8001948:	8979      	ldrh	r1, [r7, #10]
 800194a:	2300      	movs	r3, #0
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fb06 	bl	8001f64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d19e      	bne.n	80018a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 f9d3 	bl	8001d12 <I2C_WaitOnSTOPFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e01a      	b.n	80019ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2220      	movs	r2, #32
 800197c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800198a:	400b      	ands	r3, r1
 800198c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
  }
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	80002000 	.word	0x80002000
 80019b8:	fe00e800 	.word	0xfe00e800

080019bc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	460b      	mov	r3, r1
 80019ca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b20      	cmp	r3, #32
 80019da:	f040 80f1 	bne.w	8001bc0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ec:	d101      	bne.n	80019f2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0e7      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_I2C_IsDeviceReady+0x44>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0e0      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2224      	movs	r2, #36	; 0x24
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_I2C_IsDeviceReady+0x72>
 8001a1e:	897b      	ldrh	r3, [r7, #10]
 8001a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a2c:	e004      	b.n	8001a38 <HAL_I2C_IsDeviceReady+0x7c>
 8001a2e:	897b      	ldrh	r3, [r7, #10]
 8001a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a34:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f8af 	bl	8000ba0 <HAL_GetTick>
 8001a42:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a70:	e034      	b.n	8001adc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d01a      	beq.n	8001ab0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a7a:	f7ff f891 	bl	8000ba0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d302      	bcc.n	8001a90 <HAL_I2C_IsDeviceReady+0xd4>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10f      	bne.n	8001ab0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e088      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001adc:	7ffb      	ldrb	r3, [r7, #31]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <HAL_I2C_IsDeviceReady+0x12c>
 8001ae2:	7fbb      	ldrb	r3, [r7, #30]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0c4      	beq.n	8001a72 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d01a      	beq.n	8001b2c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	2120      	movs	r1, #32
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f886 	bl	8001c12 <I2C_WaitOnFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e058      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2220      	movs	r2, #32
 8001b16:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e04a      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	2120      	movs	r1, #32
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f86b 	bl	8001c12 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e03d      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2220      	movs	r2, #32
 8001b54:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d118      	bne.n	8001b90 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b6c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2120      	movs	r1, #32
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f84a 	bl	8001c12 <I2C_WaitOnFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e01c      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	f63f af3b 	bhi.w	8001a16 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f043 0220 	orr.w	r2, r3, #32
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001bc0:	2302      	movs	r3, #2
  }
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d103      	bne.n	8001be8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d007      	beq.n	8001c06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	619a      	str	r2, [r3, #24]
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c22:	e022      	b.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d01e      	beq.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2c:	f7fe ffb8 	bl	8000ba0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d302      	bcc.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d113      	bne.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4013      	ands	r3, r2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d0cd      	beq.n	8001c24 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c9e:	e02c      	b.n	8001cfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f871 	bl	8001d8c <I2C_IsErrorOccurred>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e02a      	b.n	8001d0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d01e      	beq.n	8001cfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbc:	f7fe ff70 	bl	8000ba0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d302      	bcc.n	8001cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d113      	bne.n	8001cfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f043 0220 	orr.w	r2, r3, #32
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e007      	b.n	8001d0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d1cb      	bne.n	8001ca0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1e:	e028      	b.n	8001d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f831 	bl	8001d8c <I2C_IsErrorOccurred>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e026      	b.n	8001d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7fe ff34 	bl	8000ba0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d113      	bne.n	8001d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f043 0220 	orr.w	r2, r3, #32
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e007      	b.n	8001d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d1cf      	bne.n	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d075      	beq.n	8001ea4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2210      	movs	r2, #16
 8001dbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dc0:	e056      	b.n	8001e70 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d052      	beq.n	8001e70 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dca:	f7fe fee9 	bl	8000ba0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d302      	bcc.n	8001de0 <I2C_IsErrorOccurred+0x54>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d147      	bne.n	8001e70 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001df2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e02:	d12e      	bne.n	8001e62 <I2C_IsErrorOccurred+0xd6>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e0a:	d02a      	beq.n	8001e62 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d027      	beq.n	8001e62 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e20:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e22:	f7fe febd 	bl	8000ba0 <HAL_GetTick>
 8001e26:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e28:	e01b      	b.n	8001e62 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e2a:	f7fe feb9 	bl	8000ba0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b19      	cmp	r3, #25
 8001e36:	d914      	bls.n	8001e62 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d1dc      	bne.n	8001e2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d003      	beq.n	8001e86 <I2C_IsErrorOccurred+0xfa>
 8001e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d09d      	beq.n	8001dc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2220      	movs	r2, #32
 8001e94:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01c      	beq.n	8001f54 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff fe55 	bl	8001bca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <I2C_IsErrorOccurred+0x1d4>)
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	fe00e800 	.word	0xfe00e800

08001f64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	817b      	strh	r3, [r7, #10]
 8001f72:	4613      	mov	r3, r2
 8001f74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f7c:	7a7b      	ldrb	r3, [r7, #9]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f84:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f92:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <I2C_TransferConfig+0x60>)
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	ea02 0103 	and.w	r1, r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	03ff63ff 	.word	0x03ff63ff

08001fc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d138      	bne.n	8002050 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e032      	b.n	8002052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	; 0x24
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800201a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b20      	cmp	r3, #32
 8002072:	d139      	bne.n	80020e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800207e:	2302      	movs	r3, #2
 8002080:	e033      	b.n	80020ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2224      	movs	r2, #36	; 0x24
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020e8:	2302      	movs	r3, #2
  }
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d141      	bne.n	800218a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002112:	d131      	bne.n	8002178 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800211a:	4a46      	ldr	r2, [pc, #280]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800212c:	4a41      	ldr	r2, [pc, #260]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002132:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002134:	4b40      	ldr	r3, [pc, #256]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2232      	movs	r2, #50	; 0x32
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	4a3f      	ldr	r2, [pc, #252]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	0c9b      	lsrs	r3, r3, #18
 8002146:	3301      	adds	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214a:	e002      	b.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3b01      	subs	r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d102      	bne.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f2      	bne.n	800214c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002166:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	d158      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e057      	b.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002188:	e04d      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002190:	d141      	bne.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002192:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d131      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021a6:	4a23      	ldr	r2, [pc, #140]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2232      	movs	r2, #50	; 0x32
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	4a1c      	ldr	r2, [pc, #112]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0c9b      	lsrs	r3, r3, #18
 80021d2:	3301      	adds	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d6:	e002      	b.n	80021de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3b01      	subs	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ea:	d102      	bne.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f2      	bne.n	80021d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fe:	d112      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e011      	b.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002214:	e007      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002224:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40007000 	.word	0x40007000
 8002238:	20000000 	.word	0x20000000
 800223c:	431bde83 	.word	0x431bde83

08002240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e306      	b.n	8002860 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d075      	beq.n	800234a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225e:	4b97      	ldr	r3, [pc, #604]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002268:	4b94      	ldr	r3, [pc, #592]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d102      	bne.n	800227e <HAL_RCC_OscConfig+0x3e>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d002      	beq.n	8002284 <HAL_RCC_OscConfig+0x44>
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d10b      	bne.n	800229c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	4b8d      	ldr	r3, [pc, #564]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d05b      	beq.n	8002348 <HAL_RCC_OscConfig+0x108>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d157      	bne.n	8002348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e2e1      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d106      	bne.n	80022b4 <HAL_RCC_OscConfig+0x74>
 80022a6:	4b85      	ldr	r3, [pc, #532]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a84      	ldr	r2, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e01d      	b.n	80022f0 <HAL_RCC_OscConfig+0xb0>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x98>
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7e      	ldr	r2, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7b      	ldr	r2, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0xb0>
 80022d8:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b75      	ldr	r3, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a74      	ldr	r2, [pc, #464]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80022ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7fe fc52 	bl	8000ba0 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7fe fc4e 	bl	8000ba0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e2a6      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002312:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0xc0>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fc3e 	bl	8000ba0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fc3a 	bl	8000ba0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e292      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	4b60      	ldr	r3, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0xe8>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d102      	bne.n	8002376 <HAL_RCC_OscConfig+0x136>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d002      	beq.n	800237c <HAL_RCC_OscConfig+0x13c>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d11f      	bne.n	80023bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	4b4f      	ldr	r3, [pc, #316]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_OscConfig+0x154>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e265      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b49      	ldr	r3, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	4946      	ldr	r1, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <HAL_RCC_OscConfig+0x280>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fbab 	bl	8000b08 <HAL_InitTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d043      	beq.n	8002440 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e251      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c4:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fbe6 	bl	8000ba0 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d8:	f7fe fbe2 	bl	8000ba0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e23a      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	492d      	ldr	r1, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
 800240a:	e01a      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fbc2 	bl	8000ba0 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe fbbe 	bl	8000ba0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e216      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x1e0>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d041      	beq.n	80024d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01c      	beq.n	8002490 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fb9b 	bl	8000ba0 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246e:	f7fe fb97 	bl	8000ba0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1ef      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ef      	beq.n	800246e <HAL_RCC_OscConfig+0x22e>
 800248e:	e020      	b.n	80024d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_RCC_OscConfig+0x27c>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7fe fb7e 	bl	8000ba0 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a6:	e00d      	b.n	80024c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7fe fb7a 	bl	8000ba0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d906      	bls.n	80024c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1d2      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80024c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ea      	bne.n	80024a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80a6 	beq.w	800262c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024e4:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2b4>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x2b6>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
 8002506:	4b7c      	ldr	r3, [pc, #496]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	4b79      	ldr	r3, [pc, #484]	; (80026fc <HAL_RCC_OscConfig+0x4bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x4bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x4bc>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7fe fb37 	bl	8000ba0 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7fe fb33 	bl	8000ba0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e18b      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x4bc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_RCC_OscConfig+0x32e>
 800255c:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800256c:	e024      	b.n	80025b8 <HAL_RCC_OscConfig+0x378>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b05      	cmp	r3, #5
 8002574:	d110      	bne.n	8002598 <HAL_RCC_OscConfig+0x358>
 8002576:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a5e      	ldr	r2, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002586:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002596:	e00f      	b.n	80025b8 <HAL_RCC_OscConfig+0x378>
 8002598:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d016      	beq.n	80025ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe faee 	bl	8000ba0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7fe faea 	bl	8000ba0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e140      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025de:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ed      	beq.n	80025c8 <HAL_RCC_OscConfig+0x388>
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7fe fad7 	bl	8000ba0 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fad3 	bl	8000ba0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e129      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800260c:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ed      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002620:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	4a34      	ldr	r2, [pc, #208]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d03c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01c      	beq.n	800267a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe faa6 	bl	8000ba0 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002658:	f7fe faa2 	bl	8000ba0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0fa      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800266c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ef      	beq.n	8002658 <HAL_RCC_OscConfig+0x418>
 8002678:	e01b      	b.n	80026b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800267a:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 800267c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fe fa89 	bl	8000ba0 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002692:	f7fe fa85 	bl	8000ba0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0dd      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ef      	bne.n	8002692 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80d1 	beq.w	800285e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	f000 808b 	beq.w	80027e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d15e      	bne.n	8002790 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fa5f 	bl	8000ba0 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e00c      	b.n	8002700 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fa5b 	bl	8000ba0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d905      	bls.n	8002700 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0b3      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ec      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b56      	ldr	r3, [pc, #344]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b56      	ldr	r3, [pc, #344]	; (800286c <HAL_RCC_OscConfig+0x62c>)
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6a11      	ldr	r1, [r2, #32]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800271c:	3a01      	subs	r2, #1
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002726:	0212      	lsls	r2, r2, #8
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800272e:	0852      	lsrs	r2, r2, #1
 8002730:	3a01      	subs	r2, #1
 8002732:	0552      	lsls	r2, r2, #21
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0652      	lsls	r2, r2, #25
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002746:	06d2      	lsls	r2, r2, #27
 8002748:	430a      	orrs	r2, r1
 800274a:	4947      	ldr	r1, [pc, #284]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 800274c:	4313      	orrs	r3, r2
 800274e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a44      	ldr	r2, [pc, #272]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800275c:	4b42      	ldr	r3, [pc, #264]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a41      	ldr	r2, [pc, #260]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002766:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fa1a 	bl	8000ba0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fa16 	bl	8000ba0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e06e      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x530>
 800278e:	e066      	b.n	800285e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a34      	ldr	r2, [pc, #208]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 8002796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a2e      	ldr	r2, [pc, #184]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 80027ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe f9f2 	bl	8000ba0 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe f9ee 	bl	8000ba0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e046      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d2:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x580>
 80027de:	e03e      	b.n	800285e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e039      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_RCC_OscConfig+0x628>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d12c      	bne.n	800285a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	3b01      	subs	r3, #1
 800280c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d123      	bne.n	800285a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d11b      	bne.n	800285a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d113      	bne.n	800285a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d109      	bne.n	800285a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	019f800c 	.word	0x019f800c

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e11e      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002888:	4b91      	ldr	r3, [pc, #580]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d910      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b8e      	ldr	r3, [pc, #568]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	498c      	ldr	r1, [pc, #560]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b8a      	ldr	r3, [pc, #552]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e106      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d073      	beq.n	80029ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d129      	bne.n	8002920 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028cc:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0f4      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028dc:	f000 f966 	bl	8002bac <RCC_GetSysClockFreqFromPLLSource>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4a7c      	ldr	r2, [pc, #496]	; (8002ad8 <HAL_RCC_ClockConfig+0x268>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d93f      	bls.n	800296a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ea:	4b7a      	ldr	r3, [pc, #488]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d033      	beq.n	800296a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002906:	2b00      	cmp	r3, #0
 8002908:	d12f      	bne.n	800296a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800290a:	4b72      	ldr	r3, [pc, #456]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002912:	4a70      	ldr	r2, [pc, #448]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002918:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e024      	b.n	800296a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d107      	bne.n	8002938 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0c6      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002938:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0be      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002948:	f000 f8ce 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 800294c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4a61      	ldr	r2, [pc, #388]	; (8002ad8 <HAL_RCC_ClockConfig+0x268>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d909      	bls.n	800296a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002956:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295e:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002964:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4957      	ldr	r1, [pc, #348]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297c:	f7fe f910 	bl	8000ba0 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7fe f90c 	bl	8000ba0 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e095      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b4e      	ldr	r3, [pc, #312]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a42      	ldr	r2, [pc, #264]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029dc:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029e4:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4936      	ldr	r1, [pc, #216]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b80      	cmp	r3, #128	; 0x80
 8002a04:	d105      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a06:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4a32      	ldr	r2, [pc, #200]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d21d      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 020f 	bic.w	r2, r3, #15
 8002a28:	4929      	ldr	r1, [pc, #164]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a30:	f7fe f8b6 	bl	8000ba0 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fe f8b2 	bl	8000ba0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e03b      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x260>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1ed      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4917      	ldr	r1, [pc, #92]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490f      	ldr	r1, [pc, #60]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a9a:	f000 f825 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <HAL_RCC_ClockConfig+0x264>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490c      	ldr	r1, [pc, #48]	; (8002adc <HAL_RCC_ClockConfig+0x26c>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x270>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x274>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f822 	bl	8000b08 <HAL_InitTick>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	04c4b400 	.word	0x04c4b400
 8002adc:	08006e44 	.word	0x08006e44
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002afa:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e047      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b00:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b0c:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	e03e      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d136      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3301      	adds	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a16      	ldr	r2, [pc, #88]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b46:	68d2      	ldr	r2, [r2, #12]
 8002b48:	0a12      	lsrs	r2, r2, #8
 8002b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	617b      	str	r3, [r7, #20]
      break;
 8002b54:	e00c      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b56:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	0a12      	lsrs	r2, r2, #8
 8002b64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
      break;
 8002b6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0e5b      	lsrs	r3, r3, #25
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e001      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b90:	693b      	ldr	r3, [r7, #16]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d10c      	bne.n	8002bea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bda:	68d2      	ldr	r2, [r2, #12]
 8002bdc:	0a12      	lsrs	r2, r2, #8
 8002bde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	617b      	str	r3, [r7, #20]
    break;
 8002be8:	e00c      	b.n	8002c04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	0a12      	lsrs	r2, r2, #8
 8002bf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
    break;
 8002c02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0e5b      	lsrs	r3, r3, #25
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	007a1200 	.word	0x007a1200
 8002c34:	00f42400 	.word	0x00f42400

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c44:	2300      	movs	r3, #0
 8002c46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8098 	beq.w	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5a:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4a3f      	ldr	r2, [pc, #252]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6593      	str	r3, [r2, #88]	; 0x58
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c82:	4b3a      	ldr	r3, [pc, #232]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a39      	ldr	r2, [pc, #228]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8e:	f7fd ff87 	bl	8000ba0 <HAL_GetTick>
 8002c92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c94:	e009      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fd ff83 	bl	8000ba0 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d902      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca8:	e005      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ef      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d159      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01e      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d019      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce4:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d04:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7fd ff43 	bl	8000ba0 <HAL_GetTick>
 8002d1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fd ff3f 	bl	8000ba0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d902      	bls.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	74fb      	strb	r3, [r7, #19]
            break;
 8002d34:	e006      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ec      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	4903      	ldr	r1, [pc, #12]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d60:	e008      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	74bb      	strb	r3, [r7, #18]
 8002d66:	e005      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d74:	7c7b      	ldrb	r3, [r7, #17]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4ba6      	ldr	r3, [pc, #664]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4aa5      	ldr	r2, [pc, #660]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d92:	4ba0      	ldr	r3, [pc, #640]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f023 0203 	bic.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	499c      	ldr	r1, [pc, #624]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db4:	4b97      	ldr	r3, [pc, #604]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 020c 	bic.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4994      	ldr	r1, [pc, #592]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd6:	4b8f      	ldr	r3, [pc, #572]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	498b      	ldr	r1, [pc, #556]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df8:	4b86      	ldr	r3, [pc, #536]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	4983      	ldr	r1, [pc, #524]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e1a:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	497a      	ldr	r1, [pc, #488]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3c:	4b75      	ldr	r3, [pc, #468]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	4972      	ldr	r1, [pc, #456]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e5e:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	4969      	ldr	r1, [pc, #420]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e80:	4b64      	ldr	r3, [pc, #400]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	4961      	ldr	r1, [pc, #388]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	4958      	ldr	r1, [pc, #352]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	4950      	ldr	r1, [pc, #320]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a4a      	ldr	r2, [pc, #296]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002efc:	4b45      	ldr	r3, [pc, #276]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	4942      	ldr	r1, [pc, #264]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1c:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a3c      	ldr	r2, [pc, #240]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d015      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f34:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4934      	ldr	r1, [pc, #208]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f52:	d105      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4a2e      	ldr	r2, [pc, #184]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	4926      	ldr	r1, [pc, #152]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	4918      	ldr	r1, [pc, #96]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003008:	7cbb      	ldrb	r3, [r7, #18]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <__NVIC_SetPriority>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003070:	2100      	movs	r1, #0
 8003072:	f06f 0004 	mvn.w	r0, #4
 8003076:	f7ff ffcf 	bl	8003018 <__NVIC_SetPriority>
#endif
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003086:	f3ef 8305 	mrs	r3, IPSR
 800308a:	603b      	str	r3, [r7, #0]
  return(result);
 800308c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003092:	f06f 0305 	mvn.w	r3, #5
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	e00c      	b.n	80030b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <osKernelInitialize+0x44>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <osKernelInitialize+0x44>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	e002      	b.n	80030b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030b4:	687b      	ldr	r3, [r7, #4]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000160 	.word	0x20000160

080030c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ce:	f3ef 8305 	mrs	r3, IPSR
 80030d2:	603b      	str	r3, [r7, #0]
  return(result);
 80030d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80030da:	f06f 0305 	mvn.w	r3, #5
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	e010      	b.n	8003104 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <osKernelStart+0x48>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d109      	bne.n	80030fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030ea:	f7ff ffbf 	bl	800306c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <osKernelStart+0x48>)
 80030f0:	2202      	movs	r2, #2
 80030f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030f4:	f001 f87c 	bl	80041f0 <vTaskStartScheduler>
      stat = osOK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	e002      	b.n	8003104 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003104:	687b      	ldr	r3, [r7, #4]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000160 	.word	0x20000160

08003114 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b08e      	sub	sp, #56	; 0x38
 8003118:	af04      	add	r7, sp, #16
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003124:	f3ef 8305 	mrs	r3, IPSR
 8003128:	617b      	str	r3, [r7, #20]
  return(result);
 800312a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800312c:	2b00      	cmp	r3, #0
 800312e:	d17e      	bne.n	800322e <osThreadNew+0x11a>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d07b      	beq.n	800322e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800313a:	2318      	movs	r3, #24
 800313c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d045      	beq.n	80031da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <osThreadNew+0x48>
        name = attr->name;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <osThreadNew+0x6e>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b38      	cmp	r3, #56	; 0x38
 8003174:	d805      	bhi.n	8003182 <osThreadNew+0x6e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <osThreadNew+0x72>
        return (NULL);
 8003182:	2300      	movs	r3, #0
 8003184:	e054      	b.n	8003230 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00e      	beq.n	80031bc <osThreadNew+0xa8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2bbb      	cmp	r3, #187	; 0xbb
 80031a4:	d90a      	bls.n	80031bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d006      	beq.n	80031bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <osThreadNew+0xa8>
        mem = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e010      	b.n	80031de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10c      	bne.n	80031de <osThreadNew+0xca>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <osThreadNew+0xca>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <osThreadNew+0xca>
          mem = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e001      	b.n	80031de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d110      	bne.n	8003206 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031ec:	9202      	str	r2, [sp, #8]
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6a3a      	ldr	r2, [r7, #32]
 80031f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fe0c 	bl	8003e18 <xTaskCreateStatic>
 8003200:	4603      	mov	r3, r0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e013      	b.n	800322e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d110      	bne.n	800322e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	b29a      	uxth	r2, r3
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fe57 	bl	8003ed2 <xTaskCreate>
 8003224:	4603      	mov	r3, r0
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <osThreadNew+0x11a>
            hTask = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800322e:	693b      	ldr	r3, [r7, #16]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003240:	f3ef 8305 	mrs	r3, IPSR
 8003244:	60bb      	str	r3, [r7, #8]
  return(result);
 8003246:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <osDelay+0x1c>
    stat = osErrorISR;
 800324c:	f06f 0305 	mvn.w	r3, #5
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e007      	b.n	8003264 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <osDelay+0x2c>
      vTaskDelay(ticks);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 ff92 	bl	8004188 <vTaskDelay>
    }
  }

  return (stat);
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <vApplicationGetIdleTaskMemory+0x2c>)
 8003280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <vApplicationGetIdleTaskMemory+0x30>)
 8003286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	601a      	str	r2, [r3, #0]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000164 	.word	0x20000164
 80032a0:	20000220 	.word	0x20000220

080032a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80032b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <vApplicationGetTimerTaskMemory+0x30>)
 80032ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	20000420 	.word	0x20000420
 80032d4:	200004dc 	.word	0x200004dc

080032d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f103 0208 	add.w	r2, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f103 0208 	add.w	r2, r3, #8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f103 0208 	add.w	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	601a      	str	r2, [r3, #0]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d103      	bne.n	800339a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e00c      	b.n	80033b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3308      	adds	r3, #8
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e002      	b.n	80033a8 <vListInsert+0x2e>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d2f6      	bcs.n	80033a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	601a      	str	r2, [r3, #0]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6852      	ldr	r2, [r2, #4]
 800340c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d103      	bne.n	8003420 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1e5a      	subs	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800346a:	f002 f87b 	bl	8005564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	441a      	add	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	3b01      	subs	r3, #1
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	441a      	add	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	22ff      	movs	r2, #255	; 0xff
 80034ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	22ff      	movs	r2, #255	; 0xff
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d114      	bne.n	80034ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01a      	beq.n	80034fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3310      	adds	r3, #16
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 f929 	bl	8004724 <xTaskRemoveFromEventList>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d012      	beq.n	80034fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <xQueueGenericReset+0xcc>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	e009      	b.n	80034fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3310      	adds	r3, #16
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fef2 	bl	80032d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3324      	adds	r3, #36	; 0x24
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff feed 	bl	80032d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034fe:	f002 f861 	bl	80055c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003502:	2301      	movs	r3, #1
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	e000ed04 	.word	0xe000ed04

08003510 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08e      	sub	sp, #56	; 0x38
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <xQueueGenericCreateStatic+0x52>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <xQueueGenericCreateStatic+0x56>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <xQueueGenericCreateStatic+0x58>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	623b      	str	r3, [r7, #32]
}
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <xQueueGenericCreateStatic+0x7e>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <xQueueGenericCreateStatic+0x82>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <xQueueGenericCreateStatic+0x84>
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	61fb      	str	r3, [r7, #28]
}
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035ae:	2350      	movs	r3, #80	; 0x50
 80035b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b50      	cmp	r3, #80	; 0x50
 80035b6:	d00a      	beq.n	80035ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61bb      	str	r3, [r7, #24]
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f805 	bl	8003600 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3730      	adds	r7, #48	; 0x30
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e002      	b.n	8003622 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800362e:	2101      	movs	r1, #1
 8003630:	69b8      	ldr	r0, [r7, #24]
 8003632:	f7ff ff05 	bl	8003440 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08e      	sub	sp, #56	; 0x38
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003656:	2300      	movs	r3, #0
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <xQueueGenericSend+0x32>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <xQueueGenericSend+0x40>
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <xQueueGenericSend+0x44>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <xQueueGenericSend+0x46>
 800368c:	2300      	movs	r3, #0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <xQueueGenericSend+0x60>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d103      	bne.n	80036b6 <xQueueGenericSend+0x6e>
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <xQueueGenericSend+0x72>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xQueueGenericSend+0x74>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	623b      	str	r3, [r7, #32]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036d6:	f001 f9e7 	bl	8004aa8 <xTaskGetSchedulerState>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <xQueueGenericSend+0x9e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <xQueueGenericSend+0xa2>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <xQueueGenericSend+0xa4>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <xQueueGenericSend+0xbe>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	61fb      	str	r3, [r7, #28]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003706:	f001 ff2d 	bl	8005564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <xQueueGenericSend+0xd4>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d129      	bne.n	8003770 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003722:	f000 fa0b 	bl	8003b3c <prvCopyDataToQueue>
 8003726:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	3324      	adds	r3, #36	; 0x24
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fff5 	bl	8004724 <xTaskRemoveFromEventList>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d013      	beq.n	8003768 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003740:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <xQueueGenericSend+0x1f8>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	e00a      	b.n	8003768 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <xQueueGenericSend+0x1f8>)
 800375a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003768:	f001 ff2c 	bl	80055c4 <vPortExitCritical>
				return pdPASS;
 800376c:	2301      	movs	r3, #1
 800376e:	e063      	b.n	8003838 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003776:	f001 ff25 	bl	80055c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800377a:	2300      	movs	r3, #0
 800377c:	e05c      	b.n	8003838 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f82f 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003792:	f001 ff17 	bl	80055c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003796:	f000 fd9b 	bl	80042d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800379a:	f001 fee3 	bl	8005564 <vPortEnterCritical>
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d103      	bne.n	80037b4 <xQueueGenericSend+0x16c>
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d103      	bne.n	80037ca <xQueueGenericSend+0x182>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ca:	f001 fefb 	bl	80055c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f81e 	bl	8004818 <xTaskCheckForTimeOut>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d124      	bne.n	800382c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037e4:	f000 faa2 	bl	8003d2c <prvIsQueueFull>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d018      	beq.n	8003820 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	3310      	adds	r3, #16
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 ff44 	bl	8004684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fe:	f000 fa2d 	bl	8003c5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003802:	f000 fd73 	bl	80042ec <xTaskResumeAll>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f af7c 	bne.w	8003706 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800380e:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <xQueueGenericSend+0x1f8>)
 8003810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	e772      	b.n	8003706 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003822:	f000 fa1b 	bl	8003c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003826:	f000 fd61 	bl	80042ec <xTaskResumeAll>
 800382a:	e76c      	b.n	8003706 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800382c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800382e:	f000 fa15 	bl	8003c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003832:	f000 fd5b 	bl	80042ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003836:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003838:	4618      	mov	r0, r3
 800383a:	3738      	adds	r7, #56	; 0x38
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b090      	sub	sp, #64	; 0x40
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d103      	bne.n	8003880 <xQueueGenericSendFromISR+0x3c>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <xQueueGenericSendFromISR+0x40>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <xQueueGenericSendFromISR+0x42>
 8003884:	2300      	movs	r3, #0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d103      	bne.n	80038ae <xQueueGenericSendFromISR+0x6a>
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <xQueueGenericSendFromISR+0x6e>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <xQueueGenericSendFromISR+0x70>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	623b      	str	r3, [r7, #32]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ce:	f001 ff2b 	bl	8005728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038d2:	f3ef 8211 	mrs	r2, BASEPRI
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	61fa      	str	r2, [r7, #28]
 80038e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <xQueueGenericSendFromISR+0xbc>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d12f      	bne.n	8003960 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003916:	f000 f911 	bl	8003b3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800391a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d112      	bne.n	800394a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d016      	beq.n	800395a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	3324      	adds	r3, #36	; 0x24
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fef7 	bl	8004724 <xTaskRemoveFromEventList>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e007      	b.n	800395a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800394a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800394e:	3301      	adds	r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	b25a      	sxtb	r2, r3
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800395a:	2301      	movs	r3, #1
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800395e:	e001      	b.n	8003964 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003960:	2300      	movs	r3, #0
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003966:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800396e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003972:	4618      	mov	r0, r3
 8003974:	3740      	adds	r7, #64	; 0x40
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <xQueueReceive+0x30>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	623b      	str	r3, [r7, #32]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <xQueueReceive+0x3e>
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueueReceive+0x42>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueReceive+0x44>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueReceive+0x5e>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61fb      	str	r3, [r7, #28]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039da:	f001 f865 	bl	8004aa8 <xTaskGetSchedulerState>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <xQueueReceive+0x6e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <xQueueReceive+0x72>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueReceive+0x74>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueReceive+0x8e>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61bb      	str	r3, [r7, #24]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a0a:	f001 fdab 	bl	8005564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01f      	beq.n	8003a5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a1e:	f000 f8f7 	bl	8003c10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1e5a      	subs	r2, r3, #1
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00f      	beq.n	8003a52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	3310      	adds	r3, #16
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fe74 	bl	8004724 <xTaskRemoveFromEventList>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a42:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <xQueueReceive+0x1bc>)
 8003a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a52:	f001 fdb7 	bl	80055c4 <vPortExitCritical>
				return pdPASS;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e069      	b.n	8003b2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a60:	f001 fdb0 	bl	80055c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e062      	b.n	8003b2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a6e:	f107 0310 	add.w	r3, r7, #16
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 feba 	bl	80047ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a7c:	f001 fda2 	bl	80055c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a80:	f000 fc26 	bl	80042d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a84:	f001 fd6e 	bl	8005564 <vPortEnterCritical>
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a8e:	b25b      	sxtb	r3, r3
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d103      	bne.n	8003a9e <xQueueReceive+0x122>
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aa4:	b25b      	sxtb	r3, r3
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d103      	bne.n	8003ab4 <xQueueReceive+0x138>
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab4:	f001 fd86 	bl	80055c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ab8:	1d3a      	adds	r2, r7, #4
 8003aba:	f107 0310 	add.w	r3, r7, #16
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fea9 	bl	8004818 <xTaskCheckForTimeOut>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d123      	bne.n	8003b14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ace:	f000 f917 	bl	8003d00 <prvIsQueueEmpty>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d017      	beq.n	8003b08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	3324      	adds	r3, #36	; 0x24
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fdcf 	bl	8004684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae8:	f000 f8b8 	bl	8003c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003aec:	f000 fbfe 	bl	80042ec <xTaskResumeAll>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d189      	bne.n	8003a0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <xQueueReceive+0x1bc>)
 8003af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	e780      	b.n	8003a0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b0a:	f000 f8a7 	bl	8003c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b0e:	f000 fbed 	bl	80042ec <xTaskResumeAll>
 8003b12:	e77a      	b.n	8003a0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b16:	f000 f8a1 	bl	8003c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b1a:	f000 fbe7 	bl	80042ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b20:	f000 f8ee 	bl	8003d00 <prvIsQueueEmpty>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f43f af6f 	beq.w	8003a0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3730      	adds	r7, #48	; 0x30
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d14d      	bne.n	8003bfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ffbc 	bl	8004ae4 <xTaskPriorityDisinherit>
 8003b6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	e043      	b.n	8003bfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d119      	bne.n	8003bb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6858      	ldr	r0, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	461a      	mov	r2, r3
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	f002 f91b 	bl	8005dc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d32b      	bcc.n	8003bfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e026      	b.n	8003bfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68d8      	ldr	r0, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	f002 f901 	bl	8005dc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	425b      	negs	r3, r3
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d207      	bcs.n	8003bec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	425b      	negs	r3, r3
 8003be6:	441a      	add	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d105      	bne.n	8003bfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c06:	697b      	ldr	r3, [r7, #20]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d018      	beq.n	8003c54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	441a      	add	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d303      	bcc.n	8003c44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68d9      	ldr	r1, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f002 f8b7 	bl	8005dc2 <memcpy>
	}
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c64:	f001 fc7e 	bl	8005564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c70:	e011      	b.n	8003c96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d012      	beq.n	8003ca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3324      	adds	r3, #36	; 0x24
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fd50 	bl	8004724 <xTaskRemoveFromEventList>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c8a:	f000 fe27 	bl	80048dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	dce9      	bgt.n	8003c72 <prvUnlockQueue+0x16>
 8003c9e:	e000      	b.n	8003ca2 <prvUnlockQueue+0x46>
					break;
 8003ca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	22ff      	movs	r2, #255	; 0xff
 8003ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003caa:	f001 fc8b 	bl	80055c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cae:	f001 fc59 	bl	8005564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cba:	e011      	b.n	8003ce0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3310      	adds	r3, #16
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fd2b 	bl	8004724 <xTaskRemoveFromEventList>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cd4:	f000 fe02 	bl	80048dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cd8:	7bbb      	ldrb	r3, [r7, #14]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dce9      	bgt.n	8003cbc <prvUnlockQueue+0x60>
 8003ce8:	e000      	b.n	8003cec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	22ff      	movs	r2, #255	; 0xff
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003cf4:	f001 fc66 	bl	80055c4 <vPortExitCritical>
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d08:	f001 fc2c 	bl	8005564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e001      	b.n	8003d1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f001 fc51 	bl	80055c4 <vPortExitCritical>

	return xReturn;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d34:	f001 fc16 	bl	8005564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d102      	bne.n	8003d4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e001      	b.n	8003d4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 fc39 	bl	80055c4 <vPortExitCritical>

	return xReturn;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	e014      	b.n	8003d96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d6c:	4a0f      	ldr	r2, [pc, #60]	; (8003dac <vQueueAddToRegistry+0x50>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d78:	490c      	ldr	r1, [pc, #48]	; (8003dac <vQueueAddToRegistry+0x50>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d82:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <vQueueAddToRegistry+0x50>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4413      	add	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d8e:	e006      	b.n	8003d9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b07      	cmp	r3, #7
 8003d9a:	d9e7      	bls.n	8003d6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	200008dc 	.word	0x200008dc

08003db0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dc0:	f001 fbd0 	bl	8005564 <vPortEnterCritical>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d103      	bne.n	8003dda <vQueueWaitForMessageRestricted+0x2a>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d103      	bne.n	8003df0 <vQueueWaitForMessageRestricted+0x40>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df0:	f001 fbe8 	bl	80055c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3324      	adds	r3, #36	; 0x24
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fc61 	bl	80046cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e0a:	6978      	ldr	r0, [r7, #20]
 8003e0c:	f7ff ff26 	bl	8003c5c <prvUnlockQueue>
	}
 8003e10:	bf00      	nop
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08e      	sub	sp, #56	; 0x38
 8003e1c:	af04      	add	r7, sp, #16
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	623b      	str	r3, [r7, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xTaskCreateStatic+0x46>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	61fb      	str	r3, [r7, #28]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e5e:	23bc      	movs	r3, #188	; 0xbc
 8003e60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2bbc      	cmp	r3, #188	; 0xbc
 8003e66:	d00a      	beq.n	8003e7e <xTaskCreateStatic+0x66>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	61bb      	str	r3, [r7, #24]
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01e      	beq.n	8003ec4 <xTaskCreateStatic+0xac>
 8003e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01b      	beq.n	8003ec4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	9302      	str	r3, [sp, #8]
 8003ea6:	f107 0314 	add.w	r3, r7, #20
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f850 	bl	8003f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ebe:	f000 f8f3 	bl	80040a8 <prvAddNewTaskToReadyList>
 8003ec2:	e001      	b.n	8003ec8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ec8:	697b      	ldr	r3, [r7, #20]
	}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b08c      	sub	sp, #48	; 0x30
 8003ed6:	af04      	add	r7, sp, #16
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 fc5e 	bl	80057a8 <pvPortMalloc>
 8003eec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ef4:	20bc      	movs	r0, #188	; 0xbc
 8003ef6:	f001 fc57 	bl	80057a8 <pvPortMalloc>
 8003efa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
 8003f08:	e005      	b.n	8003f16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f0a:	6978      	ldr	r0, [r7, #20]
 8003f0c:	f001 fd18 	bl	8005940 <vPortFree>
 8003f10:	e001      	b.n	8003f16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d017      	beq.n	8003f4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	2300      	movs	r3, #0
 8003f28:	9303      	str	r3, [sp, #12]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	9302      	str	r3, [sp, #8]
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f80e 	bl	8003f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f40:	69f8      	ldr	r0, [r7, #28]
 8003f42:	f000 f8b1 	bl	80040a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	e002      	b.n	8003f52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f52:	69bb      	ldr	r3, [r7, #24]
	}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	461a      	mov	r2, r3
 8003f74:	21a5      	movs	r1, #165	; 0xa5
 8003f76:	f001 ff32 	bl	8005dde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f84:	3b01      	subs	r3, #1
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f023 0307 	bic.w	r3, r3, #7
 8003f92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	617b      	str	r3, [r7, #20]
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01f      	beq.n	8003ffa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e012      	b.n	8003fe6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	7819      	ldrb	r1, [r3, #0]
 8003fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	3334      	adds	r3, #52	; 0x34
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b0f      	cmp	r3, #15
 8003fea:	d9e9      	bls.n	8003fc0 <prvInitialiseNewTask+0x64>
 8003fec:	e000      	b.n	8003ff0 <prvInitialiseNewTask+0x94>
			{
				break;
 8003fee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	e003      	b.n	8004002 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	2b37      	cmp	r3, #55	; 0x37
 8004006:	d901      	bls.n	800400c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004008:	2337      	movs	r3, #55	; 0x37
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004016:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	2200      	movs	r2, #0
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	3304      	adds	r3, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff f978 	bl	8003318 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	3318      	adds	r3, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff f973 	bl	8003318 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	2200      	movs	r2, #0
 800404c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	2200      	movs	r2, #0
 8004054:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	3354      	adds	r3, #84	; 0x54
 800405c:	2260      	movs	r2, #96	; 0x60
 800405e:	2100      	movs	r1, #0
 8004060:	4618      	mov	r0, r3
 8004062:	f001 febc 	bl	8005dde <memset>
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	4a0c      	ldr	r2, [pc, #48]	; (800409c <prvInitialiseNewTask+0x140>)
 800406a:	659a      	str	r2, [r3, #88]	; 0x58
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <prvInitialiseNewTask+0x144>)
 8004070:	65da      	str	r2, [r3, #92]	; 0x5c
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <prvInitialiseNewTask+0x148>)
 8004076:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	69b8      	ldr	r0, [r7, #24]
 800407e:	f001 f941 	bl	8005304 <pxPortInitialiseStack>
 8004082:	4602      	mov	r2, r0
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004092:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004094:	bf00      	nop
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	08006e74 	.word	0x08006e74
 80040a0:	08006e94 	.word	0x08006e94
 80040a4:	08006e54 	.word	0x08006e54

080040a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040b0:	f001 fa58 	bl	8005564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040b4:	4b2d      	ldr	r3, [pc, #180]	; (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	4a2c      	ldr	r2, [pc, #176]	; (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040be:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040cc:	4b27      	ldr	r3, [pc, #156]	; (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d110      	bne.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040d4:	f000 fc26 	bl	8004924 <prvInitialiseTaskLists>
 80040d8:	e00d      	b.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <prvAddNewTaskToReadyList+0xcc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040e2:	4b23      	ldr	r3, [pc, #140]	; (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d802      	bhi.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <prvAddNewTaskToReadyList+0xd0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <prvAddNewTaskToReadyList+0xd0>)
 80040fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <prvAddNewTaskToReadyList+0xd0>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <prvAddNewTaskToReadyList+0xd4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d903      	bls.n	800411c <prvAddNewTaskToReadyList+0x74>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	4a18      	ldr	r2, [pc, #96]	; (800417c <prvAddNewTaskToReadyList+0xd4>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <prvAddNewTaskToReadyList+0xd8>)
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f7ff f8fd 	bl	8003332 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004138:	f001 fa44 	bl	80055c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <prvAddNewTaskToReadyList+0xcc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvAddNewTaskToReadyList+0xc8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d207      	bcs.n	8004162 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <prvAddNewTaskToReadyList+0xdc>)
 8004154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000df0 	.word	0x20000df0
 8004170:	2000091c 	.word	0x2000091c
 8004174:	20000dfc 	.word	0x20000dfc
 8004178:	20000e0c 	.word	0x20000e0c
 800417c:	20000df8 	.word	0x20000df8
 8004180:	20000920 	.word	0x20000920
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <vTaskDelay+0x60>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <vTaskDelay+0x30>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	60bb      	str	r3, [r7, #8]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041b8:	f000 f88a 	bl	80042d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041bc:	2100      	movs	r1, #0
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fcfe 	bl	8004bc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041c4:	f000 f892 	bl	80042ec <xTaskResumeAll>
 80041c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <vTaskDelay+0x64>)
 80041d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000e18 	.word	0x20000e18
 80041ec:	e000ed04 	.word	0xe000ed04

080041f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041fe:	463a      	mov	r2, r7
 8004200:	1d39      	adds	r1, r7, #4
 8004202:	f107 0308 	add.w	r3, r7, #8
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f832 	bl	8003270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	9202      	str	r2, [sp, #8]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	2300      	movs	r3, #0
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	460a      	mov	r2, r1
 800421e:	4924      	ldr	r1, [pc, #144]	; (80042b0 <vTaskStartScheduler+0xc0>)
 8004220:	4824      	ldr	r0, [pc, #144]	; (80042b4 <vTaskStartScheduler+0xc4>)
 8004222:	f7ff fdf9 	bl	8003e18 <xTaskCreateStatic>
 8004226:	4603      	mov	r3, r0
 8004228:	4a23      	ldr	r2, [pc, #140]	; (80042b8 <vTaskStartScheduler+0xc8>)
 800422a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <vTaskStartScheduler+0xc8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e001      	b.n	800423e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d102      	bne.n	800424a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004244:	f000 fd10 	bl	8004c68 <xTimerCreateTimerTask>
 8004248:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d11b      	bne.n	8004288 <vTaskStartScheduler+0x98>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	613b      	str	r3, [r7, #16]
}
 8004262:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <vTaskStartScheduler+0xcc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3354      	adds	r3, #84	; 0x54
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <vTaskStartScheduler+0xd0>)
 800426c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <vTaskStartScheduler+0xd4>)
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <vTaskStartScheduler+0xd8>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <vTaskStartScheduler+0xdc>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004282:	f001 f8cd 	bl	8005420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004286:	e00e      	b.n	80042a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	d10a      	bne.n	80042a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	60fb      	str	r3, [r7, #12]
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <vTaskStartScheduler+0xb4>
}
 80042a6:	bf00      	nop
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	08006de4 	.word	0x08006de4
 80042b4:	080048f5 	.word	0x080048f5
 80042b8:	20000e14 	.word	0x20000e14
 80042bc:	2000091c 	.word	0x2000091c
 80042c0:	20000010 	.word	0x20000010
 80042c4:	20000e10 	.word	0x20000e10
 80042c8:	20000dfc 	.word	0x20000dfc
 80042cc:	20000df4 	.word	0x20000df4

080042d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <vTaskSuspendAll+0x18>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	4a03      	ldr	r2, [pc, #12]	; (80042e8 <vTaskSuspendAll+0x18>)
 80042dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042de:	bf00      	nop
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	20000e18 	.word	0x20000e18

080042ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042fa:	4b42      	ldr	r3, [pc, #264]	; (8004404 <xTaskResumeAll+0x118>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <xTaskResumeAll+0x2c>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	603b      	str	r3, [r7, #0]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004318:	f001 f924 	bl	8005564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800431c:	4b39      	ldr	r3, [pc, #228]	; (8004404 <xTaskResumeAll+0x118>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3b01      	subs	r3, #1
 8004322:	4a38      	ldr	r2, [pc, #224]	; (8004404 <xTaskResumeAll+0x118>)
 8004324:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004326:	4b37      	ldr	r3, [pc, #220]	; (8004404 <xTaskResumeAll+0x118>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d162      	bne.n	80043f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <xTaskResumeAll+0x11c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d05e      	beq.n	80043f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004336:	e02f      	b.n	8004398 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004338:	4b34      	ldr	r3, [pc, #208]	; (800440c <xTaskResumeAll+0x120>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3318      	adds	r3, #24
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff f851 	bl	80033ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff f84c 	bl	80033ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4b2d      	ldr	r3, [pc, #180]	; (8004410 <xTaskResumeAll+0x124>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d903      	bls.n	8004368 <xTaskResumeAll+0x7c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <xTaskResumeAll+0x124>)
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <xTaskResumeAll+0x128>)
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f7fe ffd7 	bl	8003332 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <xTaskResumeAll+0x12c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <xTaskResumeAll+0x130>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004398:	4b1c      	ldr	r3, [pc, #112]	; (800440c <xTaskResumeAll+0x120>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1cb      	bne.n	8004338 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043a6:	f000 fb5f 	bl	8004a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <xTaskResumeAll+0x134>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d010      	beq.n	80043d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043b6:	f000 f847 	bl	8004448 <xTaskIncrementTick>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <xTaskResumeAll+0x130>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f1      	bne.n	80043b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80043d2:	4b13      	ldr	r3, [pc, #76]	; (8004420 <xTaskResumeAll+0x134>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <xTaskResumeAll+0x130>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <xTaskResumeAll+0x138>)
 80043e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043f4:	f001 f8e6 	bl	80055c4 <vPortExitCritical>

	return xAlreadyYielded;
 80043f8:	68bb      	ldr	r3, [r7, #8]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000e18 	.word	0x20000e18
 8004408:	20000df0 	.word	0x20000df0
 800440c:	20000db0 	.word	0x20000db0
 8004410:	20000df8 	.word	0x20000df8
 8004414:	20000920 	.word	0x20000920
 8004418:	2000091c 	.word	0x2000091c
 800441c:	20000e04 	.word	0x20000e04
 8004420:	20000e00 	.word	0x20000e00
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <xTaskGetTickCount+0x1c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004434:	687b      	ldr	r3, [r7, #4]
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000df4 	.word	0x20000df4

08004448 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004452:	4b4f      	ldr	r3, [pc, #316]	; (8004590 <xTaskIncrementTick+0x148>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 808f 	bne.w	800457a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800445c:	4b4d      	ldr	r3, [pc, #308]	; (8004594 <xTaskIncrementTick+0x14c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004464:	4a4b      	ldr	r2, [pc, #300]	; (8004594 <xTaskIncrementTick+0x14c>)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d120      	bne.n	80044b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004470:	4b49      	ldr	r3, [pc, #292]	; (8004598 <xTaskIncrementTick+0x150>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <xTaskIncrementTick+0x48>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	603b      	str	r3, [r7, #0]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <xTaskIncrementTick+0x46>
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <xTaskIncrementTick+0x150>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <xTaskIncrementTick+0x154>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <xTaskIncrementTick+0x150>)
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4a3f      	ldr	r2, [pc, #252]	; (800459c <xTaskIncrementTick+0x154>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <xTaskIncrementTick+0x158>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	4a3d      	ldr	r2, [pc, #244]	; (80045a0 <xTaskIncrementTick+0x158>)
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	f000 fadb 	bl	8004a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044b2:	4b3c      	ldr	r3, [pc, #240]	; (80045a4 <xTaskIncrementTick+0x15c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d349      	bcc.n	8004550 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044bc:	4b36      	ldr	r3, [pc, #216]	; (8004598 <xTaskIncrementTick+0x150>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c6:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <xTaskIncrementTick+0x15c>)
 80044c8:	f04f 32ff 	mov.w	r2, #4294967295
 80044cc:	601a      	str	r2, [r3, #0]
					break;
 80044ce:	e03f      	b.n	8004550 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d0:	4b31      	ldr	r3, [pc, #196]	; (8004598 <xTaskIncrementTick+0x150>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d203      	bcs.n	80044f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044e8:	4a2e      	ldr	r2, [pc, #184]	; (80045a4 <xTaskIncrementTick+0x15c>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044ee:	e02f      	b.n	8004550 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe ff79 	bl	80033ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3318      	adds	r3, #24
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe ff70 	bl	80033ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <xTaskIncrementTick+0x160>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d903      	bls.n	8004520 <xTaskIncrementTick+0xd8>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <xTaskIncrementTick+0x160>)
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <xTaskIncrementTick+0x164>)
 800452e:	441a      	add	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe fefb 	bl	8003332 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <xTaskIncrementTick+0x168>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	429a      	cmp	r2, r3
 8004548:	d3b8      	bcc.n	80044bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800454a:	2301      	movs	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454e:	e7b5      	b.n	80044bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004550:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <xTaskIncrementTick+0x168>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	4915      	ldr	r1, [pc, #84]	; (80045ac <xTaskIncrementTick+0x164>)
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d901      	bls.n	800456c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004568:	2301      	movs	r3, #1
 800456a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <xTaskIncrementTick+0x16c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e004      	b.n	8004584 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <xTaskIncrementTick+0x170>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <xTaskIncrementTick+0x170>)
 8004582:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004584:	697b      	ldr	r3, [r7, #20]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000e18 	.word	0x20000e18
 8004594:	20000df4 	.word	0x20000df4
 8004598:	20000da8 	.word	0x20000da8
 800459c:	20000dac 	.word	0x20000dac
 80045a0:	20000e08 	.word	0x20000e08
 80045a4:	20000e10 	.word	0x20000e10
 80045a8:	20000df8 	.word	0x20000df8
 80045ac:	20000920 	.word	0x20000920
 80045b0:	2000091c 	.word	0x2000091c
 80045b4:	20000e04 	.word	0x20000e04
 80045b8:	20000e00 	.word	0x20000e00

080045bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045c2:	4b2a      	ldr	r3, [pc, #168]	; (800466c <vTaskSwitchContext+0xb0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ca:	4b29      	ldr	r3, [pc, #164]	; (8004670 <vTaskSwitchContext+0xb4>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045d0:	e046      	b.n	8004660 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80045d2:	4b27      	ldr	r3, [pc, #156]	; (8004670 <vTaskSwitchContext+0xb4>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d8:	4b26      	ldr	r3, [pc, #152]	; (8004674 <vTaskSwitchContext+0xb8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e010      	b.n	8004602 <vTaskSwitchContext+0x46>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <vTaskSwitchContext+0x40>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	607b      	str	r3, [r7, #4]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <vTaskSwitchContext+0x3e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3b01      	subs	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	491d      	ldr	r1, [pc, #116]	; (8004678 <vTaskSwitchContext+0xbc>)
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0e4      	beq.n	80045e0 <vTaskSwitchContext+0x24>
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a15      	ldr	r2, [pc, #84]	; (8004678 <vTaskSwitchContext+0xbc>)
 8004622:	4413      	add	r3, r2
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	605a      	str	r2, [r3, #4]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	3308      	adds	r3, #8
 8004638:	429a      	cmp	r2, r3
 800463a:	d104      	bne.n	8004646 <vTaskSwitchContext+0x8a>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a0b      	ldr	r2, [pc, #44]	; (800467c <vTaskSwitchContext+0xc0>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <vTaskSwitchContext+0xb8>)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <vTaskSwitchContext+0xc0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3354      	adds	r3, #84	; 0x54
 800465c:	4a08      	ldr	r2, [pc, #32]	; (8004680 <vTaskSwitchContext+0xc4>)
 800465e:	6013      	str	r3, [r2, #0]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	20000e18 	.word	0x20000e18
 8004670:	20000e04 	.word	0x20000e04
 8004674:	20000df8 	.word	0x20000df8
 8004678:	20000920 	.word	0x20000920
 800467c:	2000091c 	.word	0x2000091c
 8004680:	20000010 	.word	0x20000010

08004684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	60fb      	str	r3, [r7, #12]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <vTaskPlaceOnEventList+0x44>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3318      	adds	r3, #24
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe fe61 	bl	800337a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046b8:	2101      	movs	r1, #1
 80046ba:	6838      	ldr	r0, [r7, #0]
 80046bc:	f000 fa80 	bl	8004bc0 <prvAddCurrentTaskToDelayedList>
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	2000091c 	.word	0x2000091c

080046cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	617b      	str	r3, [r7, #20]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046f4:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <vTaskPlaceOnEventListRestricted+0x54>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3318      	adds	r3, #24
 80046fa:	4619      	mov	r1, r3
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7fe fe18 	bl	8003332 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f000 fa55 	bl	8004bc0 <prvAddCurrentTaskToDelayedList>
	}
 8004716:	bf00      	nop
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	2000091c 	.word	0x2000091c

08004724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	60fb      	str	r3, [r7, #12]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	3318      	adds	r3, #24
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fe49 	bl	80033ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <xTaskRemoveFromEventList+0xb0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11d      	bne.n	800479e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fe40 	bl	80033ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <xTaskRemoveFromEventList+0xb4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d903      	bls.n	8004780 <xTaskRemoveFromEventList+0x5c>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <xTaskRemoveFromEventList+0xb4>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <xTaskRemoveFromEventList+0xb8>)
 800478e:	441a      	add	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f7fe fdcb 	bl	8003332 <vListInsertEnd>
 800479c:	e005      	b.n	80047aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3318      	adds	r3, #24
 80047a2:	4619      	mov	r1, r3
 80047a4:	480e      	ldr	r0, [pc, #56]	; (80047e0 <xTaskRemoveFromEventList+0xbc>)
 80047a6:	f7fe fdc4 	bl	8003332 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <xTaskRemoveFromEventList+0xc0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d905      	bls.n	80047c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <xTaskRemoveFromEventList+0xc4>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e001      	b.n	80047c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047c8:	697b      	ldr	r3, [r7, #20]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000e18 	.word	0x20000e18
 80047d8:	20000df8 	.word	0x20000df8
 80047dc:	20000920 	.word	0x20000920
 80047e0:	20000db0 	.word	0x20000db0
 80047e4:	2000091c 	.word	0x2000091c
 80047e8:	20000e04 	.word	0x20000e04

080047ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <vTaskInternalSetTimeOutState+0x24>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <vTaskInternalSetTimeOutState+0x28>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20000e08 	.word	0x20000e08
 8004814:	20000df4 	.word	0x20000df4

08004818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	613b      	str	r3, [r7, #16]
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	60fb      	str	r3, [r7, #12]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800485a:	f000 fe83 	bl	8005564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <xTaskCheckForTimeOut+0xbc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d102      	bne.n	800487e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e023      	b.n	80048c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <xTaskCheckForTimeOut+0xc0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d007      	beq.n	800489a <xTaskCheckForTimeOut+0x82>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	429a      	cmp	r2, r3
 8004892:	d302      	bcc.n	800489a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	e015      	b.n	80048c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d20b      	bcs.n	80048bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ff9b 	bl	80047ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e004      	b.n	80048c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048c6:	f000 fe7d 	bl	80055c4 <vPortExitCritical>

	return xReturn;
 80048ca:	69fb      	ldr	r3, [r7, #28]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000df4 	.word	0x20000df4
 80048d8:	20000e08 	.word	0x20000e08

080048dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <vTaskMissedYield+0x14>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000e04 	.word	0x20000e04

080048f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048fc:	f000 f852 	bl	80049a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <prvIdleTask+0x28>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d9f9      	bls.n	80048fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <prvIdleTask+0x2c>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004918:	e7f0      	b.n	80048fc <prvIdleTask+0x8>
 800491a:	bf00      	nop
 800491c:	20000920 	.word	0x20000920
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800492a:	2300      	movs	r3, #0
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	e00c      	b.n	800494a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <prvInitialiseTaskLists+0x60>)
 800493c:	4413      	add	r3, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fcca 	bl	80032d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3301      	adds	r3, #1
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b37      	cmp	r3, #55	; 0x37
 800494e:	d9ef      	bls.n	8004930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004950:	480d      	ldr	r0, [pc, #52]	; (8004988 <prvInitialiseTaskLists+0x64>)
 8004952:	f7fe fcc1 	bl	80032d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004956:	480d      	ldr	r0, [pc, #52]	; (800498c <prvInitialiseTaskLists+0x68>)
 8004958:	f7fe fcbe 	bl	80032d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800495c:	480c      	ldr	r0, [pc, #48]	; (8004990 <prvInitialiseTaskLists+0x6c>)
 800495e:	f7fe fcbb 	bl	80032d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004962:	480c      	ldr	r0, [pc, #48]	; (8004994 <prvInitialiseTaskLists+0x70>)
 8004964:	f7fe fcb8 	bl	80032d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004968:	480b      	ldr	r0, [pc, #44]	; (8004998 <prvInitialiseTaskLists+0x74>)
 800496a:	f7fe fcb5 	bl	80032d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800496e:	4b0b      	ldr	r3, [pc, #44]	; (800499c <prvInitialiseTaskLists+0x78>)
 8004970:	4a05      	ldr	r2, [pc, #20]	; (8004988 <prvInitialiseTaskLists+0x64>)
 8004972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <prvInitialiseTaskLists+0x7c>)
 8004976:	4a05      	ldr	r2, [pc, #20]	; (800498c <prvInitialiseTaskLists+0x68>)
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000920 	.word	0x20000920
 8004988:	20000d80 	.word	0x20000d80
 800498c:	20000d94 	.word	0x20000d94
 8004990:	20000db0 	.word	0x20000db0
 8004994:	20000dc4 	.word	0x20000dc4
 8004998:	20000ddc 	.word	0x20000ddc
 800499c:	20000da8 	.word	0x20000da8
 80049a0:	20000dac 	.word	0x20000dac

080049a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049aa:	e019      	b.n	80049e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049ac:	f000 fdda 	bl	8005564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <prvCheckTasksWaitingTermination+0x50>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fd15 	bl	80033ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <prvCheckTasksWaitingTermination+0x54>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <prvCheckTasksWaitingTermination+0x54>)
 80049ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <prvCheckTasksWaitingTermination+0x58>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <prvCheckTasksWaitingTermination+0x58>)
 80049d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049d6:	f000 fdf5 	bl	80055c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f810 	bl	8004a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <prvCheckTasksWaitingTermination+0x58>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e1      	bne.n	80049ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000dc4 	.word	0x20000dc4
 80049f8:	20000df0 	.word	0x20000df0
 80049fc:	20000dd8 	.word	0x20000dd8

08004a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3354      	adds	r3, #84	; 0x54
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 fb1f 	bl	8006050 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d108      	bne.n	8004a2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 ff8d 	bl	8005940 <vPortFree>
				vPortFree( pxTCB );
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 ff8a 	bl	8005940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a2c:	e018      	b.n	8004a60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d103      	bne.n	8004a40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 ff81 	bl	8005940 <vPortFree>
	}
 8004a3e:	e00f      	b.n	8004a60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d00a      	beq.n	8004a60 <prvDeleteTCB+0x60>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60fb      	str	r3, [r7, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	e7fe      	b.n	8004a5e <prvDeleteTCB+0x5e>
	}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <prvResetNextTaskUnblockTime+0x38>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a80:	e008      	b.n	8004a94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a82:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <prvResetNextTaskUnblockTime+0x38>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000da8 	.word	0x20000da8
 8004aa4:	20000e10 	.word	0x20000e10

08004aa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <xTaskGetSchedulerState+0x34>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	e008      	b.n	8004ace <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <xTaskGetSchedulerState+0x38>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	e001      	b.n	8004ace <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ace:	687b      	ldr	r3, [r7, #4]
	}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	20000dfc 	.word	0x20000dfc
 8004ae0:	20000e18 	.word	0x20000e18

08004ae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d056      	beq.n	8004ba8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004afa:	4b2e      	ldr	r3, [pc, #184]	; (8004bb4 <xTaskPriorityDisinherit+0xd0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d00a      	beq.n	8004b1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	60fb      	str	r3, [r7, #12]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60bb      	str	r3, [r7, #8]
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	1e5a      	subs	r2, r3, #1
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d02c      	beq.n	8004ba8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d128      	bne.n	8004ba8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fc46 	bl	80033ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <xTaskPriorityDisinherit+0xd4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d903      	bls.n	8004b88 <xTaskPriorityDisinherit+0xa4>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <xTaskPriorityDisinherit+0xd4>)
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <xTaskPriorityDisinherit+0xd8>)
 8004b96:	441a      	add	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f7fe fbc7 	bl	8003332 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ba8:	697b      	ldr	r3, [r7, #20]
	}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	2000091c 	.word	0x2000091c
 8004bb8:	20000df8 	.word	0x20000df8
 8004bbc:	20000920 	.word	0x20000920

08004bc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <prvAddCurrentTaskToDelayedList+0x90>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fc08 	bl	80033ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d10a      	bne.n	8004bfa <prvAddCurrentTaskToDelayedList+0x3a>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bea:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4819      	ldr	r0, [pc, #100]	; (8004c58 <prvAddCurrentTaskToDelayedList+0x98>)
 8004bf4:	f7fe fb9d 	bl	8003332 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bf8:	e026      	b.n	8004c48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d209      	bcs.n	8004c26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fe fbab 	bl	800337a <vListInsert>
}
 8004c24:	e010      	b.n	8004c48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c26:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7fe fba1 	bl	800337a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d202      	bcs.n	8004c48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c42:	4a08      	ldr	r2, [pc, #32]	; (8004c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000df4 	.word	0x20000df4
 8004c54:	2000091c 	.word	0x2000091c
 8004c58:	20000ddc 	.word	0x20000ddc
 8004c5c:	20000dac 	.word	0x20000dac
 8004c60:	20000da8 	.word	0x20000da8
 8004c64:	20000e10 	.word	0x20000e10

08004c68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c72:	f000 fb07 	bl	8005284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c76:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <xTimerCreateTimerTask+0x80>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d021      	beq.n	8004cc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c86:	1d3a      	adds	r2, r7, #4
 8004c88:	f107 0108 	add.w	r1, r7, #8
 8004c8c:	f107 030c 	add.w	r3, r7, #12
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fb07 	bl	80032a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	9202      	str	r2, [sp, #8]
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	460a      	mov	r2, r1
 8004ca8:	4910      	ldr	r1, [pc, #64]	; (8004cec <xTimerCreateTimerTask+0x84>)
 8004caa:	4811      	ldr	r0, [pc, #68]	; (8004cf0 <xTimerCreateTimerTask+0x88>)
 8004cac:	f7ff f8b4 	bl	8003e18 <xTaskCreateStatic>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <xTimerCreateTimerTask+0x8c>)
 8004cb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <xTimerCreateTimerTask+0x8c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	613b      	str	r3, [r7, #16]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000e4c 	.word	0x20000e4c
 8004cec:	08006dec 	.word	0x08006dec
 8004cf0:	08004e2d 	.word	0x08004e2d
 8004cf4:	20000e50 	.word	0x20000e50

08004cf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	623b      	str	r3, [r7, #32]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d26:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <xTimerGenericCommand+0x98>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d02a      	beq.n	8004d84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b05      	cmp	r3, #5
 8004d3e:	dc18      	bgt.n	8004d72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d40:	f7ff feb2 	bl	8004aa8 <xTaskGetSchedulerState>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d109      	bne.n	8004d5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <xTimerGenericCommand+0x98>)
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	f107 0110 	add.w	r1, r7, #16
 8004d52:	2300      	movs	r3, #0
 8004d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d56:	f7fe fc77 	bl	8003648 <xQueueGenericSend>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004d5c:	e012      	b.n	8004d84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <xTimerGenericCommand+0x98>)
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f107 0110 	add.w	r1, r7, #16
 8004d66:	2300      	movs	r3, #0
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f7fe fc6d 	bl	8003648 <xQueueGenericSend>
 8004d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004d70:	e008      	b.n	8004d84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <xTimerGenericCommand+0x98>)
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f107 0110 	add.w	r1, r7, #16
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	f7fe fd61 	bl	8003844 <xQueueGenericSendFromISR>
 8004d82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3728      	adds	r7, #40	; 0x28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000e4c 	.word	0x20000e4c

08004d94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9e:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <prvProcessExpiredTimer+0x94>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fb1d 	bl	80033ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d022      	beq.n	8004e06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	18d1      	adds	r1, r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f000 f8d1 	bl	8004f74 <prvInsertTimerInActiveList>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01f      	beq.n	8004e18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	2100      	movs	r1, #0
 8004de2:	6978      	ldr	r0, [r7, #20]
 8004de4:	f7ff ff88 	bl	8004cf8 <xTimerGenericCommand>
 8004de8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d113      	bne.n	8004e18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	6978      	ldr	r0, [r7, #20]
 8004e1e:	4798      	blx	r3
}
 8004e20:	bf00      	nop
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000e44 	.word	0x20000e44

08004e2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e34:	f107 0308 	add.w	r3, r7, #8
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f857 	bl	8004eec <prvGetNextExpireTime>
 8004e3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4619      	mov	r1, r3
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f803 	bl	8004e50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e4a:	f000 f8d5 	bl	8004ff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e4e:	e7f1      	b.n	8004e34 <prvTimerTask+0x8>

08004e50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e5a:	f7ff fa39 	bl	80042d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f866 	bl	8004f34 <prvSampleTimeNow>
 8004e68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d130      	bne.n	8004ed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <prvProcessTimerOrBlockTask+0x3c>
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d806      	bhi.n	8004e8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e7e:	f7ff fa35 	bl	80042ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff85 	bl	8004d94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e8a:	e024      	b.n	8004ed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <prvProcessTimerOrBlockTask+0x90>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <prvProcessTimerOrBlockTask+0x50>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <prvProcessTimerOrBlockTask+0x52>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <prvProcessTimerOrBlockTask+0x94>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f7fe ff7d 	bl	8003db0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004eb6:	f7ff fa19 	bl	80042ec <xTaskResumeAll>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <prvProcessTimerOrBlockTask+0x98>)
 8004ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
}
 8004ed0:	e001      	b.n	8004ed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ed2:	f7ff fa0b 	bl	80042ec <xTaskResumeAll>
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000e48 	.word	0x20000e48
 8004ee4:	20000e4c 	.word	0x20000e4c
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <prvGetNextExpireTime+0x44>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <prvGetNextExpireTime+0x16>
 8004efe:	2201      	movs	r2, #1
 8004f00:	e000      	b.n	8004f04 <prvGetNextExpireTime+0x18>
 8004f02:	2200      	movs	r2, #0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <prvGetNextExpireTime+0x44>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e001      	b.n	8004f20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f20:	68fb      	ldr	r3, [r7, #12]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000e44 	.word	0x20000e44

08004f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f3c:	f7ff fa74 	bl	8004428 <xTaskGetTickCount>
 8004f40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <prvSampleTimeNow+0x3c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d205      	bcs.n	8004f58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f4c:	f000 f936 	bl	80051bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e002      	b.n	8004f5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f5e:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <prvSampleTimeNow+0x3c>)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000e54 	.word	0x20000e54

08004f74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d812      	bhi.n	8004fc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad2      	subs	r2, r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e01b      	b.n	8004fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <prvInsertTimerInActiveList+0x7c>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7fe f9de 	bl	800337a <vListInsert>
 8004fbe:	e012      	b.n	8004fe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d206      	bcs.n	8004fd6 <prvInsertTimerInActiveList+0x62>
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e007      	b.n	8004fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fd6:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <prvInsertTimerInActiveList+0x80>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7fe f9ca 	bl	800337a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fe6:	697b      	ldr	r3, [r7, #20]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000e48 	.word	0x20000e48
 8004ff4:	20000e44 	.word	0x20000e44

08004ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08e      	sub	sp, #56	; 0x38
 8004ffc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ffe:	e0ca      	b.n	8005196 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da18      	bge.n	8005038 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	3304      	adds	r3, #4
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	61fb      	str	r3, [r7, #28]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800502e:	6850      	ldr	r0, [r2, #4]
 8005030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005032:	6892      	ldr	r2, [r2, #8]
 8005034:	4611      	mov	r1, r2
 8005036:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f2c0 80aa 	blt.w	8005194 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe f9cb 	bl	80033ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005056:	463b      	mov	r3, r7
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ff6b 	bl	8004f34 <prvSampleTimeNow>
 800505e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b09      	cmp	r3, #9
 8005064:	f200 8097 	bhi.w	8005196 <prvProcessReceivedCommands+0x19e>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <prvProcessReceivedCommands+0x78>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005099 	.word	0x08005099
 8005074:	08005099 	.word	0x08005099
 8005078:	08005099 	.word	0x08005099
 800507c:	0800510d 	.word	0x0800510d
 8005080:	08005121 	.word	0x08005121
 8005084:	0800516b 	.word	0x0800516b
 8005088:	08005099 	.word	0x08005099
 800508c:	08005099 	.word	0x08005099
 8005090:	0800510d 	.word	0x0800510d
 8005094:	08005121 	.word	0x08005121
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	18d1      	adds	r1, r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b8:	f7ff ff5c 	bl	8004f74 <prvInsertTimerInActiveList>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d069      	beq.n	8005196 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d05e      	beq.n	8005196 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	441a      	add	r2, r3
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	2100      	movs	r1, #0
 80050e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ea:	f7ff fe05 	bl	8004cf8 <xTimerGenericCommand>
 80050ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d14f      	bne.n	8005196 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	61bb      	str	r3, [r7, #24]
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800511e:	e03a      	b.n	8005196 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	617b      	str	r3, [r7, #20]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	18d1      	adds	r1, r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005164:	f7ff ff06 	bl	8004f74 <prvInsertTimerInActiveList>
					break;
 8005168:	e015      	b.n	8005196 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d103      	bne.n	8005180 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517a:	f000 fbe1 	bl	8005940 <vPortFree>
 800517e:	e00a      	b.n	8005196 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005186:	f023 0301 	bic.w	r3, r3, #1
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005192:	e000      	b.n	8005196 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <prvProcessReceivedCommands+0x1c0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1d39      	adds	r1, r7, #4
 800519c:	2200      	movs	r2, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe fbec 	bl	800397c <xQueueReceive>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f47f af2a 	bne.w	8005000 <prvProcessReceivedCommands+0x8>
	}
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	3730      	adds	r7, #48	; 0x30
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000e4c 	.word	0x20000e4c

080051bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051c2:	e048      	b.n	8005256 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051c4:	4b2d      	ldr	r3, [pc, #180]	; (800527c <prvSwitchTimerLists+0xc0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ce:	4b2b      	ldr	r3, [pc, #172]	; (800527c <prvSwitchTimerLists+0xc0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3304      	adds	r3, #4
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe f905 	bl	80033ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02e      	beq.n	8005256 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	429a      	cmp	r2, r3
 8005208:	d90e      	bls.n	8005228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005216:	4b19      	ldr	r3, [pc, #100]	; (800527c <prvSwitchTimerLists+0xc0>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7fe f8aa 	bl	800337a <vListInsert>
 8005226:	e016      	b.n	8005256 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005228:	2300      	movs	r3, #0
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2300      	movs	r3, #0
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	2100      	movs	r1, #0
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fd60 	bl	8004cf8 <xTimerGenericCommand>
 8005238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	603b      	str	r3, [r7, #0]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <prvSwitchTimerLists+0xc0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1b1      	bne.n	80051c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <prvSwitchTimerLists+0xc0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <prvSwitchTimerLists+0xc4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a04      	ldr	r2, [pc, #16]	; (800527c <prvSwitchTimerLists+0xc0>)
 800526c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800526e:	4a04      	ldr	r2, [pc, #16]	; (8005280 <prvSwitchTimerLists+0xc4>)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	6013      	str	r3, [r2, #0]
}
 8005274:	bf00      	nop
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000e44 	.word	0x20000e44
 8005280:	20000e48 	.word	0x20000e48

08005284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800528a:	f000 f96b 	bl	8005564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800528e:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <prvCheckForValidListAndQueue+0x60>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d120      	bne.n	80052d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005296:	4814      	ldr	r0, [pc, #80]	; (80052e8 <prvCheckForValidListAndQueue+0x64>)
 8005298:	f7fe f81e 	bl	80032d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800529c:	4813      	ldr	r0, [pc, #76]	; (80052ec <prvCheckForValidListAndQueue+0x68>)
 800529e:	f7fe f81b 	bl	80032d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <prvCheckForValidListAndQueue+0x6c>)
 80052a4:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <prvCheckForValidListAndQueue+0x64>)
 80052a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <prvCheckForValidListAndQueue+0x70>)
 80052aa:	4a10      	ldr	r2, [pc, #64]	; (80052ec <prvCheckForValidListAndQueue+0x68>)
 80052ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052ae:	2300      	movs	r3, #0
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <prvCheckForValidListAndQueue+0x74>)
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <prvCheckForValidListAndQueue+0x78>)
 80052b6:	2110      	movs	r1, #16
 80052b8:	200a      	movs	r0, #10
 80052ba:	f7fe f929 	bl	8003510 <xQueueGenericCreateStatic>
 80052be:	4603      	mov	r3, r0
 80052c0:	4a08      	ldr	r2, [pc, #32]	; (80052e4 <prvCheckForValidListAndQueue+0x60>)
 80052c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <prvCheckForValidListAndQueue+0x60>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <prvCheckForValidListAndQueue+0x60>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	490b      	ldr	r1, [pc, #44]	; (8005300 <prvCheckForValidListAndQueue+0x7c>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe fd42 	bl	8003d5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052d8:	f000 f974 	bl	80055c4 <vPortExitCritical>
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000e4c 	.word	0x20000e4c
 80052e8:	20000e1c 	.word	0x20000e1c
 80052ec:	20000e30 	.word	0x20000e30
 80052f0:	20000e44 	.word	0x20000e44
 80052f4:	20000e48 	.word	0x20000e48
 80052f8:	20000ef8 	.word	0x20000ef8
 80052fc:	20000e58 	.word	0x20000e58
 8005300:	08006df4 	.word	0x08006df4

08005304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3b04      	subs	r3, #4
 8005314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800531c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b04      	subs	r3, #4
 8005322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f023 0201 	bic.w	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b04      	subs	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005334:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <pxPortInitialiseStack+0x64>)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b14      	subs	r3, #20
 800533e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3b04      	subs	r3, #4
 800534a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f06f 0202 	mvn.w	r2, #2
 8005352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3b20      	subs	r3, #32
 8005358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800535a:	68fb      	ldr	r3, [r7, #12]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	0800536d 	.word	0x0800536d

0800536c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005376:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <prvTaskExitError+0x54>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d00a      	beq.n	8005396 <prvTaskExitError+0x2a>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60fb      	str	r3, [r7, #12]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <prvTaskExitError+0x28>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60bb      	str	r3, [r7, #8]
}
 80053a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053aa:	bf00      	nop
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0fc      	beq.n	80053ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	2000000c 	.word	0x2000000c
	...

080053d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <pxCurrentTCBConst2>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f380 8809 	msr	PSP, r0
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	4770      	bx	lr
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst2>:
 80053f0:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053f8:	4808      	ldr	r0, [pc, #32]	; (800541c <prvPortStartFirstTask+0x24>)
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f380 8808 	msr	MSP, r0
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8814 	msr	CONTROL, r0
 800540a:	b662      	cpsie	i
 800540c:	b661      	cpsie	f
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	df00      	svc	0
 8005418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800541a:	bf00      	nop
 800541c:	e000ed08 	.word	0xe000ed08

08005420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <xPortStartScheduler+0x120>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a46      	ldr	r2, [pc, #280]	; (8005544 <xPortStartScheduler+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d10a      	bne.n	8005446 <xPortStartScheduler+0x26>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	613b      	str	r3, [r7, #16]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005446:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <xPortStartScheduler+0x120>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a3f      	ldr	r2, [pc, #252]	; (8005548 <xPortStartScheduler+0x128>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10a      	bne.n	8005466 <xPortStartScheduler+0x46>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005466:	4b39      	ldr	r3, [pc, #228]	; (800554c <xPortStartScheduler+0x12c>)
 8005468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	22ff      	movs	r2, #255	; 0xff
 8005476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <xPortStartScheduler+0x130>)
 800548c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800548e:	4b31      	ldr	r3, [pc, #196]	; (8005554 <xPortStartScheduler+0x134>)
 8005490:	2207      	movs	r2, #7
 8005492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005494:	e009      	b.n	80054aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005496:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <xPortStartScheduler+0x134>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3b01      	subs	r3, #1
 800549c:	4a2d      	ldr	r2, [pc, #180]	; (8005554 <xPortStartScheduler+0x134>)
 800549e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d0ef      	beq.n	8005496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054b6:	4b27      	ldr	r3, [pc, #156]	; (8005554 <xPortStartScheduler+0x134>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d00a      	beq.n	80054d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	60bb      	str	r3, [r7, #8]
}
 80054d4:	bf00      	nop
 80054d6:	e7fe      	b.n	80054d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054d8:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <xPortStartScheduler+0x134>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <xPortStartScheduler+0x134>)
 80054e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <xPortStartScheduler+0x134>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ea:	4a1a      	ldr	r2, [pc, #104]	; (8005554 <xPortStartScheduler+0x134>)
 80054ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <xPortStartScheduler+0x138>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <xPortStartScheduler+0x138>)
 80054fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <xPortStartScheduler+0x138>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a14      	ldr	r2, [pc, #80]	; (8005558 <xPortStartScheduler+0x138>)
 8005508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800550c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800550e:	f000 f8dd 	bl	80056cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <xPortStartScheduler+0x13c>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005518:	f000 f8fc 	bl	8005714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800551c:	4b10      	ldr	r3, [pc, #64]	; (8005560 <xPortStartScheduler+0x140>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0f      	ldr	r2, [pc, #60]	; (8005560 <xPortStartScheduler+0x140>)
 8005522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005528:	f7ff ff66 	bl	80053f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800552c:	f7ff f846 	bl	80045bc <vTaskSwitchContext>
	prvTaskExitError();
 8005530:	f7ff ff1c 	bl	800536c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	e000ed00 	.word	0xe000ed00
 8005544:	410fc271 	.word	0x410fc271
 8005548:	410fc270 	.word	0x410fc270
 800554c:	e000e400 	.word	0xe000e400
 8005550:	20000f48 	.word	0x20000f48
 8005554:	20000f4c 	.word	0x20000f4c
 8005558:	e000ed20 	.word	0xe000ed20
 800555c:	2000000c 	.word	0x2000000c
 8005560:	e000ef34 	.word	0xe000ef34

08005564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	607b      	str	r3, [r7, #4]
}
 800557c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <vPortEnterCritical+0x58>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a0d      	ldr	r2, [pc, #52]	; (80055bc <vPortEnterCritical+0x58>)
 8005586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <vPortEnterCritical+0x58>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10f      	bne.n	80055b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <vPortEnterCritical+0x5c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	603b      	str	r3, [r7, #0]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <vPortEnterCritical+0x4a>
	}
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	2000000c 	.word	0x2000000c
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ca:	4b12      	ldr	r3, [pc, #72]	; (8005614 <vPortExitCritical+0x50>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <vPortExitCritical+0x24>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	607b      	str	r3, [r7, #4]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055e8:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <vPortExitCritical+0x50>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <vPortExitCritical+0x50>)
 80055f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <vPortExitCritical+0x50>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <vPortExitCritical+0x42>
 80055fa:	2300      	movs	r3, #0
 80055fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f383 8811 	msr	BASEPRI, r3
}
 8005604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	2000000c 	.word	0x2000000c
	...

08005620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005620:	f3ef 8009 	mrs	r0, PSP
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <pxCurrentTCBConst>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f01e 0f10 	tst.w	lr, #16
 8005630:	bf08      	it	eq
 8005632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	6010      	str	r0, [r2, #0]
 800563c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005644:	f380 8811 	msr	BASEPRI, r0
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f7fe ffb4 	bl	80045bc <vTaskSwitchContext>
 8005654:	f04f 0000 	mov.w	r0, #0
 8005658:	f380 8811 	msr	BASEPRI, r0
 800565c:	bc09      	pop	{r0, r3}
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005666:	f01e 0f10 	tst.w	lr, #16
 800566a:	bf08      	it	eq
 800566c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005670:	f380 8809 	msr	PSP, r0
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst>:
 8005680:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056a2:	f7fe fed1 	bl	8004448 <xTaskIncrementTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <xPortSysTickHandler+0x40>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
}
 80056be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <vPortSetupTimerInterrupt+0x38>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <vPortSetupTimerInterrupt+0x3c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <vPortSetupTimerInterrupt+0x40>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <vPortSetupTimerInterrupt+0x44>)
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ee:	4b04      	ldr	r3, [pc, #16]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056f0:	2207      	movs	r2, #7
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	e000e010 	.word	0xe000e010
 8005704:	e000e018 	.word	0xe000e018
 8005708:	20000000 	.word	0x20000000
 800570c:	10624dd3 	.word	0x10624dd3
 8005710:	e000e014 	.word	0xe000e014

08005714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005724 <vPortEnableVFP+0x10>
 8005718:	6801      	ldr	r1, [r0, #0]
 800571a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800571e:	6001      	str	r1, [r0, #0]
 8005720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005722:	bf00      	nop
 8005724:	e000ed88 	.word	0xe000ed88

08005728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800572e:	f3ef 8305 	mrs	r3, IPSR
 8005732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b0f      	cmp	r3, #15
 8005738:	d914      	bls.n	8005764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <vPortValidateInterruptPriority+0x70>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005744:	4b15      	ldr	r3, [pc, #84]	; (800579c <vPortValidateInterruptPriority+0x74>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	7afa      	ldrb	r2, [r7, #11]
 800574a:	429a      	cmp	r2, r3
 800574c:	d20a      	bcs.n	8005764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	607b      	str	r3, [r7, #4]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <vPortValidateInterruptPriority+0x78>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <vPortValidateInterruptPriority+0x7c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d90a      	bls.n	800578a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	603b      	str	r3, [r7, #0]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <vPortValidateInterruptPriority+0x60>
	}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	e000e3f0 	.word	0xe000e3f0
 800579c:	20000f48 	.word	0x20000f48
 80057a0:	e000ed0c 	.word	0xe000ed0c
 80057a4:	20000f4c 	.word	0x20000f4c

080057a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057b4:	f7fe fd8c 	bl	80042d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057b8:	4b5b      	ldr	r3, [pc, #364]	; (8005928 <pvPortMalloc+0x180>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057c0:	f000 f920 	bl	8005a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <pvPortMalloc+0x184>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 8093 	bne.w	80058f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01d      	beq.n	8005814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057d8:	2208      	movs	r2, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d014      	beq.n	8005814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	3308      	adds	r3, #8
 80057f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <pvPortMalloc+0x6c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d06e      	beq.n	80058f8 <pvPortMalloc+0x150>
 800581a:	4b45      	ldr	r3, [pc, #276]	; (8005930 <pvPortMalloc+0x188>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d869      	bhi.n	80058f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005824:	4b43      	ldr	r3, [pc, #268]	; (8005934 <pvPortMalloc+0x18c>)
 8005826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005828:	4b42      	ldr	r3, [pc, #264]	; (8005934 <pvPortMalloc+0x18c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800582e:	e004      	b.n	800583a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d903      	bls.n	800584c <pvPortMalloc+0xa4>
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f1      	bne.n	8005830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <pvPortMalloc+0x180>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	429a      	cmp	r2, r3
 8005854:	d050      	beq.n	80058f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2208      	movs	r2, #8
 800585c:	4413      	add	r3, r2
 800585e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	2308      	movs	r3, #8
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	429a      	cmp	r2, r3
 8005876:	d91f      	bls.n	80058b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <pvPortMalloc+0xf8>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	613b      	str	r3, [r7, #16]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058b2:	69b8      	ldr	r0, [r7, #24]
 80058b4:	f000 f908 	bl	8005ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058b8:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <pvPortMalloc+0x188>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <pvPortMalloc+0x188>)
 80058c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058c6:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <pvPortMalloc+0x188>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <pvPortMalloc+0x190>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d203      	bcs.n	80058da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058d2:	4b17      	ldr	r3, [pc, #92]	; (8005930 <pvPortMalloc+0x188>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a18      	ldr	r2, [pc, #96]	; (8005938 <pvPortMalloc+0x190>)
 80058d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <pvPortMalloc+0x184>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <pvPortMalloc+0x194>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	4a11      	ldr	r2, [pc, #68]	; (800593c <pvPortMalloc+0x194>)
 80058f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058f8:	f7fe fcf8 	bl	80042ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <pvPortMalloc+0x174>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <pvPortMalloc+0x172>
	return pvReturn;
 800591c:	69fb      	ldr	r3, [r7, #28]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3728      	adds	r7, #40	; 0x28
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20001b58 	.word	0x20001b58
 800592c:	20001b6c 	.word	0x20001b6c
 8005930:	20001b5c 	.word	0x20001b5c
 8005934:	20001b50 	.word	0x20001b50
 8005938:	20001b60 	.word	0x20001b60
 800593c:	20001b64 	.word	0x20001b64

08005940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04d      	beq.n	80059ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005952:	2308      	movs	r3, #8
 8005954:	425b      	negs	r3, r3
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <vPortFree+0xb8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <vPortFree+0x44>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	60fb      	str	r3, [r7, #12]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <vPortFree+0x62>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	60bb      	str	r3, [r7, #8]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <vPortFree+0xb8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01e      	beq.n	80059ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11a      	bne.n	80059ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <vPortFree+0xb8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	401a      	ands	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059c8:	f7fe fc82 	bl	80042d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <vPortFree+0xbc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4413      	add	r3, r2
 80059d6:	4a09      	ldr	r2, [pc, #36]	; (80059fc <vPortFree+0xbc>)
 80059d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059da:	6938      	ldr	r0, [r7, #16]
 80059dc:	f000 f874 	bl	8005ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <vPortFree+0xc0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	4a06      	ldr	r2, [pc, #24]	; (8005a00 <vPortFree+0xc0>)
 80059e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059ea:	f7fe fc7f 	bl	80042ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059ee:	bf00      	nop
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20001b6c 	.word	0x20001b6c
 80059fc:	20001b5c 	.word	0x20001b5c
 8005a00:	20001b68 	.word	0x20001b68

08005a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a10:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <prvHeapInit+0xac>)
 8005a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00c      	beq.n	8005a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3307      	adds	r3, #7
 8005a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0307 	bic.w	r3, r3, #7
 8005a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <prvHeapInit+0xac>)
 8005a34:	4413      	add	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <prvHeapInit+0xb0>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a42:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <prvHeapInit+0xb0>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a50:	2208      	movs	r2, #8
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <prvHeapInit+0xb4>)
 8005a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a66:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <prvHeapInit+0xb4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a6e:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <prvHeapInit+0xb4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <prvHeapInit+0xb4>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <prvHeapInit+0xb8>)
 8005a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <prvHeapInit+0xbc>)
 8005a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a9c:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <prvHeapInit+0xc0>)
 8005a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000f50 	.word	0x20000f50
 8005ab4:	20001b50 	.word	0x20001b50
 8005ab8:	20001b58 	.word	0x20001b58
 8005abc:	20001b60 	.word	0x20001b60
 8005ac0:	20001b5c 	.word	0x20001b5c
 8005ac4:	20001b6c 	.word	0x20001b6c

08005ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ad0:	4b28      	ldr	r3, [pc, #160]	; (8005b74 <prvInsertBlockIntoFreeList+0xac>)
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e002      	b.n	8005adc <prvInsertBlockIntoFreeList+0x14>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d8f7      	bhi.n	8005ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	4413      	add	r3, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d108      	bne.n	8005b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	441a      	add	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d118      	bne.n	8005b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <prvInsertBlockIntoFreeList+0xb0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d00d      	beq.n	8005b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	e008      	b.n	8005b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <prvInsertBlockIntoFreeList+0xb0>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e003      	b.n	8005b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d002      	beq.n	8005b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20001b50 	.word	0x20001b50
 8005b78:	20001b58 	.word	0x20001b58

08005b7c <__errno>:
 8005b7c:	4b01      	ldr	r3, [pc, #4]	; (8005b84 <__errno+0x8>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000010 	.word	0x20000010

08005b88 <std>:
 8005b88:	2300      	movs	r3, #0
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b96:	6083      	str	r3, [r0, #8]
 8005b98:	8181      	strh	r1, [r0, #12]
 8005b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b9c:	81c2      	strh	r2, [r0, #14]
 8005b9e:	6183      	str	r3, [r0, #24]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	305c      	adds	r0, #92	; 0x5c
 8005ba6:	f000 f91a 	bl	8005dde <memset>
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <std+0x38>)
 8005bac:	6263      	str	r3, [r4, #36]	; 0x24
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <std+0x3c>)
 8005bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <std+0x40>)
 8005bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bb6:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <std+0x44>)
 8005bb8:	6224      	str	r4, [r4, #32]
 8005bba:	6323      	str	r3, [r4, #48]	; 0x30
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08006129 	.word	0x08006129
 8005bc4:	0800614b 	.word	0x0800614b
 8005bc8:	08006183 	.word	0x08006183
 8005bcc:	080061a7 	.word	0x080061a7

08005bd0 <_cleanup_r>:
 8005bd0:	4901      	ldr	r1, [pc, #4]	; (8005bd8 <_cleanup_r+0x8>)
 8005bd2:	f000 b8af 	b.w	8005d34 <_fwalk_reent>
 8005bd6:	bf00      	nop
 8005bd8:	08006481 	.word	0x08006481

08005bdc <__sfmoreglue>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	2268      	movs	r2, #104	; 0x68
 8005be0:	1e4d      	subs	r5, r1, #1
 8005be2:	4355      	muls	r5, r2
 8005be4:	460e      	mov	r6, r1
 8005be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bea:	f000 f921 	bl	8005e30 <_malloc_r>
 8005bee:	4604      	mov	r4, r0
 8005bf0:	b140      	cbz	r0, 8005c04 <__sfmoreglue+0x28>
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bf8:	300c      	adds	r0, #12
 8005bfa:	60a0      	str	r0, [r4, #8]
 8005bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c00:	f000 f8ed 	bl	8005dde <memset>
 8005c04:	4620      	mov	r0, r4
 8005c06:	bd70      	pop	{r4, r5, r6, pc}

08005c08 <__sfp_lock_acquire>:
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <__sfp_lock_acquire+0x8>)
 8005c0a:	f000 b8d8 	b.w	8005dbe <__retarget_lock_acquire_recursive>
 8005c0e:	bf00      	nop
 8005c10:	20001b71 	.word	0x20001b71

08005c14 <__sfp_lock_release>:
 8005c14:	4801      	ldr	r0, [pc, #4]	; (8005c1c <__sfp_lock_release+0x8>)
 8005c16:	f000 b8d3 	b.w	8005dc0 <__retarget_lock_release_recursive>
 8005c1a:	bf00      	nop
 8005c1c:	20001b71 	.word	0x20001b71

08005c20 <__sinit_lock_acquire>:
 8005c20:	4801      	ldr	r0, [pc, #4]	; (8005c28 <__sinit_lock_acquire+0x8>)
 8005c22:	f000 b8cc 	b.w	8005dbe <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	20001b72 	.word	0x20001b72

08005c2c <__sinit_lock_release>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <__sinit_lock_release+0x8>)
 8005c2e:	f000 b8c7 	b.w	8005dc0 <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	20001b72 	.word	0x20001b72

08005c38 <__sinit>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	f7ff fff0 	bl	8005c20 <__sinit_lock_acquire>
 8005c40:	69a3      	ldr	r3, [r4, #24]
 8005c42:	b11b      	cbz	r3, 8005c4c <__sinit+0x14>
 8005c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c48:	f7ff bff0 	b.w	8005c2c <__sinit_lock_release>
 8005c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c50:	6523      	str	r3, [r4, #80]	; 0x50
 8005c52:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <__sinit+0x68>)
 8005c54:	4a13      	ldr	r2, [pc, #76]	; (8005ca4 <__sinit+0x6c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	bf04      	itt	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	61a3      	streq	r3, [r4, #24]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 f820 	bl	8005ca8 <__sfp>
 8005c68:	6060      	str	r0, [r4, #4]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 f81c 	bl	8005ca8 <__sfp>
 8005c70:	60a0      	str	r0, [r4, #8]
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 f818 	bl	8005ca8 <__sfp>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	60e0      	str	r0, [r4, #12]
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	6860      	ldr	r0, [r4, #4]
 8005c80:	f7ff ff82 	bl	8005b88 <std>
 8005c84:	68a0      	ldr	r0, [r4, #8]
 8005c86:	2201      	movs	r2, #1
 8005c88:	2109      	movs	r1, #9
 8005c8a:	f7ff ff7d 	bl	8005b88 <std>
 8005c8e:	68e0      	ldr	r0, [r4, #12]
 8005c90:	2202      	movs	r2, #2
 8005c92:	2112      	movs	r1, #18
 8005c94:	f7ff ff78 	bl	8005b88 <std>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	61a3      	str	r3, [r4, #24]
 8005c9c:	e7d2      	b.n	8005c44 <__sinit+0xc>
 8005c9e:	bf00      	nop
 8005ca0:	08006eb4 	.word	0x08006eb4
 8005ca4:	08005bd1 	.word	0x08005bd1

08005ca8 <__sfp>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	4607      	mov	r7, r0
 8005cac:	f7ff ffac 	bl	8005c08 <__sfp_lock_acquire>
 8005cb0:	4b1e      	ldr	r3, [pc, #120]	; (8005d2c <__sfp+0x84>)
 8005cb2:	681e      	ldr	r6, [r3, #0]
 8005cb4:	69b3      	ldr	r3, [r6, #24]
 8005cb6:	b913      	cbnz	r3, 8005cbe <__sfp+0x16>
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7ff ffbd 	bl	8005c38 <__sinit>
 8005cbe:	3648      	adds	r6, #72	; 0x48
 8005cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	d503      	bpl.n	8005cd0 <__sfp+0x28>
 8005cc8:	6833      	ldr	r3, [r6, #0]
 8005cca:	b30b      	cbz	r3, 8005d10 <__sfp+0x68>
 8005ccc:	6836      	ldr	r6, [r6, #0]
 8005cce:	e7f7      	b.n	8005cc0 <__sfp+0x18>
 8005cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cd4:	b9d5      	cbnz	r5, 8005d0c <__sfp+0x64>
 8005cd6:	4b16      	ldr	r3, [pc, #88]	; (8005d30 <__sfp+0x88>)
 8005cd8:	60e3      	str	r3, [r4, #12]
 8005cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cde:	6665      	str	r5, [r4, #100]	; 0x64
 8005ce0:	f000 f86c 	bl	8005dbc <__retarget_lock_init_recursive>
 8005ce4:	f7ff ff96 	bl	8005c14 <__sfp_lock_release>
 8005ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cf0:	6025      	str	r5, [r4, #0]
 8005cf2:	61a5      	str	r5, [r4, #24]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cfc:	f000 f86f 	bl	8005dde <memset>
 8005d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d08:	4620      	mov	r0, r4
 8005d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d0c:	3468      	adds	r4, #104	; 0x68
 8005d0e:	e7d9      	b.n	8005cc4 <__sfp+0x1c>
 8005d10:	2104      	movs	r1, #4
 8005d12:	4638      	mov	r0, r7
 8005d14:	f7ff ff62 	bl	8005bdc <__sfmoreglue>
 8005d18:	4604      	mov	r4, r0
 8005d1a:	6030      	str	r0, [r6, #0]
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d1d5      	bne.n	8005ccc <__sfp+0x24>
 8005d20:	f7ff ff78 	bl	8005c14 <__sfp_lock_release>
 8005d24:	230c      	movs	r3, #12
 8005d26:	603b      	str	r3, [r7, #0]
 8005d28:	e7ee      	b.n	8005d08 <__sfp+0x60>
 8005d2a:	bf00      	nop
 8005d2c:	08006eb4 	.word	0x08006eb4
 8005d30:	ffff0001 	.word	0xffff0001

08005d34 <_fwalk_reent>:
 8005d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d38:	4606      	mov	r6, r0
 8005d3a:	4688      	mov	r8, r1
 8005d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d40:	2700      	movs	r7, #0
 8005d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d46:	f1b9 0901 	subs.w	r9, r9, #1
 8005d4a:	d505      	bpl.n	8005d58 <_fwalk_reent+0x24>
 8005d4c:	6824      	ldr	r4, [r4, #0]
 8005d4e:	2c00      	cmp	r4, #0
 8005d50:	d1f7      	bne.n	8005d42 <_fwalk_reent+0xe>
 8005d52:	4638      	mov	r0, r7
 8005d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d58:	89ab      	ldrh	r3, [r5, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d907      	bls.n	8005d6e <_fwalk_reent+0x3a>
 8005d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d62:	3301      	adds	r3, #1
 8005d64:	d003      	beq.n	8005d6e <_fwalk_reent+0x3a>
 8005d66:	4629      	mov	r1, r5
 8005d68:	4630      	mov	r0, r6
 8005d6a:	47c0      	blx	r8
 8005d6c:	4307      	orrs	r7, r0
 8005d6e:	3568      	adds	r5, #104	; 0x68
 8005d70:	e7e9      	b.n	8005d46 <_fwalk_reent+0x12>
	...

08005d74 <__libc_init_array>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4d0d      	ldr	r5, [pc, #52]	; (8005dac <__libc_init_array+0x38>)
 8005d78:	4c0d      	ldr	r4, [pc, #52]	; (8005db0 <__libc_init_array+0x3c>)
 8005d7a:	1b64      	subs	r4, r4, r5
 8005d7c:	10a4      	asrs	r4, r4, #2
 8005d7e:	2600      	movs	r6, #0
 8005d80:	42a6      	cmp	r6, r4
 8005d82:	d109      	bne.n	8005d98 <__libc_init_array+0x24>
 8005d84:	4d0b      	ldr	r5, [pc, #44]	; (8005db4 <__libc_init_array+0x40>)
 8005d86:	4c0c      	ldr	r4, [pc, #48]	; (8005db8 <__libc_init_array+0x44>)
 8005d88:	f000 ffa8 	bl	8006cdc <_init>
 8005d8c:	1b64      	subs	r4, r4, r5
 8005d8e:	10a4      	asrs	r4, r4, #2
 8005d90:	2600      	movs	r6, #0
 8005d92:	42a6      	cmp	r6, r4
 8005d94:	d105      	bne.n	8005da2 <__libc_init_array+0x2e>
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9c:	4798      	blx	r3
 8005d9e:	3601      	adds	r6, #1
 8005da0:	e7ee      	b.n	8005d80 <__libc_init_array+0xc>
 8005da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da6:	4798      	blx	r3
 8005da8:	3601      	adds	r6, #1
 8005daa:	e7f2      	b.n	8005d92 <__libc_init_array+0x1e>
 8005dac:	08006eec 	.word	0x08006eec
 8005db0:	08006eec 	.word	0x08006eec
 8005db4:	08006eec 	.word	0x08006eec
 8005db8:	08006ef0 	.word	0x08006ef0

08005dbc <__retarget_lock_init_recursive>:
 8005dbc:	4770      	bx	lr

08005dbe <__retarget_lock_acquire_recursive>:
 8005dbe:	4770      	bx	lr

08005dc0 <__retarget_lock_release_recursive>:
 8005dc0:	4770      	bx	lr

08005dc2 <memcpy>:
 8005dc2:	440a      	add	r2, r1
 8005dc4:	4291      	cmp	r1, r2
 8005dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dca:	d100      	bne.n	8005dce <memcpy+0xc>
 8005dcc:	4770      	bx	lr
 8005dce:	b510      	push	{r4, lr}
 8005dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd8:	4291      	cmp	r1, r2
 8005dda:	d1f9      	bne.n	8005dd0 <memcpy+0xe>
 8005ddc:	bd10      	pop	{r4, pc}

08005dde <memset>:
 8005dde:	4402      	add	r2, r0
 8005de0:	4603      	mov	r3, r0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d100      	bne.n	8005de8 <memset+0xa>
 8005de6:	4770      	bx	lr
 8005de8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dec:	e7f9      	b.n	8005de2 <memset+0x4>
	...

08005df0 <sbrk_aligned>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4e0e      	ldr	r6, [pc, #56]	; (8005e2c <sbrk_aligned+0x3c>)
 8005df4:	460c      	mov	r4, r1
 8005df6:	6831      	ldr	r1, [r6, #0]
 8005df8:	4605      	mov	r5, r0
 8005dfa:	b911      	cbnz	r1, 8005e02 <sbrk_aligned+0x12>
 8005dfc:	f000 f984 	bl	8006108 <_sbrk_r>
 8005e00:	6030      	str	r0, [r6, #0]
 8005e02:	4621      	mov	r1, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 f97f 	bl	8006108 <_sbrk_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	d00a      	beq.n	8005e24 <sbrk_aligned+0x34>
 8005e0e:	1cc4      	adds	r4, r0, #3
 8005e10:	f024 0403 	bic.w	r4, r4, #3
 8005e14:	42a0      	cmp	r0, r4
 8005e16:	d007      	beq.n	8005e28 <sbrk_aligned+0x38>
 8005e18:	1a21      	subs	r1, r4, r0
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 f974 	bl	8006108 <_sbrk_r>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d101      	bne.n	8005e28 <sbrk_aligned+0x38>
 8005e24:	f04f 34ff 	mov.w	r4, #4294967295
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	20001b78 	.word	0x20001b78

08005e30 <_malloc_r>:
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	1ccd      	adds	r5, r1, #3
 8005e36:	f025 0503 	bic.w	r5, r5, #3
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2d0c      	cmp	r5, #12
 8005e3e:	bf38      	it	cc
 8005e40:	250c      	movcc	r5, #12
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	4607      	mov	r7, r0
 8005e46:	db01      	blt.n	8005e4c <_malloc_r+0x1c>
 8005e48:	42a9      	cmp	r1, r5
 8005e4a:	d905      	bls.n	8005e58 <_malloc_r+0x28>
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	2600      	movs	r6, #0
 8005e52:	4630      	mov	r0, r6
 8005e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e58:	4e2e      	ldr	r6, [pc, #184]	; (8005f14 <_malloc_r+0xe4>)
 8005e5a:	f000 fbc5 	bl	80065e8 <__malloc_lock>
 8005e5e:	6833      	ldr	r3, [r6, #0]
 8005e60:	461c      	mov	r4, r3
 8005e62:	bb34      	cbnz	r4, 8005eb2 <_malloc_r+0x82>
 8005e64:	4629      	mov	r1, r5
 8005e66:	4638      	mov	r0, r7
 8005e68:	f7ff ffc2 	bl	8005df0 <sbrk_aligned>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	4604      	mov	r4, r0
 8005e70:	d14d      	bne.n	8005f0e <_malloc_r+0xde>
 8005e72:	6834      	ldr	r4, [r6, #0]
 8005e74:	4626      	mov	r6, r4
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	d140      	bne.n	8005efc <_malloc_r+0xcc>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4638      	mov	r0, r7
 8005e80:	eb04 0803 	add.w	r8, r4, r3
 8005e84:	f000 f940 	bl	8006108 <_sbrk_r>
 8005e88:	4580      	cmp	r8, r0
 8005e8a:	d13a      	bne.n	8005f02 <_malloc_r+0xd2>
 8005e8c:	6821      	ldr	r1, [r4, #0]
 8005e8e:	3503      	adds	r5, #3
 8005e90:	1a6d      	subs	r5, r5, r1
 8005e92:	f025 0503 	bic.w	r5, r5, #3
 8005e96:	3508      	adds	r5, #8
 8005e98:	2d0c      	cmp	r5, #12
 8005e9a:	bf38      	it	cc
 8005e9c:	250c      	movcc	r5, #12
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f7ff ffa5 	bl	8005df0 <sbrk_aligned>
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d02b      	beq.n	8005f02 <_malloc_r+0xd2>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	442b      	add	r3, r5
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	e00e      	b.n	8005ed0 <_malloc_r+0xa0>
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	1b52      	subs	r2, r2, r5
 8005eb6:	d41e      	bmi.n	8005ef6 <_malloc_r+0xc6>
 8005eb8:	2a0b      	cmp	r2, #11
 8005eba:	d916      	bls.n	8005eea <_malloc_r+0xba>
 8005ebc:	1961      	adds	r1, r4, r5
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	6025      	str	r5, [r4, #0]
 8005ec2:	bf18      	it	ne
 8005ec4:	6059      	strne	r1, [r3, #4]
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	bf08      	it	eq
 8005eca:	6031      	streq	r1, [r6, #0]
 8005ecc:	5162      	str	r2, [r4, r5]
 8005ece:	604b      	str	r3, [r1, #4]
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f104 060b 	add.w	r6, r4, #11
 8005ed6:	f000 fb8d 	bl	80065f4 <__malloc_unlock>
 8005eda:	f026 0607 	bic.w	r6, r6, #7
 8005ede:	1d23      	adds	r3, r4, #4
 8005ee0:	1af2      	subs	r2, r6, r3
 8005ee2:	d0b6      	beq.n	8005e52 <_malloc_r+0x22>
 8005ee4:	1b9b      	subs	r3, r3, r6
 8005ee6:	50a3      	str	r3, [r4, r2]
 8005ee8:	e7b3      	b.n	8005e52 <_malloc_r+0x22>
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	bf0c      	ite	eq
 8005ef0:	6032      	streq	r2, [r6, #0]
 8005ef2:	605a      	strne	r2, [r3, #4]
 8005ef4:	e7ec      	b.n	8005ed0 <_malloc_r+0xa0>
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	6864      	ldr	r4, [r4, #4]
 8005efa:	e7b2      	b.n	8005e62 <_malloc_r+0x32>
 8005efc:	4634      	mov	r4, r6
 8005efe:	6876      	ldr	r6, [r6, #4]
 8005f00:	e7b9      	b.n	8005e76 <_malloc_r+0x46>
 8005f02:	230c      	movs	r3, #12
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4638      	mov	r0, r7
 8005f08:	f000 fb74 	bl	80065f4 <__malloc_unlock>
 8005f0c:	e7a1      	b.n	8005e52 <_malloc_r+0x22>
 8005f0e:	6025      	str	r5, [r4, #0]
 8005f10:	e7de      	b.n	8005ed0 <_malloc_r+0xa0>
 8005f12:	bf00      	nop
 8005f14:	20001b74 	.word	0x20001b74

08005f18 <iprintf>:
 8005f18:	b40f      	push	{r0, r1, r2, r3}
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <iprintf+0x2c>)
 8005f1c:	b513      	push	{r0, r1, r4, lr}
 8005f1e:	681c      	ldr	r4, [r3, #0]
 8005f20:	b124      	cbz	r4, 8005f2c <iprintf+0x14>
 8005f22:	69a3      	ldr	r3, [r4, #24]
 8005f24:	b913      	cbnz	r3, 8005f2c <iprintf+0x14>
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff fe86 	bl	8005c38 <__sinit>
 8005f2c:	ab05      	add	r3, sp, #20
 8005f2e:	9a04      	ldr	r2, [sp, #16]
 8005f30:	68a1      	ldr	r1, [r4, #8]
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fbd9 	bl	80066ec <_vfiprintf_r>
 8005f3a:	b002      	add	sp, #8
 8005f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f40:	b004      	add	sp, #16
 8005f42:	4770      	bx	lr
 8005f44:	20000010 	.word	0x20000010

08005f48 <_puts_r>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	460e      	mov	r6, r1
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	b118      	cbz	r0, 8005f58 <_puts_r+0x10>
 8005f50:	6983      	ldr	r3, [r0, #24]
 8005f52:	b90b      	cbnz	r3, 8005f58 <_puts_r+0x10>
 8005f54:	f7ff fe70 	bl	8005c38 <__sinit>
 8005f58:	69ab      	ldr	r3, [r5, #24]
 8005f5a:	68ac      	ldr	r4, [r5, #8]
 8005f5c:	b913      	cbnz	r3, 8005f64 <_puts_r+0x1c>
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f7ff fe6a 	bl	8005c38 <__sinit>
 8005f64:	4b2c      	ldr	r3, [pc, #176]	; (8006018 <_puts_r+0xd0>)
 8005f66:	429c      	cmp	r4, r3
 8005f68:	d120      	bne.n	8005fac <_puts_r+0x64>
 8005f6a:	686c      	ldr	r4, [r5, #4]
 8005f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f6e:	07db      	lsls	r3, r3, #31
 8005f70:	d405      	bmi.n	8005f7e <_puts_r+0x36>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	0598      	lsls	r0, r3, #22
 8005f76:	d402      	bmi.n	8005f7e <_puts_r+0x36>
 8005f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f7a:	f7ff ff20 	bl	8005dbe <__retarget_lock_acquire_recursive>
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	0719      	lsls	r1, r3, #28
 8005f82:	d51d      	bpl.n	8005fc0 <_puts_r+0x78>
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	b1db      	cbz	r3, 8005fc0 <_puts_r+0x78>
 8005f88:	3e01      	subs	r6, #1
 8005f8a:	68a3      	ldr	r3, [r4, #8]
 8005f8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f90:	3b01      	subs	r3, #1
 8005f92:	60a3      	str	r3, [r4, #8]
 8005f94:	bb39      	cbnz	r1, 8005fe6 <_puts_r+0x9e>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da38      	bge.n	800600c <_puts_r+0xc4>
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	210a      	movs	r1, #10
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 f906 	bl	80061b0 <__swbuf_r>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d011      	beq.n	8005fcc <_puts_r+0x84>
 8005fa8:	250a      	movs	r5, #10
 8005faa:	e011      	b.n	8005fd0 <_puts_r+0x88>
 8005fac:	4b1b      	ldr	r3, [pc, #108]	; (800601c <_puts_r+0xd4>)
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	d101      	bne.n	8005fb6 <_puts_r+0x6e>
 8005fb2:	68ac      	ldr	r4, [r5, #8]
 8005fb4:	e7da      	b.n	8005f6c <_puts_r+0x24>
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <_puts_r+0xd8>)
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	bf08      	it	eq
 8005fbc:	68ec      	ldreq	r4, [r5, #12]
 8005fbe:	e7d5      	b.n	8005f6c <_puts_r+0x24>
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f958 	bl	8006278 <__swsetup_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d0dd      	beq.n	8005f88 <_puts_r+0x40>
 8005fcc:	f04f 35ff 	mov.w	r5, #4294967295
 8005fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fd2:	07da      	lsls	r2, r3, #31
 8005fd4:	d405      	bmi.n	8005fe2 <_puts_r+0x9a>
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	059b      	lsls	r3, r3, #22
 8005fda:	d402      	bmi.n	8005fe2 <_puts_r+0x9a>
 8005fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fde:	f7ff feef 	bl	8005dc0 <__retarget_lock_release_recursive>
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da04      	bge.n	8005ff4 <_puts_r+0xac>
 8005fea:	69a2      	ldr	r2, [r4, #24]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	dc06      	bgt.n	8005ffe <_puts_r+0xb6>
 8005ff0:	290a      	cmp	r1, #10
 8005ff2:	d004      	beq.n	8005ffe <_puts_r+0xb6>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	6022      	str	r2, [r4, #0]
 8005ffa:	7019      	strb	r1, [r3, #0]
 8005ffc:	e7c5      	b.n	8005f8a <_puts_r+0x42>
 8005ffe:	4622      	mov	r2, r4
 8006000:	4628      	mov	r0, r5
 8006002:	f000 f8d5 	bl	80061b0 <__swbuf_r>
 8006006:	3001      	adds	r0, #1
 8006008:	d1bf      	bne.n	8005f8a <_puts_r+0x42>
 800600a:	e7df      	b.n	8005fcc <_puts_r+0x84>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	250a      	movs	r5, #10
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	701d      	strb	r5, [r3, #0]
 8006016:	e7db      	b.n	8005fd0 <_puts_r+0x88>
 8006018:	08006e74 	.word	0x08006e74
 800601c:	08006e94 	.word	0x08006e94
 8006020:	08006e54 	.word	0x08006e54

08006024 <puts>:
 8006024:	4b02      	ldr	r3, [pc, #8]	; (8006030 <puts+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f7ff bf8d 	b.w	8005f48 <_puts_r>
 800602e:	bf00      	nop
 8006030:	20000010 	.word	0x20000010

08006034 <cleanup_glue>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	460c      	mov	r4, r1
 8006038:	6809      	ldr	r1, [r1, #0]
 800603a:	4605      	mov	r5, r0
 800603c:	b109      	cbz	r1, 8006042 <cleanup_glue+0xe>
 800603e:	f7ff fff9 	bl	8006034 <cleanup_glue>
 8006042:	4621      	mov	r1, r4
 8006044:	4628      	mov	r0, r5
 8006046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800604a:	f000 bad9 	b.w	8006600 <_free_r>
	...

08006050 <_reclaim_reent>:
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <_reclaim_reent+0xb4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4283      	cmp	r3, r0
 8006056:	b570      	push	{r4, r5, r6, lr}
 8006058:	4604      	mov	r4, r0
 800605a:	d051      	beq.n	8006100 <_reclaim_reent+0xb0>
 800605c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800605e:	b143      	cbz	r3, 8006072 <_reclaim_reent+0x22>
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d14a      	bne.n	80060fc <_reclaim_reent+0xac>
 8006066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	b111      	cbz	r1, 8006072 <_reclaim_reent+0x22>
 800606c:	4620      	mov	r0, r4
 800606e:	f000 fac7 	bl	8006600 <_free_r>
 8006072:	6961      	ldr	r1, [r4, #20]
 8006074:	b111      	cbz	r1, 800607c <_reclaim_reent+0x2c>
 8006076:	4620      	mov	r0, r4
 8006078:	f000 fac2 	bl	8006600 <_free_r>
 800607c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800607e:	b111      	cbz	r1, 8006086 <_reclaim_reent+0x36>
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fabd 	bl	8006600 <_free_r>
 8006086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006088:	b111      	cbz	r1, 8006090 <_reclaim_reent+0x40>
 800608a:	4620      	mov	r0, r4
 800608c:	f000 fab8 	bl	8006600 <_free_r>
 8006090:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006092:	b111      	cbz	r1, 800609a <_reclaim_reent+0x4a>
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fab3 	bl	8006600 <_free_r>
 800609a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800609c:	b111      	cbz	r1, 80060a4 <_reclaim_reent+0x54>
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 faae 	bl	8006600 <_free_r>
 80060a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80060a6:	b111      	cbz	r1, 80060ae <_reclaim_reent+0x5e>
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 faa9 	bl	8006600 <_free_r>
 80060ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80060b0:	b111      	cbz	r1, 80060b8 <_reclaim_reent+0x68>
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 faa4 	bl	8006600 <_free_r>
 80060b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ba:	b111      	cbz	r1, 80060c2 <_reclaim_reent+0x72>
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 fa9f 	bl	8006600 <_free_r>
 80060c2:	69a3      	ldr	r3, [r4, #24]
 80060c4:	b1e3      	cbz	r3, 8006100 <_reclaim_reent+0xb0>
 80060c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060c8:	4620      	mov	r0, r4
 80060ca:	4798      	blx	r3
 80060cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060ce:	b1b9      	cbz	r1, 8006100 <_reclaim_reent+0xb0>
 80060d0:	4620      	mov	r0, r4
 80060d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060d6:	f7ff bfad 	b.w	8006034 <cleanup_glue>
 80060da:	5949      	ldr	r1, [r1, r5]
 80060dc:	b941      	cbnz	r1, 80060f0 <_reclaim_reent+0xa0>
 80060de:	3504      	adds	r5, #4
 80060e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e2:	2d80      	cmp	r5, #128	; 0x80
 80060e4:	68d9      	ldr	r1, [r3, #12]
 80060e6:	d1f8      	bne.n	80060da <_reclaim_reent+0x8a>
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fa89 	bl	8006600 <_free_r>
 80060ee:	e7ba      	b.n	8006066 <_reclaim_reent+0x16>
 80060f0:	680e      	ldr	r6, [r1, #0]
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 fa84 	bl	8006600 <_free_r>
 80060f8:	4631      	mov	r1, r6
 80060fa:	e7ef      	b.n	80060dc <_reclaim_reent+0x8c>
 80060fc:	2500      	movs	r5, #0
 80060fe:	e7ef      	b.n	80060e0 <_reclaim_reent+0x90>
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	bf00      	nop
 8006104:	20000010 	.word	0x20000010

08006108 <_sbrk_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d06      	ldr	r5, [pc, #24]	; (8006124 <_sbrk_r+0x1c>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fa fc6e 	bl	80009f4 <_sbrk>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_sbrk_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_sbrk_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20001b7c 	.word	0x20001b7c

08006128 <__sread>:
 8006128:	b510      	push	{r4, lr}
 800612a:	460c      	mov	r4, r1
 800612c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006130:	f000 fda0 	bl	8006c74 <_read_r>
 8006134:	2800      	cmp	r0, #0
 8006136:	bfab      	itete	ge
 8006138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800613a:	89a3      	ldrhlt	r3, [r4, #12]
 800613c:	181b      	addge	r3, r3, r0
 800613e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006142:	bfac      	ite	ge
 8006144:	6563      	strge	r3, [r4, #84]	; 0x54
 8006146:	81a3      	strhlt	r3, [r4, #12]
 8006148:	bd10      	pop	{r4, pc}

0800614a <__swrite>:
 800614a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614e:	461f      	mov	r7, r3
 8006150:	898b      	ldrh	r3, [r1, #12]
 8006152:	05db      	lsls	r3, r3, #23
 8006154:	4605      	mov	r5, r0
 8006156:	460c      	mov	r4, r1
 8006158:	4616      	mov	r6, r2
 800615a:	d505      	bpl.n	8006168 <__swrite+0x1e>
 800615c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006160:	2302      	movs	r3, #2
 8006162:	2200      	movs	r2, #0
 8006164:	f000 f9c8 	bl	80064f8 <_lseek_r>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800616e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006172:	81a3      	strh	r3, [r4, #12]
 8006174:	4632      	mov	r2, r6
 8006176:	463b      	mov	r3, r7
 8006178:	4628      	mov	r0, r5
 800617a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800617e:	f000 b869 	b.w	8006254 <_write_r>

08006182 <__sseek>:
 8006182:	b510      	push	{r4, lr}
 8006184:	460c      	mov	r4, r1
 8006186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618a:	f000 f9b5 	bl	80064f8 <_lseek_r>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	bf15      	itete	ne
 8006194:	6560      	strne	r0, [r4, #84]	; 0x54
 8006196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800619a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800619e:	81a3      	strheq	r3, [r4, #12]
 80061a0:	bf18      	it	ne
 80061a2:	81a3      	strhne	r3, [r4, #12]
 80061a4:	bd10      	pop	{r4, pc}

080061a6 <__sclose>:
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 b8d3 	b.w	8006354 <_close_r>
	...

080061b0 <__swbuf_r>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	460e      	mov	r6, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	4605      	mov	r5, r0
 80061b8:	b118      	cbz	r0, 80061c2 <__swbuf_r+0x12>
 80061ba:	6983      	ldr	r3, [r0, #24]
 80061bc:	b90b      	cbnz	r3, 80061c2 <__swbuf_r+0x12>
 80061be:	f7ff fd3b 	bl	8005c38 <__sinit>
 80061c2:	4b21      	ldr	r3, [pc, #132]	; (8006248 <__swbuf_r+0x98>)
 80061c4:	429c      	cmp	r4, r3
 80061c6:	d12b      	bne.n	8006220 <__swbuf_r+0x70>
 80061c8:	686c      	ldr	r4, [r5, #4]
 80061ca:	69a3      	ldr	r3, [r4, #24]
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	071a      	lsls	r2, r3, #28
 80061d2:	d52f      	bpl.n	8006234 <__swbuf_r+0x84>
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	b36b      	cbz	r3, 8006234 <__swbuf_r+0x84>
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1ac0      	subs	r0, r0, r3
 80061de:	6963      	ldr	r3, [r4, #20]
 80061e0:	b2f6      	uxtb	r6, r6
 80061e2:	4283      	cmp	r3, r0
 80061e4:	4637      	mov	r7, r6
 80061e6:	dc04      	bgt.n	80061f2 <__swbuf_r+0x42>
 80061e8:	4621      	mov	r1, r4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 f948 	bl	8006480 <_fflush_r>
 80061f0:	bb30      	cbnz	r0, 8006240 <__swbuf_r+0x90>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	60a3      	str	r3, [r4, #8]
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	6022      	str	r2, [r4, #0]
 80061fe:	701e      	strb	r6, [r3, #0]
 8006200:	6963      	ldr	r3, [r4, #20]
 8006202:	3001      	adds	r0, #1
 8006204:	4283      	cmp	r3, r0
 8006206:	d004      	beq.n	8006212 <__swbuf_r+0x62>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	07db      	lsls	r3, r3, #31
 800620c:	d506      	bpl.n	800621c <__swbuf_r+0x6c>
 800620e:	2e0a      	cmp	r6, #10
 8006210:	d104      	bne.n	800621c <__swbuf_r+0x6c>
 8006212:	4621      	mov	r1, r4
 8006214:	4628      	mov	r0, r5
 8006216:	f000 f933 	bl	8006480 <_fflush_r>
 800621a:	b988      	cbnz	r0, 8006240 <__swbuf_r+0x90>
 800621c:	4638      	mov	r0, r7
 800621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <__swbuf_r+0x9c>)
 8006222:	429c      	cmp	r4, r3
 8006224:	d101      	bne.n	800622a <__swbuf_r+0x7a>
 8006226:	68ac      	ldr	r4, [r5, #8]
 8006228:	e7cf      	b.n	80061ca <__swbuf_r+0x1a>
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <__swbuf_r+0xa0>)
 800622c:	429c      	cmp	r4, r3
 800622e:	bf08      	it	eq
 8006230:	68ec      	ldreq	r4, [r5, #12]
 8006232:	e7ca      	b.n	80061ca <__swbuf_r+0x1a>
 8006234:	4621      	mov	r1, r4
 8006236:	4628      	mov	r0, r5
 8006238:	f000 f81e 	bl	8006278 <__swsetup_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	d0cb      	beq.n	80061d8 <__swbuf_r+0x28>
 8006240:	f04f 37ff 	mov.w	r7, #4294967295
 8006244:	e7ea      	b.n	800621c <__swbuf_r+0x6c>
 8006246:	bf00      	nop
 8006248:	08006e74 	.word	0x08006e74
 800624c:	08006e94 	.word	0x08006e94
 8006250:	08006e54 	.word	0x08006e54

08006254 <_write_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d07      	ldr	r5, [pc, #28]	; (8006274 <_write_r+0x20>)
 8006258:	4604      	mov	r4, r0
 800625a:	4608      	mov	r0, r1
 800625c:	4611      	mov	r1, r2
 800625e:	2200      	movs	r2, #0
 8006260:	602a      	str	r2, [r5, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	f7fa fb76 	bl	8000954 <_write>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_write_r+0x1e>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_write_r+0x1e>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	20001b7c 	.word	0x20001b7c

08006278 <__swsetup_r>:
 8006278:	4b32      	ldr	r3, [pc, #200]	; (8006344 <__swsetup_r+0xcc>)
 800627a:	b570      	push	{r4, r5, r6, lr}
 800627c:	681d      	ldr	r5, [r3, #0]
 800627e:	4606      	mov	r6, r0
 8006280:	460c      	mov	r4, r1
 8006282:	b125      	cbz	r5, 800628e <__swsetup_r+0x16>
 8006284:	69ab      	ldr	r3, [r5, #24]
 8006286:	b913      	cbnz	r3, 800628e <__swsetup_r+0x16>
 8006288:	4628      	mov	r0, r5
 800628a:	f7ff fcd5 	bl	8005c38 <__sinit>
 800628e:	4b2e      	ldr	r3, [pc, #184]	; (8006348 <__swsetup_r+0xd0>)
 8006290:	429c      	cmp	r4, r3
 8006292:	d10f      	bne.n	80062b4 <__swsetup_r+0x3c>
 8006294:	686c      	ldr	r4, [r5, #4]
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800629c:	0719      	lsls	r1, r3, #28
 800629e:	d42c      	bmi.n	80062fa <__swsetup_r+0x82>
 80062a0:	06dd      	lsls	r5, r3, #27
 80062a2:	d411      	bmi.n	80062c8 <__swsetup_r+0x50>
 80062a4:	2309      	movs	r3, #9
 80062a6:	6033      	str	r3, [r6, #0]
 80062a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	f04f 30ff 	mov.w	r0, #4294967295
 80062b2:	e03e      	b.n	8006332 <__swsetup_r+0xba>
 80062b4:	4b25      	ldr	r3, [pc, #148]	; (800634c <__swsetup_r+0xd4>)
 80062b6:	429c      	cmp	r4, r3
 80062b8:	d101      	bne.n	80062be <__swsetup_r+0x46>
 80062ba:	68ac      	ldr	r4, [r5, #8]
 80062bc:	e7eb      	b.n	8006296 <__swsetup_r+0x1e>
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <__swsetup_r+0xd8>)
 80062c0:	429c      	cmp	r4, r3
 80062c2:	bf08      	it	eq
 80062c4:	68ec      	ldreq	r4, [r5, #12]
 80062c6:	e7e6      	b.n	8006296 <__swsetup_r+0x1e>
 80062c8:	0758      	lsls	r0, r3, #29
 80062ca:	d512      	bpl.n	80062f2 <__swsetup_r+0x7a>
 80062cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ce:	b141      	cbz	r1, 80062e2 <__swsetup_r+0x6a>
 80062d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d4:	4299      	cmp	r1, r3
 80062d6:	d002      	beq.n	80062de <__swsetup_r+0x66>
 80062d8:	4630      	mov	r0, r6
 80062da:	f000 f991 	bl	8006600 <_free_r>
 80062de:	2300      	movs	r3, #0
 80062e0:	6363      	str	r3, [r4, #52]	; 0x34
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062e8:	81a3      	strh	r3, [r4, #12]
 80062ea:	2300      	movs	r3, #0
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	f043 0308 	orr.w	r3, r3, #8
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	b94b      	cbnz	r3, 8006312 <__swsetup_r+0x9a>
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006308:	d003      	beq.n	8006312 <__swsetup_r+0x9a>
 800630a:	4621      	mov	r1, r4
 800630c:	4630      	mov	r0, r6
 800630e:	f000 f92b 	bl	8006568 <__smakebuf_r>
 8006312:	89a0      	ldrh	r0, [r4, #12]
 8006314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006318:	f010 0301 	ands.w	r3, r0, #1
 800631c:	d00a      	beq.n	8006334 <__swsetup_r+0xbc>
 800631e:	2300      	movs	r3, #0
 8006320:	60a3      	str	r3, [r4, #8]
 8006322:	6963      	ldr	r3, [r4, #20]
 8006324:	425b      	negs	r3, r3
 8006326:	61a3      	str	r3, [r4, #24]
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	b943      	cbnz	r3, 800633e <__swsetup_r+0xc6>
 800632c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006330:	d1ba      	bne.n	80062a8 <__swsetup_r+0x30>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	0781      	lsls	r1, r0, #30
 8006336:	bf58      	it	pl
 8006338:	6963      	ldrpl	r3, [r4, #20]
 800633a:	60a3      	str	r3, [r4, #8]
 800633c:	e7f4      	b.n	8006328 <__swsetup_r+0xb0>
 800633e:	2000      	movs	r0, #0
 8006340:	e7f7      	b.n	8006332 <__swsetup_r+0xba>
 8006342:	bf00      	nop
 8006344:	20000010 	.word	0x20000010
 8006348:	08006e74 	.word	0x08006e74
 800634c:	08006e94 	.word	0x08006e94
 8006350:	08006e54 	.word	0x08006e54

08006354 <_close_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d06      	ldr	r5, [pc, #24]	; (8006370 <_close_r+0x1c>)
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fa fb14 	bl	800098c <_close>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_close_r+0x1a>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_close_r+0x1a>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	20001b7c 	.word	0x20001b7c

08006374 <__sflush_r>:
 8006374:	898a      	ldrh	r2, [r1, #12]
 8006376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	0710      	lsls	r0, r2, #28
 800637e:	460c      	mov	r4, r1
 8006380:	d458      	bmi.n	8006434 <__sflush_r+0xc0>
 8006382:	684b      	ldr	r3, [r1, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dc05      	bgt.n	8006394 <__sflush_r+0x20>
 8006388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	dc02      	bgt.n	8006394 <__sflush_r+0x20>
 800638e:	2000      	movs	r0, #0
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006396:	2e00      	cmp	r6, #0
 8006398:	d0f9      	beq.n	800638e <__sflush_r+0x1a>
 800639a:	2300      	movs	r3, #0
 800639c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063a0:	682f      	ldr	r7, [r5, #0]
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	d032      	beq.n	800640c <__sflush_r+0x98>
 80063a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	075a      	lsls	r2, r3, #29
 80063ac:	d505      	bpl.n	80063ba <__sflush_r+0x46>
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063b4:	b10b      	cbz	r3, 80063ba <__sflush_r+0x46>
 80063b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063b8:	1ac0      	subs	r0, r0, r3
 80063ba:	2300      	movs	r3, #0
 80063bc:	4602      	mov	r2, r0
 80063be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063c0:	6a21      	ldr	r1, [r4, #32]
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b0      	blx	r6
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	d106      	bne.n	80063da <__sflush_r+0x66>
 80063cc:	6829      	ldr	r1, [r5, #0]
 80063ce:	291d      	cmp	r1, #29
 80063d0:	d82c      	bhi.n	800642c <__sflush_r+0xb8>
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <__sflush_r+0x108>)
 80063d4:	40ca      	lsrs	r2, r1
 80063d6:	07d6      	lsls	r6, r2, #31
 80063d8:	d528      	bpl.n	800642c <__sflush_r+0xb8>
 80063da:	2200      	movs	r2, #0
 80063dc:	6062      	str	r2, [r4, #4]
 80063de:	04d9      	lsls	r1, r3, #19
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	d504      	bpl.n	80063f0 <__sflush_r+0x7c>
 80063e6:	1c42      	adds	r2, r0, #1
 80063e8:	d101      	bne.n	80063ee <__sflush_r+0x7a>
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	b903      	cbnz	r3, 80063f0 <__sflush_r+0x7c>
 80063ee:	6560      	str	r0, [r4, #84]	; 0x54
 80063f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063f2:	602f      	str	r7, [r5, #0]
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d0ca      	beq.n	800638e <__sflush_r+0x1a>
 80063f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d002      	beq.n	8006406 <__sflush_r+0x92>
 8006400:	4628      	mov	r0, r5
 8006402:	f000 f8fd 	bl	8006600 <_free_r>
 8006406:	2000      	movs	r0, #0
 8006408:	6360      	str	r0, [r4, #52]	; 0x34
 800640a:	e7c1      	b.n	8006390 <__sflush_r+0x1c>
 800640c:	6a21      	ldr	r1, [r4, #32]
 800640e:	2301      	movs	r3, #1
 8006410:	4628      	mov	r0, r5
 8006412:	47b0      	blx	r6
 8006414:	1c41      	adds	r1, r0, #1
 8006416:	d1c7      	bne.n	80063a8 <__sflush_r+0x34>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0c4      	beq.n	80063a8 <__sflush_r+0x34>
 800641e:	2b1d      	cmp	r3, #29
 8006420:	d001      	beq.n	8006426 <__sflush_r+0xb2>
 8006422:	2b16      	cmp	r3, #22
 8006424:	d101      	bne.n	800642a <__sflush_r+0xb6>
 8006426:	602f      	str	r7, [r5, #0]
 8006428:	e7b1      	b.n	800638e <__sflush_r+0x1a>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	e7ad      	b.n	8006390 <__sflush_r+0x1c>
 8006434:	690f      	ldr	r7, [r1, #16]
 8006436:	2f00      	cmp	r7, #0
 8006438:	d0a9      	beq.n	800638e <__sflush_r+0x1a>
 800643a:	0793      	lsls	r3, r2, #30
 800643c:	680e      	ldr	r6, [r1, #0]
 800643e:	bf08      	it	eq
 8006440:	694b      	ldreq	r3, [r1, #20]
 8006442:	600f      	str	r7, [r1, #0]
 8006444:	bf18      	it	ne
 8006446:	2300      	movne	r3, #0
 8006448:	eba6 0807 	sub.w	r8, r6, r7
 800644c:	608b      	str	r3, [r1, #8]
 800644e:	f1b8 0f00 	cmp.w	r8, #0
 8006452:	dd9c      	ble.n	800638e <__sflush_r+0x1a>
 8006454:	6a21      	ldr	r1, [r4, #32]
 8006456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006458:	4643      	mov	r3, r8
 800645a:	463a      	mov	r2, r7
 800645c:	4628      	mov	r0, r5
 800645e:	47b0      	blx	r6
 8006460:	2800      	cmp	r0, #0
 8006462:	dc06      	bgt.n	8006472 <__sflush_r+0xfe>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	e78e      	b.n	8006390 <__sflush_r+0x1c>
 8006472:	4407      	add	r7, r0
 8006474:	eba8 0800 	sub.w	r8, r8, r0
 8006478:	e7e9      	b.n	800644e <__sflush_r+0xda>
 800647a:	bf00      	nop
 800647c:	20400001 	.word	0x20400001

08006480 <_fflush_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b913      	cbnz	r3, 8006490 <_fflush_r+0x10>
 800648a:	2500      	movs	r5, #0
 800648c:	4628      	mov	r0, r5
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	b118      	cbz	r0, 800649a <_fflush_r+0x1a>
 8006492:	6983      	ldr	r3, [r0, #24]
 8006494:	b90b      	cbnz	r3, 800649a <_fflush_r+0x1a>
 8006496:	f7ff fbcf 	bl	8005c38 <__sinit>
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <_fflush_r+0x6c>)
 800649c:	429c      	cmp	r4, r3
 800649e:	d11b      	bne.n	80064d8 <_fflush_r+0x58>
 80064a0:	686c      	ldr	r4, [r5, #4]
 80064a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0ef      	beq.n	800648a <_fflush_r+0xa>
 80064aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064ac:	07d0      	lsls	r0, r2, #31
 80064ae:	d404      	bmi.n	80064ba <_fflush_r+0x3a>
 80064b0:	0599      	lsls	r1, r3, #22
 80064b2:	d402      	bmi.n	80064ba <_fflush_r+0x3a>
 80064b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b6:	f7ff fc82 	bl	8005dbe <__retarget_lock_acquire_recursive>
 80064ba:	4628      	mov	r0, r5
 80064bc:	4621      	mov	r1, r4
 80064be:	f7ff ff59 	bl	8006374 <__sflush_r>
 80064c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064c4:	07da      	lsls	r2, r3, #31
 80064c6:	4605      	mov	r5, r0
 80064c8:	d4e0      	bmi.n	800648c <_fflush_r+0xc>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	059b      	lsls	r3, r3, #22
 80064ce:	d4dd      	bmi.n	800648c <_fflush_r+0xc>
 80064d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064d2:	f7ff fc75 	bl	8005dc0 <__retarget_lock_release_recursive>
 80064d6:	e7d9      	b.n	800648c <_fflush_r+0xc>
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <_fflush_r+0x70>)
 80064da:	429c      	cmp	r4, r3
 80064dc:	d101      	bne.n	80064e2 <_fflush_r+0x62>
 80064de:	68ac      	ldr	r4, [r5, #8]
 80064e0:	e7df      	b.n	80064a2 <_fflush_r+0x22>
 80064e2:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <_fflush_r+0x74>)
 80064e4:	429c      	cmp	r4, r3
 80064e6:	bf08      	it	eq
 80064e8:	68ec      	ldreq	r4, [r5, #12]
 80064ea:	e7da      	b.n	80064a2 <_fflush_r+0x22>
 80064ec:	08006e74 	.word	0x08006e74
 80064f0:	08006e94 	.word	0x08006e94
 80064f4:	08006e54 	.word	0x08006e54

080064f8 <_lseek_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d07      	ldr	r5, [pc, #28]	; (8006518 <_lseek_r+0x20>)
 80064fc:	4604      	mov	r4, r0
 80064fe:	4608      	mov	r0, r1
 8006500:	4611      	mov	r1, r2
 8006502:	2200      	movs	r2, #0
 8006504:	602a      	str	r2, [r5, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f7fa fa67 	bl	80009da <_lseek>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_lseek_r+0x1e>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_lseek_r+0x1e>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20001b7c 	.word	0x20001b7c

0800651c <__swhatbuf_r>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	460e      	mov	r6, r1
 8006520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006524:	2900      	cmp	r1, #0
 8006526:	b096      	sub	sp, #88	; 0x58
 8006528:	4614      	mov	r4, r2
 800652a:	461d      	mov	r5, r3
 800652c:	da08      	bge.n	8006540 <__swhatbuf_r+0x24>
 800652e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	602a      	str	r2, [r5, #0]
 8006536:	061a      	lsls	r2, r3, #24
 8006538:	d410      	bmi.n	800655c <__swhatbuf_r+0x40>
 800653a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800653e:	e00e      	b.n	800655e <__swhatbuf_r+0x42>
 8006540:	466a      	mov	r2, sp
 8006542:	f000 fba9 	bl	8006c98 <_fstat_r>
 8006546:	2800      	cmp	r0, #0
 8006548:	dbf1      	blt.n	800652e <__swhatbuf_r+0x12>
 800654a:	9a01      	ldr	r2, [sp, #4]
 800654c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006554:	425a      	negs	r2, r3
 8006556:	415a      	adcs	r2, r3
 8006558:	602a      	str	r2, [r5, #0]
 800655a:	e7ee      	b.n	800653a <__swhatbuf_r+0x1e>
 800655c:	2340      	movs	r3, #64	; 0x40
 800655e:	2000      	movs	r0, #0
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	b016      	add	sp, #88	; 0x58
 8006564:	bd70      	pop	{r4, r5, r6, pc}
	...

08006568 <__smakebuf_r>:
 8006568:	898b      	ldrh	r3, [r1, #12]
 800656a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800656c:	079d      	lsls	r5, r3, #30
 800656e:	4606      	mov	r6, r0
 8006570:	460c      	mov	r4, r1
 8006572:	d507      	bpl.n	8006584 <__smakebuf_r+0x1c>
 8006574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	2301      	movs	r3, #1
 800657e:	6163      	str	r3, [r4, #20]
 8006580:	b002      	add	sp, #8
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	ab01      	add	r3, sp, #4
 8006586:	466a      	mov	r2, sp
 8006588:	f7ff ffc8 	bl	800651c <__swhatbuf_r>
 800658c:	9900      	ldr	r1, [sp, #0]
 800658e:	4605      	mov	r5, r0
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff fc4d 	bl	8005e30 <_malloc_r>
 8006596:	b948      	cbnz	r0, 80065ac <__smakebuf_r+0x44>
 8006598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800659c:	059a      	lsls	r2, r3, #22
 800659e:	d4ef      	bmi.n	8006580 <__smakebuf_r+0x18>
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	f043 0302 	orr.w	r3, r3, #2
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	e7e3      	b.n	8006574 <__smakebuf_r+0xc>
 80065ac:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <__smakebuf_r+0x7c>)
 80065ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	6020      	str	r0, [r4, #0]
 80065b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b8:	81a3      	strh	r3, [r4, #12]
 80065ba:	9b00      	ldr	r3, [sp, #0]
 80065bc:	6163      	str	r3, [r4, #20]
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	6120      	str	r0, [r4, #16]
 80065c2:	b15b      	cbz	r3, 80065dc <__smakebuf_r+0x74>
 80065c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 fb77 	bl	8006cbc <_isatty_r>
 80065ce:	b128      	cbz	r0, 80065dc <__smakebuf_r+0x74>
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	81a3      	strh	r3, [r4, #12]
 80065dc:	89a0      	ldrh	r0, [r4, #12]
 80065de:	4305      	orrs	r5, r0
 80065e0:	81a5      	strh	r5, [r4, #12]
 80065e2:	e7cd      	b.n	8006580 <__smakebuf_r+0x18>
 80065e4:	08005bd1 	.word	0x08005bd1

080065e8 <__malloc_lock>:
 80065e8:	4801      	ldr	r0, [pc, #4]	; (80065f0 <__malloc_lock+0x8>)
 80065ea:	f7ff bbe8 	b.w	8005dbe <__retarget_lock_acquire_recursive>
 80065ee:	bf00      	nop
 80065f0:	20001b70 	.word	0x20001b70

080065f4 <__malloc_unlock>:
 80065f4:	4801      	ldr	r0, [pc, #4]	; (80065fc <__malloc_unlock+0x8>)
 80065f6:	f7ff bbe3 	b.w	8005dc0 <__retarget_lock_release_recursive>
 80065fa:	bf00      	nop
 80065fc:	20001b70 	.word	0x20001b70

08006600 <_free_r>:
 8006600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006602:	2900      	cmp	r1, #0
 8006604:	d044      	beq.n	8006690 <_free_r+0x90>
 8006606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660a:	9001      	str	r0, [sp, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	f1a1 0404 	sub.w	r4, r1, #4
 8006612:	bfb8      	it	lt
 8006614:	18e4      	addlt	r4, r4, r3
 8006616:	f7ff ffe7 	bl	80065e8 <__malloc_lock>
 800661a:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <_free_r+0x94>)
 800661c:	9801      	ldr	r0, [sp, #4]
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	b933      	cbnz	r3, 8006630 <_free_r+0x30>
 8006622:	6063      	str	r3, [r4, #4]
 8006624:	6014      	str	r4, [r2, #0]
 8006626:	b003      	add	sp, #12
 8006628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800662c:	f7ff bfe2 	b.w	80065f4 <__malloc_unlock>
 8006630:	42a3      	cmp	r3, r4
 8006632:	d908      	bls.n	8006646 <_free_r+0x46>
 8006634:	6825      	ldr	r5, [r4, #0]
 8006636:	1961      	adds	r1, r4, r5
 8006638:	428b      	cmp	r3, r1
 800663a:	bf01      	itttt	eq
 800663c:	6819      	ldreq	r1, [r3, #0]
 800663e:	685b      	ldreq	r3, [r3, #4]
 8006640:	1949      	addeq	r1, r1, r5
 8006642:	6021      	streq	r1, [r4, #0]
 8006644:	e7ed      	b.n	8006622 <_free_r+0x22>
 8006646:	461a      	mov	r2, r3
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	b10b      	cbz	r3, 8006650 <_free_r+0x50>
 800664c:	42a3      	cmp	r3, r4
 800664e:	d9fa      	bls.n	8006646 <_free_r+0x46>
 8006650:	6811      	ldr	r1, [r2, #0]
 8006652:	1855      	adds	r5, r2, r1
 8006654:	42a5      	cmp	r5, r4
 8006656:	d10b      	bne.n	8006670 <_free_r+0x70>
 8006658:	6824      	ldr	r4, [r4, #0]
 800665a:	4421      	add	r1, r4
 800665c:	1854      	adds	r4, r2, r1
 800665e:	42a3      	cmp	r3, r4
 8006660:	6011      	str	r1, [r2, #0]
 8006662:	d1e0      	bne.n	8006626 <_free_r+0x26>
 8006664:	681c      	ldr	r4, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	6053      	str	r3, [r2, #4]
 800666a:	4421      	add	r1, r4
 800666c:	6011      	str	r1, [r2, #0]
 800666e:	e7da      	b.n	8006626 <_free_r+0x26>
 8006670:	d902      	bls.n	8006678 <_free_r+0x78>
 8006672:	230c      	movs	r3, #12
 8006674:	6003      	str	r3, [r0, #0]
 8006676:	e7d6      	b.n	8006626 <_free_r+0x26>
 8006678:	6825      	ldr	r5, [r4, #0]
 800667a:	1961      	adds	r1, r4, r5
 800667c:	428b      	cmp	r3, r1
 800667e:	bf04      	itt	eq
 8006680:	6819      	ldreq	r1, [r3, #0]
 8006682:	685b      	ldreq	r3, [r3, #4]
 8006684:	6063      	str	r3, [r4, #4]
 8006686:	bf04      	itt	eq
 8006688:	1949      	addeq	r1, r1, r5
 800668a:	6021      	streq	r1, [r4, #0]
 800668c:	6054      	str	r4, [r2, #4]
 800668e:	e7ca      	b.n	8006626 <_free_r+0x26>
 8006690:	b003      	add	sp, #12
 8006692:	bd30      	pop	{r4, r5, pc}
 8006694:	20001b74 	.word	0x20001b74

08006698 <__sfputc_r>:
 8006698:	6893      	ldr	r3, [r2, #8]
 800669a:	3b01      	subs	r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	b410      	push	{r4}
 80066a0:	6093      	str	r3, [r2, #8]
 80066a2:	da08      	bge.n	80066b6 <__sfputc_r+0x1e>
 80066a4:	6994      	ldr	r4, [r2, #24]
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	db01      	blt.n	80066ae <__sfputc_r+0x16>
 80066aa:	290a      	cmp	r1, #10
 80066ac:	d103      	bne.n	80066b6 <__sfputc_r+0x1e>
 80066ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b2:	f7ff bd7d 	b.w	80061b0 <__swbuf_r>
 80066b6:	6813      	ldr	r3, [r2, #0]
 80066b8:	1c58      	adds	r0, r3, #1
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	7019      	strb	r1, [r3, #0]
 80066be:	4608      	mov	r0, r1
 80066c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <__sfputs_r>:
 80066c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c8:	4606      	mov	r6, r0
 80066ca:	460f      	mov	r7, r1
 80066cc:	4614      	mov	r4, r2
 80066ce:	18d5      	adds	r5, r2, r3
 80066d0:	42ac      	cmp	r4, r5
 80066d2:	d101      	bne.n	80066d8 <__sfputs_r+0x12>
 80066d4:	2000      	movs	r0, #0
 80066d6:	e007      	b.n	80066e8 <__sfputs_r+0x22>
 80066d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066dc:	463a      	mov	r2, r7
 80066de:	4630      	mov	r0, r6
 80066e0:	f7ff ffda 	bl	8006698 <__sfputc_r>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d1f3      	bne.n	80066d0 <__sfputs_r+0xa>
 80066e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066ec <_vfiprintf_r>:
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	460d      	mov	r5, r1
 80066f2:	b09d      	sub	sp, #116	; 0x74
 80066f4:	4614      	mov	r4, r2
 80066f6:	4698      	mov	r8, r3
 80066f8:	4606      	mov	r6, r0
 80066fa:	b118      	cbz	r0, 8006704 <_vfiprintf_r+0x18>
 80066fc:	6983      	ldr	r3, [r0, #24]
 80066fe:	b90b      	cbnz	r3, 8006704 <_vfiprintf_r+0x18>
 8006700:	f7ff fa9a 	bl	8005c38 <__sinit>
 8006704:	4b89      	ldr	r3, [pc, #548]	; (800692c <_vfiprintf_r+0x240>)
 8006706:	429d      	cmp	r5, r3
 8006708:	d11b      	bne.n	8006742 <_vfiprintf_r+0x56>
 800670a:	6875      	ldr	r5, [r6, #4]
 800670c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800670e:	07d9      	lsls	r1, r3, #31
 8006710:	d405      	bmi.n	800671e <_vfiprintf_r+0x32>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	059a      	lsls	r2, r3, #22
 8006716:	d402      	bmi.n	800671e <_vfiprintf_r+0x32>
 8006718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800671a:	f7ff fb50 	bl	8005dbe <__retarget_lock_acquire_recursive>
 800671e:	89ab      	ldrh	r3, [r5, #12]
 8006720:	071b      	lsls	r3, r3, #28
 8006722:	d501      	bpl.n	8006728 <_vfiprintf_r+0x3c>
 8006724:	692b      	ldr	r3, [r5, #16]
 8006726:	b9eb      	cbnz	r3, 8006764 <_vfiprintf_r+0x78>
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff fda4 	bl	8006278 <__swsetup_r>
 8006730:	b1c0      	cbz	r0, 8006764 <_vfiprintf_r+0x78>
 8006732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006734:	07dc      	lsls	r4, r3, #31
 8006736:	d50e      	bpl.n	8006756 <_vfiprintf_r+0x6a>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	b01d      	add	sp, #116	; 0x74
 800673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006742:	4b7b      	ldr	r3, [pc, #492]	; (8006930 <_vfiprintf_r+0x244>)
 8006744:	429d      	cmp	r5, r3
 8006746:	d101      	bne.n	800674c <_vfiprintf_r+0x60>
 8006748:	68b5      	ldr	r5, [r6, #8]
 800674a:	e7df      	b.n	800670c <_vfiprintf_r+0x20>
 800674c:	4b79      	ldr	r3, [pc, #484]	; (8006934 <_vfiprintf_r+0x248>)
 800674e:	429d      	cmp	r5, r3
 8006750:	bf08      	it	eq
 8006752:	68f5      	ldreq	r5, [r6, #12]
 8006754:	e7da      	b.n	800670c <_vfiprintf_r+0x20>
 8006756:	89ab      	ldrh	r3, [r5, #12]
 8006758:	0598      	lsls	r0, r3, #22
 800675a:	d4ed      	bmi.n	8006738 <_vfiprintf_r+0x4c>
 800675c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800675e:	f7ff fb2f 	bl	8005dc0 <__retarget_lock_release_recursive>
 8006762:	e7e9      	b.n	8006738 <_vfiprintf_r+0x4c>
 8006764:	2300      	movs	r3, #0
 8006766:	9309      	str	r3, [sp, #36]	; 0x24
 8006768:	2320      	movs	r3, #32
 800676a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800676e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006772:	2330      	movs	r3, #48	; 0x30
 8006774:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006938 <_vfiprintf_r+0x24c>
 8006778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800677c:	f04f 0901 	mov.w	r9, #1
 8006780:	4623      	mov	r3, r4
 8006782:	469a      	mov	sl, r3
 8006784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006788:	b10a      	cbz	r2, 800678e <_vfiprintf_r+0xa2>
 800678a:	2a25      	cmp	r2, #37	; 0x25
 800678c:	d1f9      	bne.n	8006782 <_vfiprintf_r+0x96>
 800678e:	ebba 0b04 	subs.w	fp, sl, r4
 8006792:	d00b      	beq.n	80067ac <_vfiprintf_r+0xc0>
 8006794:	465b      	mov	r3, fp
 8006796:	4622      	mov	r2, r4
 8006798:	4629      	mov	r1, r5
 800679a:	4630      	mov	r0, r6
 800679c:	f7ff ff93 	bl	80066c6 <__sfputs_r>
 80067a0:	3001      	adds	r0, #1
 80067a2:	f000 80aa 	beq.w	80068fa <_vfiprintf_r+0x20e>
 80067a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a8:	445a      	add	r2, fp
 80067aa:	9209      	str	r2, [sp, #36]	; 0x24
 80067ac:	f89a 3000 	ldrb.w	r3, [sl]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80a2 	beq.w	80068fa <_vfiprintf_r+0x20e>
 80067b6:	2300      	movs	r3, #0
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295
 80067bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067c0:	f10a 0a01 	add.w	sl, sl, #1
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067cc:	931a      	str	r3, [sp, #104]	; 0x68
 80067ce:	4654      	mov	r4, sl
 80067d0:	2205      	movs	r2, #5
 80067d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d6:	4858      	ldr	r0, [pc, #352]	; (8006938 <_vfiprintf_r+0x24c>)
 80067d8:	f7f9 fd22 	bl	8000220 <memchr>
 80067dc:	9a04      	ldr	r2, [sp, #16]
 80067de:	b9d8      	cbnz	r0, 8006818 <_vfiprintf_r+0x12c>
 80067e0:	06d1      	lsls	r1, r2, #27
 80067e2:	bf44      	itt	mi
 80067e4:	2320      	movmi	r3, #32
 80067e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ea:	0713      	lsls	r3, r2, #28
 80067ec:	bf44      	itt	mi
 80067ee:	232b      	movmi	r3, #43	; 0x2b
 80067f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f4:	f89a 3000 	ldrb.w	r3, [sl]
 80067f8:	2b2a      	cmp	r3, #42	; 0x2a
 80067fa:	d015      	beq.n	8006828 <_vfiprintf_r+0x13c>
 80067fc:	9a07      	ldr	r2, [sp, #28]
 80067fe:	4654      	mov	r4, sl
 8006800:	2000      	movs	r0, #0
 8006802:	f04f 0c0a 	mov.w	ip, #10
 8006806:	4621      	mov	r1, r4
 8006808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800680c:	3b30      	subs	r3, #48	; 0x30
 800680e:	2b09      	cmp	r3, #9
 8006810:	d94e      	bls.n	80068b0 <_vfiprintf_r+0x1c4>
 8006812:	b1b0      	cbz	r0, 8006842 <_vfiprintf_r+0x156>
 8006814:	9207      	str	r2, [sp, #28]
 8006816:	e014      	b.n	8006842 <_vfiprintf_r+0x156>
 8006818:	eba0 0308 	sub.w	r3, r0, r8
 800681c:	fa09 f303 	lsl.w	r3, r9, r3
 8006820:	4313      	orrs	r3, r2
 8006822:	9304      	str	r3, [sp, #16]
 8006824:	46a2      	mov	sl, r4
 8006826:	e7d2      	b.n	80067ce <_vfiprintf_r+0xe2>
 8006828:	9b03      	ldr	r3, [sp, #12]
 800682a:	1d19      	adds	r1, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	9103      	str	r1, [sp, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfbb      	ittet	lt
 8006834:	425b      	neglt	r3, r3
 8006836:	f042 0202 	orrlt.w	r2, r2, #2
 800683a:	9307      	strge	r3, [sp, #28]
 800683c:	9307      	strlt	r3, [sp, #28]
 800683e:	bfb8      	it	lt
 8006840:	9204      	strlt	r2, [sp, #16]
 8006842:	7823      	ldrb	r3, [r4, #0]
 8006844:	2b2e      	cmp	r3, #46	; 0x2e
 8006846:	d10c      	bne.n	8006862 <_vfiprintf_r+0x176>
 8006848:	7863      	ldrb	r3, [r4, #1]
 800684a:	2b2a      	cmp	r3, #42	; 0x2a
 800684c:	d135      	bne.n	80068ba <_vfiprintf_r+0x1ce>
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	1d1a      	adds	r2, r3, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	9203      	str	r2, [sp, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfb8      	it	lt
 800685a:	f04f 33ff 	movlt.w	r3, #4294967295
 800685e:	3402      	adds	r4, #2
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006948 <_vfiprintf_r+0x25c>
 8006866:	7821      	ldrb	r1, [r4, #0]
 8006868:	2203      	movs	r2, #3
 800686a:	4650      	mov	r0, sl
 800686c:	f7f9 fcd8 	bl	8000220 <memchr>
 8006870:	b140      	cbz	r0, 8006884 <_vfiprintf_r+0x198>
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	eba0 000a 	sub.w	r0, r0, sl
 8006878:	fa03 f000 	lsl.w	r0, r3, r0
 800687c:	9b04      	ldr	r3, [sp, #16]
 800687e:	4303      	orrs	r3, r0
 8006880:	3401      	adds	r4, #1
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006888:	482c      	ldr	r0, [pc, #176]	; (800693c <_vfiprintf_r+0x250>)
 800688a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800688e:	2206      	movs	r2, #6
 8006890:	f7f9 fcc6 	bl	8000220 <memchr>
 8006894:	2800      	cmp	r0, #0
 8006896:	d03f      	beq.n	8006918 <_vfiprintf_r+0x22c>
 8006898:	4b29      	ldr	r3, [pc, #164]	; (8006940 <_vfiprintf_r+0x254>)
 800689a:	bb1b      	cbnz	r3, 80068e4 <_vfiprintf_r+0x1f8>
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	3307      	adds	r3, #7
 80068a0:	f023 0307 	bic.w	r3, r3, #7
 80068a4:	3308      	adds	r3, #8
 80068a6:	9303      	str	r3, [sp, #12]
 80068a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068aa:	443b      	add	r3, r7
 80068ac:	9309      	str	r3, [sp, #36]	; 0x24
 80068ae:	e767      	b.n	8006780 <_vfiprintf_r+0x94>
 80068b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068b4:	460c      	mov	r4, r1
 80068b6:	2001      	movs	r0, #1
 80068b8:	e7a5      	b.n	8006806 <_vfiprintf_r+0x11a>
 80068ba:	2300      	movs	r3, #0
 80068bc:	3401      	adds	r4, #1
 80068be:	9305      	str	r3, [sp, #20]
 80068c0:	4619      	mov	r1, r3
 80068c2:	f04f 0c0a 	mov.w	ip, #10
 80068c6:	4620      	mov	r0, r4
 80068c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068cc:	3a30      	subs	r2, #48	; 0x30
 80068ce:	2a09      	cmp	r2, #9
 80068d0:	d903      	bls.n	80068da <_vfiprintf_r+0x1ee>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0c5      	beq.n	8006862 <_vfiprintf_r+0x176>
 80068d6:	9105      	str	r1, [sp, #20]
 80068d8:	e7c3      	b.n	8006862 <_vfiprintf_r+0x176>
 80068da:	fb0c 2101 	mla	r1, ip, r1, r2
 80068de:	4604      	mov	r4, r0
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7f0      	b.n	80068c6 <_vfiprintf_r+0x1da>
 80068e4:	ab03      	add	r3, sp, #12
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	462a      	mov	r2, r5
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <_vfiprintf_r+0x258>)
 80068ec:	a904      	add	r1, sp, #16
 80068ee:	4630      	mov	r0, r6
 80068f0:	f3af 8000 	nop.w
 80068f4:	4607      	mov	r7, r0
 80068f6:	1c78      	adds	r0, r7, #1
 80068f8:	d1d6      	bne.n	80068a8 <_vfiprintf_r+0x1bc>
 80068fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068fc:	07d9      	lsls	r1, r3, #31
 80068fe:	d405      	bmi.n	800690c <_vfiprintf_r+0x220>
 8006900:	89ab      	ldrh	r3, [r5, #12]
 8006902:	059a      	lsls	r2, r3, #22
 8006904:	d402      	bmi.n	800690c <_vfiprintf_r+0x220>
 8006906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006908:	f7ff fa5a 	bl	8005dc0 <__retarget_lock_release_recursive>
 800690c:	89ab      	ldrh	r3, [r5, #12]
 800690e:	065b      	lsls	r3, r3, #25
 8006910:	f53f af12 	bmi.w	8006738 <_vfiprintf_r+0x4c>
 8006914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006916:	e711      	b.n	800673c <_vfiprintf_r+0x50>
 8006918:	ab03      	add	r3, sp, #12
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	462a      	mov	r2, r5
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <_vfiprintf_r+0x258>)
 8006920:	a904      	add	r1, sp, #16
 8006922:	4630      	mov	r0, r6
 8006924:	f000 f880 	bl	8006a28 <_printf_i>
 8006928:	e7e4      	b.n	80068f4 <_vfiprintf_r+0x208>
 800692a:	bf00      	nop
 800692c:	08006e74 	.word	0x08006e74
 8006930:	08006e94 	.word	0x08006e94
 8006934:	08006e54 	.word	0x08006e54
 8006938:	08006eb8 	.word	0x08006eb8
 800693c:	08006ec2 	.word	0x08006ec2
 8006940:	00000000 	.word	0x00000000
 8006944:	080066c7 	.word	0x080066c7
 8006948:	08006ebe 	.word	0x08006ebe

0800694c <_printf_common>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	4616      	mov	r6, r2
 8006952:	4699      	mov	r9, r3
 8006954:	688a      	ldr	r2, [r1, #8]
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800695c:	4293      	cmp	r3, r2
 800695e:	bfb8      	it	lt
 8006960:	4613      	movlt	r3, r2
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006968:	4607      	mov	r7, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b10a      	cbz	r2, 8006972 <_printf_common+0x26>
 800696e:	3301      	adds	r3, #1
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	0699      	lsls	r1, r3, #26
 8006976:	bf42      	ittt	mi
 8006978:	6833      	ldrmi	r3, [r6, #0]
 800697a:	3302      	addmi	r3, #2
 800697c:	6033      	strmi	r3, [r6, #0]
 800697e:	6825      	ldr	r5, [r4, #0]
 8006980:	f015 0506 	ands.w	r5, r5, #6
 8006984:	d106      	bne.n	8006994 <_printf_common+0x48>
 8006986:	f104 0a19 	add.w	sl, r4, #25
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	6832      	ldr	r2, [r6, #0]
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	42ab      	cmp	r3, r5
 8006992:	dc26      	bgt.n	80069e2 <_printf_common+0x96>
 8006994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006998:	1e13      	subs	r3, r2, #0
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	bf18      	it	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	0692      	lsls	r2, r2, #26
 80069a2:	d42b      	bmi.n	80069fc <_printf_common+0xb0>
 80069a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a8:	4649      	mov	r1, r9
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d01e      	beq.n	80069f0 <_printf_common+0xa4>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	68e5      	ldr	r5, [r4, #12]
 80069b6:	6832      	ldr	r2, [r6, #0]
 80069b8:	f003 0306 	and.w	r3, r3, #6
 80069bc:	2b04      	cmp	r3, #4
 80069be:	bf08      	it	eq
 80069c0:	1aad      	subeq	r5, r5, r2
 80069c2:	68a3      	ldr	r3, [r4, #8]
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	bf0c      	ite	eq
 80069c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069cc:	2500      	movne	r5, #0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	bfc4      	itt	gt
 80069d2:	1a9b      	subgt	r3, r3, r2
 80069d4:	18ed      	addgt	r5, r5, r3
 80069d6:	2600      	movs	r6, #0
 80069d8:	341a      	adds	r4, #26
 80069da:	42b5      	cmp	r5, r6
 80069dc:	d11a      	bne.n	8006a14 <_printf_common+0xc8>
 80069de:	2000      	movs	r0, #0
 80069e0:	e008      	b.n	80069f4 <_printf_common+0xa8>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4649      	mov	r1, r9
 80069e8:	4638      	mov	r0, r7
 80069ea:	47c0      	blx	r8
 80069ec:	3001      	adds	r0, #1
 80069ee:	d103      	bne.n	80069f8 <_printf_common+0xac>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f8:	3501      	adds	r5, #1
 80069fa:	e7c6      	b.n	800698a <_printf_common+0x3e>
 80069fc:	18e1      	adds	r1, r4, r3
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	2030      	movs	r0, #48	; 0x30
 8006a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a06:	4422      	add	r2, r4
 8006a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a10:	3302      	adds	r3, #2
 8006a12:	e7c7      	b.n	80069a4 <_printf_common+0x58>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4622      	mov	r2, r4
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c0      	blx	r8
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa4>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d9      	b.n	80069da <_printf_common+0x8e>
	...

08006a28 <_printf_i>:
 8006a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	7e0f      	ldrb	r7, [r1, #24]
 8006a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a30:	2f78      	cmp	r7, #120	; 0x78
 8006a32:	4691      	mov	r9, r2
 8006a34:	4680      	mov	r8, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a3e:	d807      	bhi.n	8006a50 <_printf_i+0x28>
 8006a40:	2f62      	cmp	r7, #98	; 0x62
 8006a42:	d80a      	bhi.n	8006a5a <_printf_i+0x32>
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	f000 80d8 	beq.w	8006bfa <_printf_i+0x1d2>
 8006a4a:	2f58      	cmp	r7, #88	; 0x58
 8006a4c:	f000 80a3 	beq.w	8006b96 <_printf_i+0x16e>
 8006a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a58:	e03a      	b.n	8006ad0 <_printf_i+0xa8>
 8006a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a5e:	2b15      	cmp	r3, #21
 8006a60:	d8f6      	bhi.n	8006a50 <_printf_i+0x28>
 8006a62:	a101      	add	r1, pc, #4	; (adr r1, 8006a68 <_printf_i+0x40>)
 8006a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006a51 	.word	0x08006a51
 8006a74:	08006a51 	.word	0x08006a51
 8006a78:	08006a51 	.word	0x08006a51
 8006a7c:	08006a51 	.word	0x08006a51
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a51 	.word	0x08006a51
 8006a88:	08006a51 	.word	0x08006a51
 8006a8c:	08006a51 	.word	0x08006a51
 8006a90:	08006a51 	.word	0x08006a51
 8006a94:	08006be1 	.word	0x08006be1
 8006a98:	08006b05 	.word	0x08006b05
 8006a9c:	08006bc3 	.word	0x08006bc3
 8006aa0:	08006a51 	.word	0x08006a51
 8006aa4:	08006a51 	.word	0x08006a51
 8006aa8:	08006c03 	.word	0x08006c03
 8006aac:	08006a51 	.word	0x08006a51
 8006ab0:	08006b05 	.word	0x08006b05
 8006ab4:	08006a51 	.word	0x08006a51
 8006ab8:	08006a51 	.word	0x08006a51
 8006abc:	08006bcb 	.word	0x08006bcb
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0a3      	b.n	8006c1c <_printf_i+0x1f4>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	6829      	ldr	r1, [r5, #0]
 8006ad8:	0606      	lsls	r6, r0, #24
 8006ada:	f101 0304 	add.w	r3, r1, #4
 8006ade:	d50a      	bpl.n	8006af6 <_printf_i+0xce>
 8006ae0:	680e      	ldr	r6, [r1, #0]
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	2e00      	cmp	r6, #0
 8006ae6:	da03      	bge.n	8006af0 <_printf_i+0xc8>
 8006ae8:	232d      	movs	r3, #45	; 0x2d
 8006aea:	4276      	negs	r6, r6
 8006aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af0:	485e      	ldr	r0, [pc, #376]	; (8006c6c <_printf_i+0x244>)
 8006af2:	230a      	movs	r3, #10
 8006af4:	e019      	b.n	8006b2a <_printf_i+0x102>
 8006af6:	680e      	ldr	r6, [r1, #0]
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006afe:	bf18      	it	ne
 8006b00:	b236      	sxthne	r6, r6
 8006b02:	e7ef      	b.n	8006ae4 <_printf_i+0xbc>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	1d19      	adds	r1, r3, #4
 8006b0a:	6029      	str	r1, [r5, #0]
 8006b0c:	0601      	lsls	r1, r0, #24
 8006b0e:	d501      	bpl.n	8006b14 <_printf_i+0xec>
 8006b10:	681e      	ldr	r6, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <_printf_i+0xf2>
 8006b14:	0646      	lsls	r6, r0, #25
 8006b16:	d5fb      	bpl.n	8006b10 <_printf_i+0xe8>
 8006b18:	881e      	ldrh	r6, [r3, #0]
 8006b1a:	4854      	ldr	r0, [pc, #336]	; (8006c6c <_printf_i+0x244>)
 8006b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b1e:	bf0c      	ite	eq
 8006b20:	2308      	moveq	r3, #8
 8006b22:	230a      	movne	r3, #10
 8006b24:	2100      	movs	r1, #0
 8006b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b2a:	6865      	ldr	r5, [r4, #4]
 8006b2c:	60a5      	str	r5, [r4, #8]
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	bfa2      	ittt	ge
 8006b32:	6821      	ldrge	r1, [r4, #0]
 8006b34:	f021 0104 	bicge.w	r1, r1, #4
 8006b38:	6021      	strge	r1, [r4, #0]
 8006b3a:	b90e      	cbnz	r6, 8006b40 <_printf_i+0x118>
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	d04d      	beq.n	8006bdc <_printf_i+0x1b4>
 8006b40:	4615      	mov	r5, r2
 8006b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b46:	fb03 6711 	mls	r7, r3, r1, r6
 8006b4a:	5dc7      	ldrb	r7, [r0, r7]
 8006b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b50:	4637      	mov	r7, r6
 8006b52:	42bb      	cmp	r3, r7
 8006b54:	460e      	mov	r6, r1
 8006b56:	d9f4      	bls.n	8006b42 <_printf_i+0x11a>
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d10b      	bne.n	8006b74 <_printf_i+0x14c>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07de      	lsls	r6, r3, #31
 8006b60:	d508      	bpl.n	8006b74 <_printf_i+0x14c>
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	6861      	ldr	r1, [r4, #4]
 8006b66:	4299      	cmp	r1, r3
 8006b68:	bfde      	ittt	le
 8006b6a:	2330      	movle	r3, #48	; 0x30
 8006b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b74:	1b52      	subs	r2, r2, r5
 8006b76:	6122      	str	r2, [r4, #16]
 8006b78:	f8cd a000 	str.w	sl, [sp]
 8006b7c:	464b      	mov	r3, r9
 8006b7e:	aa03      	add	r2, sp, #12
 8006b80:	4621      	mov	r1, r4
 8006b82:	4640      	mov	r0, r8
 8006b84:	f7ff fee2 	bl	800694c <_printf_common>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d14c      	bne.n	8006c26 <_printf_i+0x1fe>
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	b004      	add	sp, #16
 8006b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b96:	4835      	ldr	r0, [pc, #212]	; (8006c6c <_printf_i+0x244>)
 8006b98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b9c:	6829      	ldr	r1, [r5, #0]
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ba4:	6029      	str	r1, [r5, #0]
 8006ba6:	061d      	lsls	r5, r3, #24
 8006ba8:	d514      	bpl.n	8006bd4 <_printf_i+0x1ac>
 8006baa:	07df      	lsls	r7, r3, #31
 8006bac:	bf44      	itt	mi
 8006bae:	f043 0320 	orrmi.w	r3, r3, #32
 8006bb2:	6023      	strmi	r3, [r4, #0]
 8006bb4:	b91e      	cbnz	r6, 8006bbe <_printf_i+0x196>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f023 0320 	bic.w	r3, r3, #32
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	2310      	movs	r3, #16
 8006bc0:	e7b0      	b.n	8006b24 <_printf_i+0xfc>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	f043 0320 	orr.w	r3, r3, #32
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	2378      	movs	r3, #120	; 0x78
 8006bcc:	4828      	ldr	r0, [pc, #160]	; (8006c70 <_printf_i+0x248>)
 8006bce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bd2:	e7e3      	b.n	8006b9c <_printf_i+0x174>
 8006bd4:	0659      	lsls	r1, r3, #25
 8006bd6:	bf48      	it	mi
 8006bd8:	b2b6      	uxthmi	r6, r6
 8006bda:	e7e6      	b.n	8006baa <_printf_i+0x182>
 8006bdc:	4615      	mov	r5, r2
 8006bde:	e7bb      	b.n	8006b58 <_printf_i+0x130>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	6826      	ldr	r6, [r4, #0]
 8006be4:	6961      	ldr	r1, [r4, #20]
 8006be6:	1d18      	adds	r0, r3, #4
 8006be8:	6028      	str	r0, [r5, #0]
 8006bea:	0635      	lsls	r5, r6, #24
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	d501      	bpl.n	8006bf4 <_printf_i+0x1cc>
 8006bf0:	6019      	str	r1, [r3, #0]
 8006bf2:	e002      	b.n	8006bfa <_printf_i+0x1d2>
 8006bf4:	0670      	lsls	r0, r6, #25
 8006bf6:	d5fb      	bpl.n	8006bf0 <_printf_i+0x1c8>
 8006bf8:	8019      	strh	r1, [r3, #0]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	4615      	mov	r5, r2
 8006c00:	e7ba      	b.n	8006b78 <_printf_i+0x150>
 8006c02:	682b      	ldr	r3, [r5, #0]
 8006c04:	1d1a      	adds	r2, r3, #4
 8006c06:	602a      	str	r2, [r5, #0]
 8006c08:	681d      	ldr	r5, [r3, #0]
 8006c0a:	6862      	ldr	r2, [r4, #4]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f7f9 fb06 	bl	8000220 <memchr>
 8006c14:	b108      	cbz	r0, 8006c1a <_printf_i+0x1f2>
 8006c16:	1b40      	subs	r0, r0, r5
 8006c18:	6060      	str	r0, [r4, #4]
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c24:	e7a8      	b.n	8006b78 <_printf_i+0x150>
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	462a      	mov	r2, r5
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	47d0      	blx	sl
 8006c30:	3001      	adds	r0, #1
 8006c32:	d0ab      	beq.n	8006b8c <_printf_i+0x164>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	079b      	lsls	r3, r3, #30
 8006c38:	d413      	bmi.n	8006c62 <_printf_i+0x23a>
 8006c3a:	68e0      	ldr	r0, [r4, #12]
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	bfb8      	it	lt
 8006c42:	4618      	movlt	r0, r3
 8006c44:	e7a4      	b.n	8006b90 <_printf_i+0x168>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4632      	mov	r2, r6
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	47d0      	blx	sl
 8006c50:	3001      	adds	r0, #1
 8006c52:	d09b      	beq.n	8006b8c <_printf_i+0x164>
 8006c54:	3501      	adds	r5, #1
 8006c56:	68e3      	ldr	r3, [r4, #12]
 8006c58:	9903      	ldr	r1, [sp, #12]
 8006c5a:	1a5b      	subs	r3, r3, r1
 8006c5c:	42ab      	cmp	r3, r5
 8006c5e:	dcf2      	bgt.n	8006c46 <_printf_i+0x21e>
 8006c60:	e7eb      	b.n	8006c3a <_printf_i+0x212>
 8006c62:	2500      	movs	r5, #0
 8006c64:	f104 0619 	add.w	r6, r4, #25
 8006c68:	e7f5      	b.n	8006c56 <_printf_i+0x22e>
 8006c6a:	bf00      	nop
 8006c6c:	08006ec9 	.word	0x08006ec9
 8006c70:	08006eda 	.word	0x08006eda

08006c74 <_read_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d07      	ldr	r5, [pc, #28]	; (8006c94 <_read_r+0x20>)
 8006c78:	4604      	mov	r4, r0
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	602a      	str	r2, [r5, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7f9 fe49 	bl	800091a <_read>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_read_r+0x1e>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_read_r+0x1e>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20001b7c 	.word	0x20001b7c

08006c98 <_fstat_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d07      	ldr	r5, [pc, #28]	; (8006cb8 <_fstat_r+0x20>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	f7f9 fe7d 	bl	80009a4 <_fstat>
 8006caa:	1c43      	adds	r3, r0, #1
 8006cac:	d102      	bne.n	8006cb4 <_fstat_r+0x1c>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	b103      	cbz	r3, 8006cb4 <_fstat_r+0x1c>
 8006cb2:	6023      	str	r3, [r4, #0]
 8006cb4:	bd38      	pop	{r3, r4, r5, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20001b7c 	.word	0x20001b7c

08006cbc <_isatty_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d06      	ldr	r5, [pc, #24]	; (8006cd8 <_isatty_r+0x1c>)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	602b      	str	r3, [r5, #0]
 8006cc8:	f7f9 fe7c 	bl	80009c4 <_isatty>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_isatty_r+0x1a>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_isatty_r+0x1a>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20001b7c 	.word	0x20001b7c

08006cdc <_init>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	bf00      	nop
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr

08006ce8 <_fini>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	bf00      	nop
 8006cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cee:	bc08      	pop	{r3}
 8006cf0:	469e      	mov	lr, r3
 8006cf2:	4770      	bx	lr
