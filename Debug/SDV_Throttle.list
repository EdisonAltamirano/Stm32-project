
SDV_Throttle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ac  080061ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080061ac  080061ac  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061ac  080061ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ac  080061ac  000161ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080061b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b04  20000074  08006228  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  08006228  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bdc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003412  00000000  00000000  00038c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b59  00000000  00000000  0003e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151e6  00000000  00000000  00042269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c390d  00000000  00000000  0005744f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ad5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d4  00000000  00000000  0011adac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006078 	.word	0x08006078

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006078 	.word	0x08006078

08000220 <can_init>:
static const uint8_t DS3502_ADDR = 0x27<<1 ;
static const uint8_t DS3502_MODE_WR = 0x80;
static const uint8_t DS3502_MODE_WR_IVR = 0x00;
static const uint8_t DS3502_REG_WR_IVR = 0x00;
static const uint8_t DS3502_REG_CR = 0x02;
void can_init(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0

	FDCAN_FilterTypeDef sFilterConfig;

	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000226:	2300      	movs	r3, #0
 8000228:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800022e:	2302      	movs	r3, #2
 8000230:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000232:	2301      	movs	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x111;
 8000236:	f240 1311 	movw	r3, #273	; 0x111
 800023a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0xFFF;
 800023c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000240:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000242:	463b      	mov	r3, r7
 8000244:	4619      	mov	r1, r3
 8000246:	480f      	ldr	r0, [pc, #60]	; (8000284 <can_init+0x64>)
 8000248:	f000 fe64 	bl	8000f14 <HAL_FDCAN_ConfigFilter>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <can_init+0x36>
	  {
		Error_Handler();
 8000252:	f000 fa01 	bl	8000658 <Error_Handler>
	  }
	  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <can_init+0x64>)
 8000258:	f000 feb6 	bl	8000fc8 <HAL_FDCAN_Start>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <can_init+0x46>
	  {
		  Error_Handler();
 8000262:	f000 f9f9 	bl	8000658 <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000266:	2200      	movs	r2, #0
 8000268:	2101      	movs	r1, #1
 800026a:	4806      	ldr	r0, [pc, #24]	; (8000284 <can_init+0x64>)
 800026c:	f000 fed4 	bl	8001018 <HAL_FDCAN_ActivateNotification>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <can_init+0x5a>
	  {
	    /* Notification Error */
	    Error_Handler();
 8000276:	f000 f9ef 	bl	8000658 <Error_Handler>
	  }
}
 800027a:	bf00      	nop
 800027c:	3718      	adds	r7, #24
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000a4 	.word	0x200000a4

08000288 <pot_init>:
	panel_leds[3]  =led4;
	panel_leds[4]  =led5;
	panel_leds[5]  =led6;
}

bool pot_init(){
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af02      	add	r7, sp, #8
    //@return True if initialization was successful, otherwise false.
    // Tell DS3502 that we want to read from the pot register
	 buf_pot[0] = DS3502_REG_CR;
 800028e:	2202      	movs	r2, #2
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <pot_init+0x60>)
 8000292:	701a      	strb	r2, [r3, #0]
	 HAL_StatusTypeDef  ret = HAL_I2C_Master_Transmit(&hi2c3, DS3502_ADDR, buf_pot, 1, HAL_MAX_DELAY);
 8000294:	234e      	movs	r3, #78	; 0x4e
 8000296:	b299      	uxth	r1, r3
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2301      	movs	r3, #1
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <pot_init+0x60>)
 80002a2:	4812      	ldr	r0, [pc, #72]	; (80002ec <pot_init+0x64>)
 80002a4:	f001 fbb4 	bl	8001a10 <HAL_I2C_Master_Transmit>
 80002a8:	4603      	mov	r3, r0
 80002aa:	71fb      	strb	r3, [r7, #7]
	 if (ret != HAL_OK){
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <pot_init+0x2e>
		 return false;
 80002b2:	2300      	movs	r3, #0
 80002b4:	e014      	b.n	80002e0 <pot_init+0x58>
	 }
	 else{
		 //Write the MODE bit which determines how I2C data is written to the WR and IVR data register
		 buf_pot[0] = DS3502_MODE_WR;
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <pot_init+0x60>)
 80002ba:	701a      	strb	r2, [r3, #0]
		 ret =  HAL_I2C_Master_Transmit(&hi2c3, DS3502_ADDR, buf_pot, 1, HAL_MAX_DELAY);
 80002bc:	234e      	movs	r3, #78	; 0x4e
 80002be:	b299      	uxth	r1, r3
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2301      	movs	r3, #1
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <pot_init+0x60>)
 80002ca:	4808      	ldr	r0, [pc, #32]	; (80002ec <pot_init+0x64>)
 80002cc:	f001 fba0 	bl	8001a10 <HAL_I2C_Master_Transmit>
 80002d0:	4603      	mov	r3, r0
 80002d2:	71fb      	strb	r3, [r7, #7]
		 if (ret != HAL_OK){
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <pot_init+0x56>
		 		 return false;
 80002da:	2300      	movs	r3, #0
 80002dc:	e000      	b.n	80002e0 <pot_init+0x58>
		 	 }
		 else{
			 return true;
 80002de:	2301      	movs	r3, #1
		 }
	 }
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000098 	.word	0x20000098
 80002ec:	20000108 	.word	0x20000108

080002f0 <getWiper>:

bool getWiper(uint8_t reg,uint8_t *data){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af02      	add	r7, sp, #8
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
	 buf_pot[0] = reg;
 80002fc:	4a13      	ldr	r2, [pc, #76]	; (800034c <getWiper+0x5c>)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	7013      	strb	r3, [r2, #0]
	 HAL_StatusTypeDef  ret = HAL_I2C_Master_Transmit(&hi2c3, DS3502_ADDR, buf_pot, 1, HAL_MAX_DELAY);
 8000302:	234e      	movs	r3, #78	; 0x4e
 8000304:	b299      	uxth	r1, r3
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2301      	movs	r3, #1
 800030e:	4a0f      	ldr	r2, [pc, #60]	; (800034c <getWiper+0x5c>)
 8000310:	480f      	ldr	r0, [pc, #60]	; (8000350 <getWiper+0x60>)
 8000312:	f001 fb7d 	bl	8001a10 <HAL_I2C_Master_Transmit>
 8000316:	4603      	mov	r3, r0
 8000318:	73fb      	strb	r3, [r7, #15]
	 if (ret != HAL_OK){
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <getWiper+0x34>
		 return false;
 8000320:	2300      	movs	r3, #0
 8000322:	e00f      	b.n	8000344 <getWiper+0x54>
	 }
	 else{
		 HAL_I2C_Master_Receive(&hi2c3, DS3502_ADDR, data, 1, HAL_MAX_DELAY);
 8000324:	234e      	movs	r3, #78	; 0x4e
 8000326:	b299      	uxth	r1, r3
 8000328:	f04f 33ff 	mov.w	r3, #4294967295
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2301      	movs	r3, #1
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	4807      	ldr	r0, [pc, #28]	; (8000350 <getWiper+0x60>)
 8000334:	f001 fc60 	bl	8001bf8 <HAL_I2C_Master_Receive>
		 if (ret != HAL_OK){
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <getWiper+0x52>
		 		 return false;
 800033e:	2300      	movs	r3, #0
 8000340:	e000      	b.n	8000344 <getWiper+0x54>
		 	 }
		 else{
			 return true;
 8000342:	2301      	movs	r3, #1
		 }
	 }
}
 8000344:	4618      	mov	r0, r3
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000098 	.word	0x20000098
 8000350:	20000108 	.word	0x20000108

08000354 <setWiper>:
bool setWiper(uint8_t reg,uint8_t data){
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af02      	add	r7, sp, #8
 800035a:	4603      	mov	r3, r0
 800035c:	460a      	mov	r2, r1
 800035e:	71fb      	strb	r3, [r7, #7]
 8000360:	4613      	mov	r3, r2
 8000362:	71bb      	strb	r3, [r7, #6]
	 buf_pot[0] = reg;
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <setWiper+0x6c>)
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	7013      	strb	r3, [r2, #0]
	 HAL_StatusTypeDef  ret = HAL_I2C_Master_Transmit(&hi2c3, DS3502_ADDR, buf_pot, 1, HAL_MAX_DELAY);
 800036a:	234e      	movs	r3, #78	; 0x4e
 800036c:	b299      	uxth	r1, r3
 800036e:	f04f 33ff 	mov.w	r3, #4294967295
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	2301      	movs	r3, #1
 8000376:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <setWiper+0x6c>)
 8000378:	4812      	ldr	r0, [pc, #72]	; (80003c4 <setWiper+0x70>)
 800037a:	f001 fb49 	bl	8001a10 <HAL_I2C_Master_Transmit>
 800037e:	4603      	mov	r3, r0
 8000380:	73fb      	strb	r3, [r7, #15]
	 if (ret != HAL_OK){
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <setWiper+0x38>
		 return false;
 8000388:	2300      	movs	r3, #0
 800038a:	e014      	b.n	80003b6 <setWiper+0x62>
	 }
	 else{
		 buf_pot[0] = data;
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <setWiper+0x6c>)
 800038e:	79bb      	ldrb	r3, [r7, #6]
 8000390:	7013      	strb	r3, [r2, #0]
		 ret =  HAL_I2C_Master_Transmit(&hi2c3, DS3502_ADDR, buf_pot, 1, HAL_MAX_DELAY);
 8000392:	234e      	movs	r3, #78	; 0x4e
 8000394:	b299      	uxth	r1, r3
 8000396:	f04f 33ff 	mov.w	r3, #4294967295
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2301      	movs	r3, #1
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <setWiper+0x6c>)
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <setWiper+0x70>)
 80003a2:	f001 fb35 	bl	8001a10 <HAL_I2C_Master_Transmit>
 80003a6:	4603      	mov	r3, r0
 80003a8:	73fb      	strb	r3, [r7, #15]
		 if (ret != HAL_OK){
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <setWiper+0x60>
		 		 return false;
 80003b0:	2300      	movs	r3, #0
 80003b2:	e000      	b.n	80003b6 <setWiper+0x62>
		 	 }
		 else{
			 return true;
 80003b4:	2301      	movs	r3, #1
		 }
	 }
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000098 	.word	0x20000098
 80003c4:	20000108 	.word	0x20000108

080003c8 <can_task_pot>:
		}
	  osDelay(500);
  }
  /* USER CODE END panel_task */
}
void can_task_pot(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	for(;;){
		uint8_t new_wiper_value = 0x3C;
 80003ce:	233c      	movs	r3, #60	; 0x3c
 80003d0:	71fb      	strb	r3, [r7, #7]
		bool read = true;
 80003d2:	2301      	movs	r3, #1
 80003d4:	71bb      	strb	r3, [r7, #6]
		if((new_wiper_value > 0) || (new_wiper_value < 0x7F) ) {
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d102      	bne.n	80003e2 <can_task_pot+0x1a>
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	2b7e      	cmp	r3, #126	; 0x7e
 80003e0:	d805      	bhi.n	80003ee <can_task_pot+0x26>
			setWiper(DS3502_REG_WR_IVR,new_wiper_value );
 80003e2:	2200      	movs	r2, #0
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4619      	mov	r1, r3
 80003e8:	4610      	mov	r0, r2
 80003ea:	f7ff ffb3 	bl	8000354 <setWiper>
		}
		if(read){
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d004      	beq.n	80003fe <can_task_pot+0x36>
			getWiper(DS3502_REG_WR_IVR,pos);
 80003f4:	2300      	movs	r3, #0
 80003f6:	4904      	ldr	r1, [pc, #16]	; (8000408 <can_task_pot+0x40>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff79 	bl	80002f0 <getWiper>
		}
		osDelay(500);
 80003fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000402:	f003 f89f 	bl	8003544 <osDelay>
	for(;;){
 8000406:	e7e2      	b.n	80003ce <can_task_pot+0x6>
 8000408:	20000090 	.word	0x20000090

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000410:	f000 faa5 	bl	800095e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000414:	f000 f82e 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000418:	f000 f8f2 	bl	8000600 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800041c:	f000 f86a 	bl	80004f4 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8000420:	f000 f8ae 	bl	8000580 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  can_init();
 8000424:	f7ff fefc 	bl	8000220 <can_init>
  pot_init();
 8000428:	f7ff ff2e 	bl	8000288 <pot_init>
  //lcd_init();
  /* Init scheduler */
  osKernelInitialize();
 800042c:	f002 ffae 	bl	800338c <osKernelInitialize>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000430:	f002 ffac 	bl	800338c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000434:	4a09      	ldr	r2, [pc, #36]	; (800045c <main+0x50>)
 8000436:	2100      	movs	r1, #0
 8000438:	4809      	ldr	r0, [pc, #36]	; (8000460 <main+0x54>)
 800043a:	f002 fff1 	bl	8003420 <osThreadNew>
 800043e:	4603      	mov	r3, r0
 8000440:	4a08      	ldr	r2, [pc, #32]	; (8000464 <main+0x58>)
 8000442:	6013      	str	r3, [r2, #0]

  /* creation of canTask_panel */
  //canTask_panelHandle = osThreadNew(can_task_panel, NULL, &canTask_panel_attributes);

  /* creation of canTask_pot */
  canTask_potHandle = osThreadNew(can_task_pot, NULL, &canTask_pot_attributes);
 8000444:	4a08      	ldr	r2, [pc, #32]	; (8000468 <main+0x5c>)
 8000446:	2100      	movs	r1, #0
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <main+0x60>)
 800044a:	f002 ffe9 	bl	8003420 <osThreadNew>
 800044e:	4603      	mov	r3, r0
 8000450:	4a07      	ldr	r2, [pc, #28]	; (8000470 <main+0x64>)
 8000452:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000454:	f002 ffbe 	bl	80033d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000458:	e7fe      	b.n	8000458 <main+0x4c>
 800045a:	bf00      	nop
 800045c:	080060f4 	.word	0x080060f4
 8000460:	08000649 	.word	0x08000649
 8000464:	20000154 	.word	0x20000154
 8000468:	08006118 	.word	0x08006118
 800046c:	080003c9 	.word	0x080003c9
 8000470:	20000158 	.word	0x20000158

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b094      	sub	sp, #80	; 0x50
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	2238      	movs	r2, #56	; 0x38
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f005 fd2e 	bl	8005ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000496:	f44f 7000 	mov.w	r0, #512	; 0x200
 800049a:	f001 ffb3 	bl	8002404 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	2302      	movs	r3, #2
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	4618      	mov	r0, r3
 80004b6:	f002 f849 	bl	800254c <HAL_RCC_OscConfig>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004c0:	f000 f8ca 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c4:	230f      	movs	r3, #15
 80004c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c8:	2301      	movs	r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 fb4d 	bl	8002b7c <HAL_RCC_ClockConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004e8:	f000 f8b6 	bl	8000658 <Error_Handler>
  }
}
 80004ec:	bf00      	nop
 80004ee:	3750      	adds	r7, #80	; 0x50
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_FDCAN1_Init+0x84>)
 80004fa:	4a20      	ldr	r2, [pc, #128]	; (800057c <MX_FDCAN1_Init+0x88>)
 80004fc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_FDCAN1_Init+0x84>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000512:	2201      	movs	r2, #1
 8000514:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000518:	2201      	movs	r2, #1
 800051a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_FDCAN1_Init+0x84>)
 800051e:	2200      	movs	r2, #0
 8000520:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000524:	2208      	movs	r2, #8
 8000526:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_FDCAN1_Init+0x84>)
 800052a:	2210      	movs	r2, #16
 800052c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000530:	220d      	movs	r2, #13
 8000532:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000536:	2202      	movs	r2, #2
 8000538:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_FDCAN1_Init+0x84>)
 800053c:	2201      	movs	r2, #1
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000542:	2204      	movs	r2, #4
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000548:	2205      	movs	r2, #5
 800054a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_FDCAN1_Init+0x84>)
 800054e:	2204      	movs	r2, #4
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000554:	2201      	movs	r2, #1
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MX_FDCAN1_Init+0x84>)
 800055a:	2201      	movs	r2, #1
 800055c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_FDCAN1_Init+0x84>)
 8000566:	f000 fb7b 	bl	8000c60 <HAL_FDCAN_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000570:	f000 f872 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000a4 	.word	0x200000a4
 800057c:	40006400 	.word	0x40006400

08000580 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_I2C3_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_I2C3_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_I2C3_Init+0x74>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <MX_I2C3_Init+0x7c>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_I2C3_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_I2C3_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_I2C3_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_I2C3_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C3_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C3_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C3_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <MX_I2C3_Init+0x74>)
 80005bc:	f001 f998 	bl	80018f0 <HAL_I2C_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80005c6:	f000 f847 	bl	8000658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <MX_I2C3_Init+0x74>)
 80005ce:	f001 fe81 	bl	80022d4 <HAL_I2CEx_ConfigAnalogFilter>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80005d8:	f000 f83e 	bl	8000658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80005dc:	2100      	movs	r1, #0
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_I2C3_Init+0x74>)
 80005e0:	f001 fec3 	bl	800236a <HAL_I2CEx_ConfigDigitalFilter>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f000 f835 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000108 	.word	0x20000108
 80005f8:	40007800 	.word	0x40007800
 80005fc:	00303d5b 	.word	0x00303d5b

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_GPIO_Init+0x44>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <MX_GPIO_Init+0x44>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_GPIO_Init+0x44>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_GPIO_Init+0x44>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <MX_GPIO_Init+0x44>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_GPIO_Init+0x44>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f002 ff77 	bl	8003544 <osDelay>
 8000656:	e7fb      	b.n	8000650 <StartDefaultTask+0x8>

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_MspInit+0x4c>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_MspInit+0x4c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6613      	str	r3, [r2, #96]	; 0x60
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_MspInit+0x4c>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_MspInit+0x4c>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_MspInit+0x4c>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6593      	str	r3, [r2, #88]	; 0x58
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_MspInit+0x4c>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	210f      	movs	r1, #15
 800069e:	f06f 0001 	mvn.w	r0, #1
 80006a2:	f000 faa8 	bl	8000bf6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000

080006b4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09a      	sub	sp, #104	; 0x68
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2244      	movs	r2, #68	; 0x44
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f005 fc05 	bl	8005ee4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a28      	ldr	r2, [pc, #160]	; (8000780 <HAL_FDCAN_MspInit+0xcc>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d149      	bne.n	8000778 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fc25 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000700:	f7ff ffaa 	bl	8000658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <HAL_FDCAN_MspInit+0xd0>)
 8000706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000708:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <HAL_FDCAN_MspInit+0xd0>)
 800070a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070e:	6593      	str	r3, [r2, #88]	; 0x58
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <HAL_FDCAN_MspInit+0xd0>)
 8000712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <HAL_FDCAN_MspInit+0xd0>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	4a18      	ldr	r2, [pc, #96]	; (8000784 <HAL_FDCAN_MspInit+0xd0>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_FDCAN_MspInit+0xd0>)
 800072a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000734:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000746:	2309      	movs	r3, #9
 8000748:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f000 ff4a 	bl	80015ec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2105      	movs	r1, #5
 800075c:	2015      	movs	r0, #21
 800075e:	f000 fa4a 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000762:	2015      	movs	r0, #21
 8000764:	f000 fa61 	bl	8000c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2105      	movs	r1, #5
 800076c:	2016      	movs	r0, #22
 800076e:	f000 fa42 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000772:	2016      	movs	r0, #22
 8000774:	f000 fa59 	bl	8000c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000778:	bf00      	nop
 800077a:	3768      	adds	r7, #104	; 0x68
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40006400 	.word	0x40006400
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09c      	sub	sp, #112	; 0x70
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	2244      	movs	r2, #68	; 0x44
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 fb9b 	bl	8005ee4 <memset>
  if(hi2c->Instance==I2C3)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <HAL_I2C_MspInit+0xe4>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d154      	bne.n	8000862 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80007b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007be:	2300      	movs	r3, #0
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 fbbc 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007d2:	f7ff ff41 	bl	8000658 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a25      	ldr	r2, [pc, #148]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a1f      	ldr	r2, [pc, #124]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8000818:	2302      	movs	r3, #2
 800081a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000826:	f000 fee1 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800082a:	2320      	movs	r3, #32
 800082c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082e:	2312      	movs	r3, #18
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800083a:	2308      	movs	r3, #8
 800083c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000842:	4619      	mov	r1, r3
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <HAL_I2C_MspInit+0xec>)
 8000846:	f000 fed1 	bl	80015ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 8000850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000854:	6593      	str	r3, [r2, #88]	; 0x58
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_I2C_MspInit+0xe8>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	3770      	adds	r7, #112	; 0x70
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40007800 	.word	0x40007800
 8000870:	40021000 	.word	0x40021000
 8000874:	48000400 	.word	0x48000400

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f8ac 	bl	8000a04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008ac:	f004 fa82 	bl	8004db4 <xTaskGetSchedulerState>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d001      	beq.n	80008ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008b6:	f005 f867 	bl	8005988 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80008c6:	f000 fc8d 	bl	80011e4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000a4 	.word	0x200000a4

080008d4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <FDCAN1_IT1_IRQHandler+0x10>)
 80008da:	f000 fc83 	bl	80011e4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000a4 	.word	0x200000a4

080008e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490e      	ldr	r1, [pc, #56]	; (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0b      	ldr	r4, [pc, #44]	; (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000936:	f7ff ffd7 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f005 fa9f 	bl	8005e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093e:	f7ff fd65 	bl	800040c <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   r0, =_estack
 8000944:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000950:	080061b4 	.word	0x080061b4
  ldr r2, =_sbss
 8000954:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000958:	20001b78 	.word	0x20001b78

0800095c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_2_IRQHandler>

0800095e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000964:	2300      	movs	r3, #0
 8000966:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f939 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f80e 	bl	8000990 <HAL_InitTick>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	e001      	b.n	8000984 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000980:	f7ff fe70 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000984:	79fb      	ldrb	r3, [r7, #7]

}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_InitTick+0x68>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d022      	beq.n	80009ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_InitTick+0x6c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <HAL_InitTick+0x68>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80009b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f944 	bl	8000c46 <HAL_SYSTICK_Config>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10f      	bne.n	80009e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d809      	bhi.n	80009de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ca:	2200      	movs	r2, #0
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	f04f 30ff 	mov.w	r0, #4294967295
 80009d2:	f000 f910 	bl	8000bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_InitTick+0x70>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e007      	b.n	80009ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	e004      	b.n	80009ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	e001      	b.n	80009ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a14:	6013      	str	r3, [r2, #0]
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	2000015c 	.word	0x2000015c
 8000a24:	20000008 	.word	0x20000008

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000015c 	.word	0x2000015c

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c04:	f7ff ff40 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	68b9      	ldr	r1, [r7, #8]
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff ff90 	bl	8000b34 <NVIC_EncodePriority>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff33 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffa4 	bl	8000b9c <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e147      	b.n	8000f02 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d106      	bne.n	8000c8c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fd14 	bl	80006b4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0210 	bic.w	r2, r2, #16
 8000c9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c9c:	f7ff fec4 	bl	8000a28 <HAL_GetTick>
 8000ca0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ca2:	e012      	b.n	8000cca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ca4:	f7ff fec0 	bl	8000a28 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b0a      	cmp	r3, #10
 8000cb0:	d90b      	bls.n	8000cca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e11b      	b.n	8000f02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d0e5      	beq.n	8000ca4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce8:	f7ff fe9e 	bl	8000a28 <HAL_GetTick>
 8000cec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000cee:	e012      	b.n	8000d16 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000cf0:	f7ff fe9a 	bl	8000a28 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	d90b      	bls.n	8000d16 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0f5      	b.n	8000f02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0e5      	beq.n	8000cf0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0202 	orr.w	r2, r2, #2
 8000d32:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a74      	ldr	r2, [pc, #464]	; (8000f0c <HAL_FDCAN_Init+0x2ac>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d103      	bne.n	8000d46 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000d3e:	4a74      	ldr	r2, [pc, #464]	; (8000f10 <HAL_FDCAN_Init+0x2b0>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7c1b      	ldrb	r3, [r3, #16]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d108      	bne.n	8000d60 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	699a      	ldr	r2, [r3, #24]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d5c:	619a      	str	r2, [r3, #24]
 8000d5e:	e007      	b.n	8000d70 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7c5b      	ldrb	r3, [r3, #17]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d108      	bne.n	8000d8a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d86:	619a      	str	r2, [r3, #24]
 8000d88:	e007      	b.n	8000d9a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	699a      	ldr	r2, [r3, #24]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d98:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7c9b      	ldrb	r3, [r3, #18]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000db0:	619a      	str	r2, [r3, #24]
 8000db2:	e007      	b.n	8000dc4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	699a      	ldr	r2, [r3, #24]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dc2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	699a      	ldr	r2, [r3, #24]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000de8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0210 	bic.w	r2, r2, #16
 8000df8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0204 	orr.w	r2, r2, #4
 8000e10:	619a      	str	r2, [r3, #24]
 8000e12:	e02c      	b.n	8000e6e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d028      	beq.n	8000e6e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d01c      	beq.n	8000e5e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e32:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0210 	orr.w	r2, r2, #16
 8000e42:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d110      	bne.n	8000e6e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0220 	orr.w	r2, r2, #32
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	e007      	b.n	8000e6e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	699a      	ldr	r2, [r3, #24]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0220 	orr.w	r2, r2, #32
 8000e6c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e7e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e86:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e96:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e98:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000ea2:	d115      	bne.n	8000ed0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000eb2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ebc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ecc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ece:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fb2a 	bl	8001540 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40006400 	.word	0x40006400
 8000f10:	40006500 	.word	0x40006500

08000f14 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f24:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d002      	beq.n	8000f32 <HAL_FDCAN_ConfigFilter+0x1e>
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d13d      	bne.n	8000fae <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d119      	bne.n	8000f6e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f46:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000f4e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e01d      	b.n	8000faa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	075a      	lsls	r2, r3, #29
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	079a      	lsls	r2, r3, #30
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e006      	b.n	8000fbc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
  }
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d110      	bne.n	8000ffe <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e006      	b.n	800100c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f043 0204 	orr.w	r2, r3, #4
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
  }
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800102a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d003      	beq.n	800103a <HAL_FDCAN_ActivateNotification+0x22>
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	2b02      	cmp	r3, #2
 8001036:	f040 80c8 	bne.w	80011ca <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d03b      	beq.n	80010ce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d031      	beq.n	80010ce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d027      	beq.n	80010ce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01d      	beq.n	80010ce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d013      	beq.n	80010ce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d009      	beq.n	80010ce <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00c      	beq.n	80010de <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d107      	bne.n	80010de <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d13b      	bne.n	800116a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d131      	bne.n	800116a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d127      	bne.n	800116a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001120:	2b00      	cmp	r3, #0
 8001122:	d004      	beq.n	800112e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d11d      	bne.n	800116a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b00      	cmp	r3, #0
 8001140:	d113      	bne.n	800116a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00c      	beq.n	800117a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0202 	orr.w	r2, r2, #2
 8001178:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	430a      	orrs	r2, r1
 8001194:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e006      	b.n	80011d8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f043 0202 	orr.w	r2, r3, #2
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
  }
}
 80011d8:	4618      	mov	r0, r3
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001200:	4013      	ands	r3, r2
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	4013      	ands	r3, r2
 800121a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001226:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	4013      	ands	r3, r2
 8001232:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800123e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001252:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001256:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00d      	beq.n	800128e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f939 	bl	8001500 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01b      	beq.n	80012d4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d014      	beq.n	80012d4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80012cc:	6939      	ldr	r1, [r7, #16]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8f7 	bl	80014c2 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80012e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f8b6 	bl	8001456 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a3a      	ldr	r2, [r7, #32]
 80012f6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80012f8:	6a39      	ldr	r1, [r7, #32]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8b6 	bl	800146c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800130e:	69f9      	ldr	r1, [r7, #28]
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f8b6 	bl	8001482 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00e      	beq.n	8001342 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f8ab 	bl	8001498 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01a      	beq.n	8001386 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	2b00      	cmp	r3, #0
 800135c:	d013      	beq.n	8001386 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001366:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800137e:	68f9      	ldr	r1, [r7, #12]
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f893 	bl	80014ac <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00e      	beq.n	80013b2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f893 	bl	80014d8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00e      	beq.n	80013de <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d007      	beq.n	80013de <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f887 	bl	80014ec <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d011      	beq.n	8001410 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00a      	beq.n	8001410 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001408:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f881 	bl	8001528 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f863 	bl	8001514 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800144e:	bf00      	nop
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800154a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800155a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	041a      	lsls	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001580:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	061a      	lsls	r2, r3, #24
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e005      	b.n	80015ce <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3304      	adds	r3, #4
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3f3      	bcc.n	80015c2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	4000a400 	.word	0x4000a400

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015fa:	e15a      	b.n	80018b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 814c 	beq.w	80018ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d005      	beq.n	800162c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001628:	2b02      	cmp	r3, #2
 800162a:	d130      	bne.n	800168e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001662:	2201      	movs	r2, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 0201 	and.w	r2, r3, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b03      	cmp	r3, #3
 8001698:	d017      	beq.n	80016ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d123      	bne.n	800171e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	6939      	ldr	r1, [r7, #16]
 800171a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0203 	and.w	r2, r3, #3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80a6 	beq.w	80018ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001760:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <HAL_GPIO_Init+0x2e4>)
 8001762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001764:	4a5a      	ldr	r2, [pc, #360]	; (80018d0 <HAL_GPIO_Init+0x2e4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6613      	str	r3, [r2, #96]	; 0x60
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_GPIO_Init+0x2e4>)
 800176e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001778:	4a56      	ldr	r2, [pc, #344]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a2:	d01f      	beq.n	80017e4 <HAL_GPIO_Init+0x1f8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x2ec>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d019      	beq.n	80017e0 <HAL_GPIO_Init+0x1f4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_GPIO_Init+0x1f0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_GPIO_Init+0x2f4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_Init+0x1ec>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <HAL_GPIO_Init+0x2f8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x1e8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_GPIO_Init+0x2fc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_Init+0x1e4>
 80017cc:	2305      	movs	r3, #5
 80017ce:	e00a      	b.n	80017e6 <HAL_GPIO_Init+0x1fa>
 80017d0:	2306      	movs	r3, #6
 80017d2:	e008      	b.n	80017e6 <HAL_GPIO_Init+0x1fa>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x1fa>
 80017d8:	2303      	movs	r3, #3
 80017da:	e004      	b.n	80017e6 <HAL_GPIO_Init+0x1fa>
 80017dc:	2302      	movs	r3, #2
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0x1fa>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_GPIO_Init+0x1fa>
 80017e4:	2300      	movs	r3, #0
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f6:	4937      	ldr	r1, [pc, #220]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_GPIO_Init+0x300>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001828:	4a30      	ldr	r2, [pc, #192]	; (80018ec <HAL_GPIO_Init+0x300>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800182e:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x300>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001852:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_GPIO_Init+0x300>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_GPIO_Init+0x300>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800187c:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <HAL_GPIO_Init+0x300>)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_GPIO_Init+0x300>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_GPIO_Init+0x300>)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f47f ae9d 	bne.w	80015fc <HAL_GPIO_Init+0x10>
  }
}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000800 	.word	0x48000800
 80018e0:	48000c00 	.word	0x48000c00
 80018e4:	48001000 	.word	0x48001000
 80018e8:	48001400 	.word	0x48001400
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e081      	b.n	8001a06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7fe ff36 	bl	8000788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2224      	movs	r2, #36	; 0x24
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001940:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001950:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	e006      	b.n	8001978 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001976:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d104      	bne.n	800198a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69d9      	ldr	r1, [r3, #28]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	817b      	strh	r3, [r7, #10]
 8001a20:	4613      	mov	r3, r2
 8001a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	f040 80da 	bne.w	8001be6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_Master_Transmit+0x30>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0d3      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a48:	f7fe ffee 	bl	8000a28 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2319      	movs	r3, #25
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 f9e6 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0be      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2221      	movs	r2, #33	; 0x21
 8001a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2210      	movs	r2, #16
 8001a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d90e      	bls.n	8001aba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	22ff      	movs	r2, #255	; 0xff
 8001aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	8979      	ldrh	r1, [r7, #10]
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fbdc 	bl	8002270 <I2C_TransferConfig>
 8001ab8:	e06c      	b.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	8979      	ldrh	r1, [r7, #10]
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fbcb 	bl	8002270 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ada:	e05b      	b.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	6a39      	ldr	r1, [r7, #32]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f9e3 	bl	8001eac <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e07b      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d034      	beq.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d130      	bne.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f975 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04d      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d90e      	bls.n	8001b74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	22ff      	movs	r2, #255	; 0xff
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	8979      	ldrh	r1, [r7, #10]
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 fb7f 	bl	8002270 <I2C_TransferConfig>
 8001b72:	e00f      	b.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	8979      	ldrh	r1, [r7, #10]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fb6e 	bl	8002270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d19e      	bne.n	8001adc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f9c2 	bl	8001f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e01a      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	80002000 	.word	0x80002000
 8001bf4:	fe00e800 	.word	0xfe00e800

08001bf8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	461a      	mov	r2, r3
 8001c04:	460b      	mov	r3, r1
 8001c06:	817b      	strh	r3, [r7, #10]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	f040 80db 	bne.w	8001dd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_I2C_Master_Receive+0x30>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0d4      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c30:	f7fe fefa 	bl	8000a28 <HAL_GetTick>
 8001c34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2319      	movs	r3, #25
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f8f2 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0bf      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2222      	movs	r2, #34	; 0x22
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	893a      	ldrh	r2, [r7, #8]
 8001c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2bff      	cmp	r3, #255	; 0xff
 8001c82:	d90e      	bls.n	8001ca2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	22ff      	movs	r2, #255	; 0xff
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <HAL_I2C_Master_Receive+0x1e4>)
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fae8 	bl	8002270 <I2C_TransferConfig>
 8001ca0:	e06d      	b.n	8001d7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <HAL_I2C_Master_Receive+0x1e4>)
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fad7 	bl	8002270 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001cc2:	e05c      	b.n	8001d7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	6a39      	ldr	r1, [r7, #32]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f96b 	bl	8001fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e07c      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d034      	beq.n	8001d7e <HAL_I2C_Master_Receive+0x186>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d130      	bne.n	8001d7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f880 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e04d      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2bff      	cmp	r3, #255	; 0xff
 8001d3e:	d90e      	bls.n	8001d5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	8979      	ldrh	r1, [r7, #10]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fa8a 	bl	8002270 <I2C_TransferConfig>
 8001d5c:	e00f      	b.n	8001d7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	8979      	ldrh	r1, [r7, #10]
 8001d70:	2300      	movs	r3, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fa79 	bl	8002270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d19d      	bne.n	8001cc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6a39      	ldr	r1, [r7, #32]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f8cd 	bl	8001f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e01a      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2220      	movs	r2, #32
 8001da2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_I2C_Master_Receive+0x1e8>)
 8001db0:	400b      	ands	r3, r1
 8001db2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	80002400 	.word	0x80002400
 8001de0:	fe00e800 	.word	0xfe00e800

08001de4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d103      	bne.n	8001e02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d007      	beq.n	8001e20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	619a      	str	r2, [r3, #24]
  }
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e3c:	e022      	b.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d01e      	beq.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7fe fdef 	bl	8000a28 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d302      	bcc.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d113      	bne.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e00f      	b.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d0cd      	beq.n	8001e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001eb8:	e02c      	b.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f8ea 	bl	8002098 <I2C_IsErrorOccurred>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e02a      	b.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d01e      	beq.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed6:	f7fe fda7 	bl	8000a28 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d302      	bcc.n	8001eec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d113      	bne.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e007      	b.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d1cb      	bne.n	8001eba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f38:	e028      	b.n	8001f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f8aa 	bl	8002098 <I2C_IsErrorOccurred>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e026      	b.n	8001f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7fe fd6b 	bl	8000a28 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d113      	bne.n	8001f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e007      	b.n	8001f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d1cf      	bne.n	8001f3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fb0:	e064      	b.n	800207c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f86e 	bl	8002098 <I2C_IsErrorOccurred>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e062      	b.n	800208c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d138      	bne.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d105      	bne.n	8001fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e04e      	b.n	800208c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d107      	bne.n	800200c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2210      	movs	r2, #16
 8002002:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2204      	movs	r2, #4
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
 800200a:	e002      	b.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2220      	movs	r2, #32
 8002018:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002026:	400b      	ands	r3, r1
 8002028:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e022      	b.n	800208c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7fe fcef 	bl	8000a28 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10f      	bne.n	800207c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b04      	cmp	r3, #4
 8002088:	d193      	bne.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	fe00e800 	.word	0xfe00e800

08002098 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d075      	beq.n	80021b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2210      	movs	r2, #16
 80020ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020cc:	e056      	b.n	800217c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d4:	d052      	beq.n	800217c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020d6:	f7fe fca7 	bl	8000a28 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <I2C_IsErrorOccurred+0x54>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d147      	bne.n	800217c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210e:	d12e      	bne.n	800216e <I2C_IsErrorOccurred+0xd6>
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002116:	d02a      	beq.n	800216e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	2b20      	cmp	r3, #32
 800211c:	d027      	beq.n	800216e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800212e:	f7fe fc7b 	bl	8000a28 <HAL_GetTick>
 8002132:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002134:	e01b      	b.n	800216e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002136:	f7fe fc77 	bl	8000a28 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b19      	cmp	r3, #25
 8002142:	d914      	bls.n	800216e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	f043 0220 	orr.w	r2, r3, #32
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b20      	cmp	r3, #32
 800217a:	d1dc      	bne.n	8002136 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b20      	cmp	r3, #32
 8002188:	d003      	beq.n	8002192 <I2C_IsErrorOccurred+0xfa>
 800218a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800218e:	2b00      	cmp	r3, #0
 8002190:	d09d      	beq.n	80020ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2220      	movs	r2, #32
 80021a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00b      	beq.n	80021fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800221e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01c      	beq.n	8002260 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff fddc 	bl	8001de4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <I2C_IsErrorOccurred+0x1d4>)
 8002238:	400b      	ands	r3, r1
 800223a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	431a      	orrs	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002264:	4618      	mov	r0, r3
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	fe00e800 	.word	0xfe00e800

08002270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	817b      	strh	r3, [r7, #10]
 800227e:	4613      	mov	r3, r2
 8002280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002282:	897b      	ldrh	r3, [r7, #10]
 8002284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002288:	7a7b      	ldrb	r3, [r7, #9]
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002290:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	4313      	orrs	r3, r2
 800229a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800229e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	0d5b      	lsrs	r3, r3, #21
 80022aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <I2C_TransferConfig+0x60>)
 80022b0:	430b      	orrs	r3, r1
 80022b2:	43db      	mvns	r3, r3
 80022b4:	ea02 0103 	and.w	r1, r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	03ff63ff 	.word	0x03ff63ff

080022d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d138      	bne.n	800235c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e032      	b.n	800235e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	; 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b20      	cmp	r3, #32
 800237e:	d139      	bne.n	80023f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800238a:	2302      	movs	r3, #2
 800238c:	e033      	b.n	80023f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2224      	movs	r2, #36	; 0x24
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d141      	bne.n	8002496 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002412:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d131      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002420:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002426:	4a46      	ldr	r2, [pc, #280]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800242c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002430:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002438:	4a41      	ldr	r2, [pc, #260]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2232      	movs	r2, #50	; 0x32
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	4a3f      	ldr	r2, [pc, #252]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	0c9b      	lsrs	r3, r3, #18
 8002452:	3301      	adds	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002456:	e002      	b.n	800245e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3b01      	subs	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246a:	d102      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f2      	bne.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002472:	4b33      	ldr	r3, [pc, #204]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d158      	bne.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e057      	b.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002484:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002490:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002494:	e04d      	b.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249c:	d141      	bne.n	8002522 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024aa:	d131      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b2:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024bc:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024c4:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2232      	movs	r2, #50	; 0x32
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9b      	lsrs	r3, r3, #18
 80024de:	3301      	adds	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024e2:	e002      	b.n	80024ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d102      	bne.n	80024fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f2      	bne.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250a:	d112      	bne.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e011      	b.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002520:	e007      	b.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800252a:	4a05      	ldr	r2, [pc, #20]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002530:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40007000 	.word	0x40007000
 8002544:	20000000 	.word	0x20000000
 8002548:	431bde83 	.word	0x431bde83

0800254c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e306      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b97      	ldr	r3, [pc, #604]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b94      	ldr	r3, [pc, #592]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0x3e>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d002      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b8d      	ldr	r3, [pc, #564]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e2e1      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a84      	ldr	r2, [pc, #528]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a7e      	ldr	r2, [pc, #504]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b7c      	ldr	r3, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7b      	ldr	r2, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a74      	ldr	r2, [pc, #464]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fa10 	bl	8000a28 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fa0c 	bl	8000a28 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e2a6      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800261e:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe f9fc 	bl	8000a28 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe f9f8 	bl	8000a28 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e292      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002646:	4b60      	ldr	r3, [pc, #384]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d075      	beq.n	800274e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002662:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266c:	4b56      	ldr	r3, [pc, #344]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d102      	bne.n	8002682 <HAL_RCC_OscConfig+0x136>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d002      	beq.n	8002688 <HAL_RCC_OscConfig+0x13c>
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d11f      	bne.n	80026c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002688:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_OscConfig+0x154>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e265      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	4946      	ldr	r1, [pc, #280]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <HAL_RCC_OscConfig+0x280>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe f969 	bl	8000990 <HAL_InitTick>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d043      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e251      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3c      	ldr	r2, [pc, #240]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe f9a4 	bl	8000a28 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e4:	f7fe f9a0 	bl	8000a28 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e23a      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	061b      	lsls	r3, r3, #24
 8002710:	492d      	ldr	r1, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 8002716:	e01a      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800271e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe f980 	bl	8000a28 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272c:	f7fe f97c 	bl	8000a28 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e216      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x1e0>
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d041      	beq.n	80027de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01c      	beq.n	800279c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 8002764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe f959 	bl	8000a28 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7fe f955 	bl	8000a28 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1ef      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800278e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ef      	beq.n	800277a <HAL_RCC_OscConfig+0x22e>
 800279a:	e020      	b.n	80027de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_OscConfig+0x27c>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe f93c 	bl	8000a28 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b2:	e00d      	b.n	80027d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7fe f938 	bl	8000a28 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d906      	bls.n	80027d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1d2      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d0:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ea      	bne.n	80027b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80a6 	beq.w	8002938 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ec:	2300      	movs	r3, #0
 80027ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027f0:	4b84      	ldr	r3, [pc, #528]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x2b4>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x2b6>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	4a7e      	ldr	r2, [pc, #504]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6593      	str	r3, [r2, #88]	; 0x58
 8002812:	4b7c      	ldr	r3, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002822:	4b79      	ldr	r3, [pc, #484]	; (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a75      	ldr	r2, [pc, #468]	; (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe f8f5 	bl	8000a28 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe f8f1 	bl	8000a28 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e18b      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002854:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <HAL_RCC_OscConfig+0x4bc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d108      	bne.n	800287a <HAL_RCC_OscConfig+0x32e>
 8002868:	4b66      	ldr	r3, [pc, #408]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	4a65      	ldr	r2, [pc, #404]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002878:	e024      	b.n	80028c4 <HAL_RCC_OscConfig+0x378>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d110      	bne.n	80028a4 <HAL_RCC_OscConfig+0x358>
 8002882:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	4a5e      	ldr	r2, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x378>
 80028a4:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a56      	ldr	r2, [pc, #344]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d016      	beq.n	80028fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7fe f8ac 	bl	8000a28 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe f8a8 	bl	8000a28 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e140      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ea:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ed      	beq.n	80028d4 <HAL_RCC_OscConfig+0x388>
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe f895 	bl	8000a28 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe f891 	bl	8000a28 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e129      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002918:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ed      	bne.n	8002902 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002926:	7ffb      	ldrb	r3, [r7, #31]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03c      	beq.n	80029be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01c      	beq.n	8002986 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002952:	4a2c      	ldr	r2, [pc, #176]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe f864 	bl	8000a28 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002964:	f7fe f860 	bl	8000a28 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0fa      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002976:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ef      	beq.n	8002964 <HAL_RCC_OscConfig+0x418>
 8002984:	e01b      	b.n	80029be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe f847 	bl	8000a28 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800299e:	f7fe f843 	bl	8000a28 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0dd      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ef      	bne.n	800299e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80d1 	beq.w	8002b6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	f000 808b 	beq.w	8002aec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d15e      	bne.n	8002a9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_RCC_OscConfig+0x4b8>)
 80029e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe f81d 	bl	8000a28 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	e00c      	b.n	8002a0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe f819 	bl	8000a28 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d905      	bls.n	8002a0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0b3      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ec      	bne.n	80029f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a18:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x62c>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6a11      	ldr	r1, [r2, #32]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a28:	3a01      	subs	r2, #1
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	4311      	orrs	r1, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a32:	0212      	lsls	r2, r2, #8
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a3a:	0852      	lsrs	r2, r2, #1
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0552      	lsls	r2, r2, #21
 8002a40:	4311      	orrs	r1, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a46:	0852      	lsrs	r2, r2, #1
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0652      	lsls	r2, r2, #25
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a52:	06d2      	lsls	r2, r2, #27
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4947      	ldr	r1, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5c:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a44      	ldr	r2, [pc, #272]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a68:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a41      	ldr	r2, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fd ffd8 	bl	8000a28 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fd ffd4 	bl	8000a28 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e06e      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x530>
 8002a9a:	e066      	b.n	8002b6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b35      	ldr	r3, [pc, #212]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002aba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fd ffb0 	bl	8000a28 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fd ffac 	bl	8000a28 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e046      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ade:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x580>
 8002aea:	e03e      	b.n	8002b6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e039      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_OscConfig+0x628>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d12c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	3b01      	subs	r3, #1
 8002b18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d123      	bne.n	8002b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d11b      	bne.n	8002b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d113      	bne.n	8002b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	019f800c 	.word	0x019f800c

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e11e      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d910      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b8e      	ldr	r3, [pc, #568]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 020f 	bic.w	r2, r3, #15
 8002baa:	498c      	ldr	r1, [pc, #560]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b8a      	ldr	r3, [pc, #552]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e106      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d073      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d129      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd8:	4b81      	ldr	r3, [pc, #516]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0f4      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002be8:	f000 f966 	bl	8002eb8 <RCC_GetSysClockFreqFromPLLSource>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_RCC_ClockConfig+0x268>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d93f      	bls.n	8002c76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bf6:	4b7a      	ldr	r3, [pc, #488]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d033      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d12f      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e024      	b.n	8002c76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0c6      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c44:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0be      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c54:	f000 f8ce 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4a61      	ldr	r2, [pc, #388]	; (8002de4 <HAL_RCC_ClockConfig+0x268>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d909      	bls.n	8002c76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6a:	4a5d      	ldr	r2, [pc, #372]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4957      	ldr	r1, [pc, #348]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c88:	f7fd fece 	bl	8000a28 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7fd feca 	bl	8000a28 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e095      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b4e      	ldr	r3, [pc, #312]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d023      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a42      	ldr	r2, [pc, #264]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4936      	ldr	r1, [pc, #216]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d105      	bne.n	8002d1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d12:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4a32      	ldr	r2, [pc, #200]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d21d      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 020f 	bic.w	r2, r3, #15
 8002d34:	4929      	ldr	r1, [pc, #164]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d3c:	f7fd fe74 	bl	8000a28 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fd fe70 	bl	8000a28 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e03b      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1ed      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4917      	ldr	r1, [pc, #92]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490f      	ldr	r1, [pc, #60]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da6:	f000 f825 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_RCC_ClockConfig+0x264>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	490c      	ldr	r1, [pc, #48]	; (8002de8 <HAL_RCC_ClockConfig+0x26c>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x270>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x274>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fde0 	bl	8000990 <HAL_InitTick>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	04c4b400 	.word	0x04c4b400
 8002de8:	0800613c 	.word	0x0800613c
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d102      	bne.n	8002e0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e047      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e03e      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d136      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e52:	68d2      	ldr	r2, [r2, #12]
 8002e54:	0a12      	lsrs	r2, r2, #8
 8002e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
      break;
 8002e60:	e00c      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e62:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	0a12      	lsrs	r2, r2, #8
 8002e70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
      break;
 8002e7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0e5b      	lsrs	r3, r3, #25
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e001      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e9c:	693b      	ldr	r3, [r7, #16]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	007a1200 	.word	0x007a1200

08002eb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d10c      	bne.n	8002ef6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ee6:	68d2      	ldr	r2, [r2, #12]
 8002ee8:	0a12      	lsrs	r2, r2, #8
 8002eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	617b      	str	r3, [r7, #20]
    break;
 8002ef4:	e00c      	b.n	8002f10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f00:	68d2      	ldr	r2, [r2, #12]
 8002f02:	0a12      	lsrs	r2, r2, #8
 8002f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    break;
 8002f0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0e5b      	lsrs	r3, r3, #25
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f2a:	687b      	ldr	r3, [r7, #4]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	00f42400 	.word	0x00f42400

08002f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f50:	2300      	movs	r3, #0
 8002f52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8098 	beq.w	8003092 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	4b40      	ldr	r3, [pc, #256]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a39      	ldr	r2, [pc, #228]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f9a:	f7fd fd45 	bl	8000a28 <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fd fd41 	bl	8000a28 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ef      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d159      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01e      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d019      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003000:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fd fd01 	bl	8000a28 <HAL_GetTick>
 8003026:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003028:	e00b      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fd fcfd 	bl	8000a28 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d902      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	74fb      	strb	r3, [r7, #19]
            break;
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ec      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10b      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800306c:	e008      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800306e:	7cfb      	ldrb	r3, [r7, #19]
 8003070:	74bb      	strb	r3, [r7, #18]
 8003072:	e005      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003074:	40021000 	.word	0x40021000
 8003078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003080:	7c7b      	ldrb	r3, [r7, #17]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003086:	4ba6      	ldr	r3, [pc, #664]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	4aa5      	ldr	r2, [pc, #660]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003090:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800309e:	4ba0      	ldr	r3, [pc, #640]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 0203 	bic.w	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	499c      	ldr	r1, [pc, #624]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c0:	4b97      	ldr	r3, [pc, #604]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f023 020c 	bic.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4994      	ldr	r1, [pc, #592]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e2:	4b8f      	ldr	r3, [pc, #572]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	498b      	ldr	r1, [pc, #556]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003104:	4b86      	ldr	r3, [pc, #536]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	4983      	ldr	r1, [pc, #524]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003126:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	497a      	ldr	r1, [pc, #488]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003148:	4b75      	ldr	r3, [pc, #468]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	4972      	ldr	r1, [pc, #456]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4969      	ldr	r1, [pc, #420]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800318c:	4b64      	ldr	r3, [pc, #400]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4961      	ldr	r1, [pc, #388]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ae:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	4958      	ldr	r1, [pc, #352]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d015      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	4950      	ldr	r1, [pc, #320]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ee:	d105      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f0:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003208:	4b45      	ldr	r3, [pc, #276]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	4942      	ldr	r1, [pc, #264]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003226:	d105      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003228:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003232:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003240:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4934      	ldr	r1, [pc, #208]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800325e:	d105      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003260:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003278:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	4926      	ldr	r1, [pc, #152]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003296:	d105      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	4918      	ldr	r1, [pc, #96]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a12      	ldr	r2, [pc, #72]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d015      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	490a      	ldr	r1, [pc, #40]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003312:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003314:	7cbb      	ldrb	r3, [r7, #18]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000

08003324 <__NVIC_SetPriority>:
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	; (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	; (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800337c:	2100      	movs	r1, #0
 800337e:	f06f 0004 	mvn.w	r0, #4
 8003382:	f7ff ffcf 	bl	8003324 <__NVIC_SetPriority>
#endif
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003392:	f3ef 8305 	mrs	r3, IPSR
 8003396:	603b      	str	r3, [r7, #0]
  return(result);
 8003398:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800339e:	f06f 0305 	mvn.w	r3, #5
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	e00c      	b.n	80033c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <osKernelInitialize+0x44>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <osKernelInitialize+0x44>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	e002      	b.n	80033c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033c0:	687b      	ldr	r3, [r7, #4]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000160 	.word	0x20000160

080033d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033da:	f3ef 8305 	mrs	r3, IPSR
 80033de:	603b      	str	r3, [r7, #0]
  return(result);
 80033e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80033e6:	f06f 0305 	mvn.w	r3, #5
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	e010      	b.n	8003410 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <osKernelStart+0x48>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d109      	bne.n	800340a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80033f6:	f7ff ffbf 	bl	8003378 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <osKernelStart+0x48>)
 80033fc:	2202      	movs	r2, #2
 80033fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003400:	f001 f87c 	bl	80044fc <vTaskStartScheduler>
      stat = osOK;
 8003404:	2300      	movs	r3, #0
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	e002      	b.n	8003410 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003410:	687b      	ldr	r3, [r7, #4]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000160 	.word	0x20000160

08003420 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b08e      	sub	sp, #56	; 0x38
 8003424:	af04      	add	r7, sp, #16
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003430:	f3ef 8305 	mrs	r3, IPSR
 8003434:	617b      	str	r3, [r7, #20]
  return(result);
 8003436:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003438:	2b00      	cmp	r3, #0
 800343a:	d17e      	bne.n	800353a <osThreadNew+0x11a>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d07b      	beq.n	800353a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003446:	2318      	movs	r3, #24
 8003448:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d045      	beq.n	80034e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <osThreadNew+0x48>
        name = attr->name;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <osThreadNew+0x6e>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b38      	cmp	r3, #56	; 0x38
 8003480:	d805      	bhi.n	800348e <osThreadNew+0x6e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <osThreadNew+0x72>
        return (NULL);
 800348e:	2300      	movs	r3, #0
 8003490:	e054      	b.n	800353c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <osThreadNew+0xa8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2bbb      	cmp	r3, #187	; 0xbb
 80034b0:	d90a      	bls.n	80034c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <osThreadNew+0xa8>
        mem = 1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e010      	b.n	80034ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10c      	bne.n	80034ea <osThreadNew+0xca>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <osThreadNew+0xca>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <osThreadNew+0xca>
          mem = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e001      	b.n	80034ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d110      	bne.n	8003512 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034f8:	9202      	str	r2, [sp, #8]
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6a3a      	ldr	r2, [r7, #32]
 8003504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fe0c 	bl	8004124 <xTaskCreateStatic>
 800350c:	4603      	mov	r3, r0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e013      	b.n	800353a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d110      	bne.n	800353a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	b29a      	uxth	r2, r3
 800351c:	f107 0310 	add.w	r3, r7, #16
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fe57 	bl	80041de <xTaskCreate>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <osThreadNew+0x11a>
            hTask = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800353a:	693b      	ldr	r3, [r7, #16]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800354c:	f3ef 8305 	mrs	r3, IPSR
 8003550:	60bb      	str	r3, [r7, #8]
  return(result);
 8003552:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <osDelay+0x1c>
    stat = osErrorISR;
 8003558:	f06f 0305 	mvn.w	r3, #5
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e007      	b.n	8003570 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <osDelay+0x2c>
      vTaskDelay(ticks);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 ff92 	bl	8004494 <vTaskDelay>
    }
  }

  return (stat);
 8003570:	68fb      	ldr	r3, [r7, #12]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800358c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <vApplicationGetIdleTaskMemory+0x30>)
 8003592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000164 	.word	0x20000164
 80035ac:	20000220 	.word	0x20000220

080035b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <vApplicationGetTimerTaskMemory+0x2c>)
 80035c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4a06      	ldr	r2, [pc, #24]	; (80035e0 <vApplicationGetTimerTaskMemory+0x30>)
 80035c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ce:	601a      	str	r2, [r3, #0]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	20000420 	.word	0x20000420
 80035e0:	200004dc 	.word	0x200004dc

080035e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f103 0208 	add.w	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f103 0208 	add.w	r2, r3, #8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f103 0208 	add.w	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d103      	bne.n	80036a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e00c      	b.n	80036c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3308      	adds	r3, #8
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e002      	b.n	80036b4 <vListInsert+0x2e>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d2f6      	bcs.n	80036ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	601a      	str	r2, [r3, #0]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d103      	bne.n	800372c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	1e5a      	subs	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003776:	f002 f875 	bl	8005864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	3b01      	subs	r3, #1
 80037a8:	68f9      	ldr	r1, [r7, #12]
 80037aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	441a      	add	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	22ff      	movs	r2, #255	; 0xff
 80037c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d114      	bne.n	80037f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01a      	beq.n	800380a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3310      	adds	r3, #16
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f929 	bl	8004a30 <xTaskRemoveFromEventList>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <xQueueGenericReset+0xcc>)
 80037e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	e009      	b.n	800380a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3310      	adds	r3, #16
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fef2 	bl	80035e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3324      	adds	r3, #36	; 0x24
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff feed 	bl	80035e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800380a:	f002 f85b 	bl	80058c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800380e:	2301      	movs	r3, #1
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <xQueueGenericCreateStatic+0x52>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <xQueueGenericCreateStatic+0x56>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <xQueueGenericCreateStatic+0x58>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	623b      	str	r3, [r7, #32]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <xQueueGenericCreateStatic+0x7e>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <xQueueGenericCreateStatic+0x82>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <xQueueGenericCreateStatic+0x84>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	61fb      	str	r3, [r7, #28]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038ba:	2350      	movs	r3, #80	; 0x50
 80038bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b50      	cmp	r3, #80	; 0x50
 80038c2:	d00a      	beq.n	80038da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	61bb      	str	r3, [r7, #24]
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f805 	bl	800390c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003904:	4618      	mov	r0, r3
 8003906:	3730      	adds	r7, #48	; 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e002      	b.n	800392e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800393a:	2101      	movs	r1, #1
 800393c:	69b8      	ldr	r0, [r7, #24]
 800393e:	f7ff ff05 	bl	800374c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	; 0x38
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003962:	2300      	movs	r3, #0
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xQueueGenericSend+0x32>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <xQueueGenericSend+0x40>
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <xQueueGenericSend+0x44>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <xQueueGenericSend+0x46>
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <xQueueGenericSend+0x60>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d103      	bne.n	80039c2 <xQueueGenericSend+0x6e>
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <xQueueGenericSend+0x72>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <xQueueGenericSend+0x74>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	623b      	str	r3, [r7, #32]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039e2:	f001 f9e7 	bl	8004db4 <xTaskGetSchedulerState>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xQueueGenericSend+0x9e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericSend+0xa2>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericSend+0xa4>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericSend+0xbe>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61fb      	str	r3, [r7, #28]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a12:	f001 ff27 	bl	8005864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <xQueueGenericSend+0xd4>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d129      	bne.n	8003a7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a2e:	f000 fa0b 	bl	8003e48 <prvCopyDataToQueue>
 8003a32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	3324      	adds	r3, #36	; 0x24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fff5 	bl	8004a30 <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d013      	beq.n	8003a74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <xQueueGenericSend+0x1f8>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	e00a      	b.n	8003a74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <xQueueGenericSend+0x1f8>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a74:	f001 ff26 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e063      	b.n	8003b44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a82:	f001 ff1f 	bl	80058c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e05c      	b.n	8003b44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 f82f 	bl	8004af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a9e:	f001 ff11 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa2:	f000 fd9b 	bl	80045dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aa6:	f001 fedd 	bl	8005864 <vPortEnterCritical>
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d103      	bne.n	8003ac0 <xQueueGenericSend+0x16c>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d103      	bne.n	8003ad6 <xQueueGenericSend+0x182>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad6:	f001 fef5 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ada:	1d3a      	adds	r2, r7, #4
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 f81e 	bl	8004b24 <xTaskCheckForTimeOut>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d124      	bne.n	8003b38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af0:	f000 faa2 	bl	8004038 <prvIsQueueFull>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	3310      	adds	r3, #16
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 ff44 	bl	8004990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0a:	f000 fa2d 	bl	8003f68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b0e:	f000 fd73 	bl	80045f8 <xTaskResumeAll>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f af7c 	bne.w	8003a12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <xQueueGenericSend+0x1f8>)
 8003b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	e772      	b.n	8003a12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2e:	f000 fa1b 	bl	8003f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b32:	f000 fd61 	bl	80045f8 <xTaskResumeAll>
 8003b36:	e76c      	b.n	8003a12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3a:	f000 fa15 	bl	8003f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b3e:	f000 fd5b 	bl	80045f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3738      	adds	r7, #56	; 0x38
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b090      	sub	sp, #64	; 0x40
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <xQueueGenericSendFromISR+0x3c>
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <xQueueGenericSendFromISR+0x40>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <xQueueGenericSendFromISR+0x42>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d103      	bne.n	8003bba <xQueueGenericSendFromISR+0x6a>
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <xQueueGenericSendFromISR+0x6e>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericSendFromISR+0x70>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	623b      	str	r3, [r7, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bda:	f001 ff25 	bl	8005a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bde:	f3ef 8211 	mrs	r2, BASEPRI
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	61fa      	str	r2, [r7, #28]
 8003bf4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <xQueueGenericSendFromISR+0xbc>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d12f      	bne.n	8003c6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c22:	f000 f911 	bl	8003e48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d112      	bne.n	8003c56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d016      	beq.n	8003c66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	3324      	adds	r3, #36	; 0x24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fef7 	bl	8004a30 <xTaskRemoveFromEventList>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e007      	b.n	8003c66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	b25a      	sxtb	r2, r3
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c66:	2301      	movs	r3, #1
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c6a:	e001      	b.n	8003c70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3740      	adds	r7, #64	; 0x40
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <xQueueReceive+0x30>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	623b      	str	r3, [r7, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <xQueueReceive+0x3e>
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <xQueueReceive+0x42>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <xQueueReceive+0x44>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xQueueReceive+0x5e>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	61fb      	str	r3, [r7, #28]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce6:	f001 f865 	bl	8004db4 <xTaskGetSchedulerState>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <xQueueReceive+0x6e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <xQueueReceive+0x72>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <xQueueReceive+0x74>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xQueueReceive+0x8e>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	61bb      	str	r3, [r7, #24]
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d16:	f001 fda5 	bl	8005864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01f      	beq.n	8003d66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2a:	f000 f8f7 	bl	8003f1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00f      	beq.n	8003d5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	3310      	adds	r3, #16
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fe74 	bl	8004a30 <xTaskRemoveFromEventList>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <xQueueReceive+0x1bc>)
 8003d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d5e:	f001 fdb1 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e069      	b.n	8003e3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d6c:	f001 fdaa 	bl	80058c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e062      	b.n	8003e3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d7a:	f107 0310 	add.w	r3, r7, #16
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 feba 	bl	8004af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d88:	f001 fd9c 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d8c:	f000 fc26 	bl	80045dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d90:	f001 fd68 	bl	8005864 <vPortEnterCritical>
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d9a:	b25b      	sxtb	r3, r3
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d103      	bne.n	8003daa <xQueueReceive+0x122>
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003db0:	b25b      	sxtb	r3, r3
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d103      	bne.n	8003dc0 <xQueueReceive+0x138>
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc0:	f001 fd80 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dc4:	1d3a      	adds	r2, r7, #4
 8003dc6:	f107 0310 	add.w	r3, r7, #16
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fea9 	bl	8004b24 <xTaskCheckForTimeOut>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d123      	bne.n	8003e20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dda:	f000 f917 	bl	800400c <prvIsQueueEmpty>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	3324      	adds	r3, #36	; 0x24
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fdcf 	bl	8004990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df4:	f000 f8b8 	bl	8003f68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003df8:	f000 fbfe 	bl	80045f8 <xTaskResumeAll>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d189      	bne.n	8003d16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <xQueueReceive+0x1bc>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	e780      	b.n	8003d16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e16:	f000 f8a7 	bl	8003f68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e1a:	f000 fbed 	bl	80045f8 <xTaskResumeAll>
 8003e1e:	e77a      	b.n	8003d16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e22:	f000 f8a1 	bl	8003f68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e26:	f000 fbe7 	bl	80045f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e2c:	f000 f8ee 	bl	800400c <prvIsQueueEmpty>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f43f af6f 	beq.w	8003d16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3730      	adds	r7, #48	; 0x30
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d14d      	bne.n	8003f0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 ffbc 	bl	8004df0 <xTaskPriorityDisinherit>
 8003e78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e043      	b.n	8003f0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d119      	bne.n	8003ebc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6858      	ldr	r0, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	461a      	mov	r2, r3
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	f002 f818 	bl	8005ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d32b      	bcc.n	8003f0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	e026      	b.n	8003f0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68d8      	ldr	r0, [r3, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	f001 fffe 	bl	8005ec8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	425b      	negs	r3, r3
 8003ef2:	441a      	add	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d105      	bne.n	8003f0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f12:	697b      	ldr	r3, [r7, #20]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d018      	beq.n	8003f60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	441a      	add	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d303      	bcc.n	8003f50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68d9      	ldr	r1, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6838      	ldr	r0, [r7, #0]
 8003f5c:	f001 ffb4 	bl	8005ec8 <memcpy>
	}
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f70:	f001 fc78 	bl	8005864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f7c:	e011      	b.n	8003fa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d012      	beq.n	8003fac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3324      	adds	r3, #36	; 0x24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fd50 	bl	8004a30 <xTaskRemoveFromEventList>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f96:	f000 fe27 	bl	8004be8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	dce9      	bgt.n	8003f7e <prvUnlockQueue+0x16>
 8003faa:	e000      	b.n	8003fae <prvUnlockQueue+0x46>
					break;
 8003fac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	22ff      	movs	r2, #255	; 0xff
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fb6:	f001 fc85 	bl	80058c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fba:	f001 fc53 	bl	8005864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fc6:	e011      	b.n	8003fec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d012      	beq.n	8003ff6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3310      	adds	r3, #16
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fd2b 	bl	8004a30 <xTaskRemoveFromEventList>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fe0:	f000 fe02 	bl	8004be8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	dce9      	bgt.n	8003fc8 <prvUnlockQueue+0x60>
 8003ff4:	e000      	b.n	8003ff8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ff6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	22ff      	movs	r2, #255	; 0xff
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004000:	f001 fc60 	bl	80058c4 <vPortExitCritical>
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004014:	f001 fc26 	bl	8005864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004020:	2301      	movs	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e001      	b.n	800402a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800402a:	f001 fc4b 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 800402e:	68fb      	ldr	r3, [r7, #12]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004040:	f001 fc10 	bl	8005864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404c:	429a      	cmp	r2, r3
 800404e:	d102      	bne.n	8004056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e001      	b.n	800405a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800405a:	f001 fc33 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	e014      	b.n	80040a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <vQueueAddToRegistry+0x50>)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004084:	490c      	ldr	r1, [pc, #48]	; (80040b8 <vQueueAddToRegistry+0x50>)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <vQueueAddToRegistry+0x50>)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800409a:	e006      	b.n	80040aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b07      	cmp	r3, #7
 80040a6:	d9e7      	bls.n	8004078 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	200008dc 	.word	0x200008dc

080040bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040cc:	f001 fbca 	bl	8005864 <vPortEnterCritical>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d6:	b25b      	sxtb	r3, r3
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d103      	bne.n	80040e6 <vQueueWaitForMessageRestricted+0x2a>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d103      	bne.n	80040fc <vQueueWaitForMessageRestricted+0x40>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040fc:	f001 fbe2 	bl	80058c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fc61 	bl	80049d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004116:	6978      	ldr	r0, [r7, #20]
 8004118:	f7ff ff26 	bl	8003f68 <prvUnlockQueue>
	}
 800411c:	bf00      	nop
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08e      	sub	sp, #56	; 0x38
 8004128:	af04      	add	r7, sp, #16
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	623b      	str	r3, [r7, #32]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xTaskCreateStatic+0x46>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	61fb      	str	r3, [r7, #28]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800416a:	23bc      	movs	r3, #188	; 0xbc
 800416c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2bbc      	cmp	r3, #188	; 0xbc
 8004172:	d00a      	beq.n	800418a <xTaskCreateStatic+0x66>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61bb      	str	r3, [r7, #24]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800418a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01e      	beq.n	80041d0 <xTaskCreateStatic+0xac>
 8004192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041aa:	2300      	movs	r3, #0
 80041ac:	9303      	str	r3, [sp, #12]
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f850 	bl	8004268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ca:	f000 f8f3 	bl	80043b4 <prvAddNewTaskToReadyList>
 80041ce:	e001      	b.n	80041d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041d4:	697b      	ldr	r3, [r7, #20]
	}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3728      	adds	r7, #40	; 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b08c      	sub	sp, #48	; 0x30
 80041e2:	af04      	add	r7, sp, #16
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 fc58 	bl	8005aa8 <pvPortMalloc>
 80041f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00e      	beq.n	800421e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004200:	20bc      	movs	r0, #188	; 0xbc
 8004202:	f001 fc51 	bl	8005aa8 <pvPortMalloc>
 8004206:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
 8004214:	e005      	b.n	8004222 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f001 fd12 	bl	8005c40 <vPortFree>
 800421c:	e001      	b.n	8004222 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d017      	beq.n	8004258 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	2300      	movs	r3, #0
 8004234:	9303      	str	r3, [sp, #12]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	9302      	str	r3, [sp, #8]
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f80e 	bl	8004268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800424c:	69f8      	ldr	r0, [r7, #28]
 800424e:	f000 f8b1 	bl	80043b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004252:	2301      	movs	r3, #1
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e002      	b.n	800425e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004258:	f04f 33ff 	mov.w	r3, #4294967295
 800425c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800425e:	69bb      	ldr	r3, [r7, #24]
	}
 8004260:	4618      	mov	r0, r3
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	461a      	mov	r2, r3
 8004280:	21a5      	movs	r1, #165	; 0xa5
 8004282:	f001 fe2f 	bl	8005ee4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004290:	3b01      	subs	r3, #1
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f023 0307 	bic.w	r3, r3, #7
 800429e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	617b      	str	r3, [r7, #20]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01f      	beq.n	8004306 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	e012      	b.n	80042f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	7819      	ldrb	r1, [r3, #0]
 80042d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	3334      	adds	r3, #52	; 0x34
 80042dc:	460a      	mov	r2, r1
 80042de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d006      	beq.n	80042fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3301      	adds	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b0f      	cmp	r3, #15
 80042f6:	d9e9      	bls.n	80042cc <prvInitialiseNewTask+0x64>
 80042f8:	e000      	b.n	80042fc <prvInitialiseNewTask+0x94>
			{
				break;
 80042fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004304:	e003      	b.n	800430e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2b37      	cmp	r3, #55	; 0x37
 8004312:	d901      	bls.n	8004318 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004314:	2337      	movs	r3, #55	; 0x37
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2200      	movs	r2, #0
 8004328:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	3304      	adds	r3, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f978 	bl	8003624 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	3318      	adds	r3, #24
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f973 	bl	8003624 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	2200      	movs	r2, #0
 8004360:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	3354      	adds	r3, #84	; 0x54
 8004368:	2260      	movs	r2, #96	; 0x60
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f001 fdb9 	bl	8005ee4 <memset>
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <prvInitialiseNewTask+0x140>)
 8004376:	659a      	str	r2, [r3, #88]	; 0x58
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <prvInitialiseNewTask+0x144>)
 800437c:	65da      	str	r2, [r3, #92]	; 0x5c
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <prvInitialiseNewTask+0x148>)
 8004382:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	69b8      	ldr	r0, [r7, #24]
 800438a:	f001 f941 	bl	8005610 <pxPortInitialiseStack>
 800438e:	4602      	mov	r2, r0
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a0:	bf00      	nop
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	0800616c 	.word	0x0800616c
 80043ac:	0800618c 	.word	0x0800618c
 80043b0:	0800614c 	.word	0x0800614c

080043b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043bc:	f001 fa52 	bl	8005864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043c0:	4b2d      	ldr	r3, [pc, #180]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a2c      	ldr	r2, [pc, #176]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 80043c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043d2:	4a2a      	ldr	r2, [pc, #168]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d110      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043e0:	f000 fc26 	bl	8004c30 <prvInitialiseTaskLists>
 80043e4:	e00d      	b.n	8004402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043e6:	4b26      	ldr	r3, [pc, #152]	; (8004480 <prvAddNewTaskToReadyList+0xcc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ee:	4b23      	ldr	r3, [pc, #140]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d802      	bhi.n	8004402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043fc:	4a1f      	ldr	r2, [pc, #124]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <prvAddNewTaskToReadyList+0xd0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <prvAddNewTaskToReadyList+0xd0>)
 800440a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800440c:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <prvAddNewTaskToReadyList+0xd0>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <prvAddNewTaskToReadyList+0xd4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d903      	bls.n	8004428 <prvAddNewTaskToReadyList+0x74>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a18      	ldr	r2, [pc, #96]	; (8004488 <prvAddNewTaskToReadyList+0xd4>)
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <prvAddNewTaskToReadyList+0xd8>)
 8004436:	441a      	add	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7ff f8fd 	bl	800363e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004444:	f001 fa3e 	bl	80058c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004448:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <prvAddNewTaskToReadyList+0xcc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	429a      	cmp	r2, r3
 800445c:	d207      	bcs.n	800446e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <prvAddNewTaskToReadyList+0xdc>)
 8004460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000df0 	.word	0x20000df0
 800447c:	2000091c 	.word	0x2000091c
 8004480:	20000dfc 	.word	0x20000dfc
 8004484:	20000e0c 	.word	0x20000e0c
 8004488:	20000df8 	.word	0x20000df8
 800448c:	20000920 	.word	0x20000920
 8004490:	e000ed04 	.word	0xe000ed04

08004494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d017      	beq.n	80044d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044a6:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <vTaskDelay+0x60>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <vTaskDelay+0x30>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60bb      	str	r3, [r7, #8]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80044c4:	f000 f88a 	bl	80045dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044c8:	2100      	movs	r1, #0
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fcfe 	bl	8004ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044d0:	f000 f892 	bl	80045f8 <xTaskResumeAll>
 80044d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <vTaskDelay+0x64>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000e18 	.word	0x20000e18
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800450a:	463a      	mov	r2, r7
 800450c:	1d39      	adds	r1, r7, #4
 800450e:	f107 0308 	add.w	r3, r7, #8
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f832 	bl	800357c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	9202      	str	r2, [sp, #8]
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	2300      	movs	r3, #0
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	2300      	movs	r3, #0
 8004528:	460a      	mov	r2, r1
 800452a:	4924      	ldr	r1, [pc, #144]	; (80045bc <vTaskStartScheduler+0xc0>)
 800452c:	4824      	ldr	r0, [pc, #144]	; (80045c0 <vTaskStartScheduler+0xc4>)
 800452e:	f7ff fdf9 	bl	8004124 <xTaskCreateStatic>
 8004532:	4603      	mov	r3, r0
 8004534:	4a23      	ldr	r2, [pc, #140]	; (80045c4 <vTaskStartScheduler+0xc8>)
 8004536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <vTaskStartScheduler+0xc8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004540:	2301      	movs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e001      	b.n	800454a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d102      	bne.n	8004556 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004550:	f000 fd10 	bl	8004f74 <xTimerCreateTimerTask>
 8004554:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d11b      	bne.n	8004594 <vTaskStartScheduler+0x98>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	613b      	str	r3, [r7, #16]
}
 800456e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004570:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <vTaskStartScheduler+0xcc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3354      	adds	r3, #84	; 0x54
 8004576:	4a15      	ldr	r2, [pc, #84]	; (80045cc <vTaskStartScheduler+0xd0>)
 8004578:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <vTaskStartScheduler+0xd4>)
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <vTaskStartScheduler+0xd8>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004588:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <vTaskStartScheduler+0xdc>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800458e:	f001 f8c7 	bl	8005720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004592:	e00e      	b.n	80045b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d10a      	bne.n	80045b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	60fb      	str	r3, [r7, #12]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <vTaskStartScheduler+0xb4>
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	080060dc 	.word	0x080060dc
 80045c0:	08004c01 	.word	0x08004c01
 80045c4:	20000e14 	.word	0x20000e14
 80045c8:	2000091c 	.word	0x2000091c
 80045cc:	20000010 	.word	0x20000010
 80045d0:	20000e10 	.word	0x20000e10
 80045d4:	20000dfc 	.word	0x20000dfc
 80045d8:	20000df4 	.word	0x20000df4

080045dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <vTaskSuspendAll+0x18>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	4a03      	ldr	r2, [pc, #12]	; (80045f4 <vTaskSuspendAll+0x18>)
 80045e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80045ea:	bf00      	nop
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	20000e18 	.word	0x20000e18

080045f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004606:	4b42      	ldr	r3, [pc, #264]	; (8004710 <xTaskResumeAll+0x118>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <xTaskResumeAll+0x2c>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	603b      	str	r3, [r7, #0]
}
 8004620:	bf00      	nop
 8004622:	e7fe      	b.n	8004622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004624:	f001 f91e 	bl	8005864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004628:	4b39      	ldr	r3, [pc, #228]	; (8004710 <xTaskResumeAll+0x118>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3b01      	subs	r3, #1
 800462e:	4a38      	ldr	r2, [pc, #224]	; (8004710 <xTaskResumeAll+0x118>)
 8004630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004632:	4b37      	ldr	r3, [pc, #220]	; (8004710 <xTaskResumeAll+0x118>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d162      	bne.n	8004700 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800463a:	4b36      	ldr	r3, [pc, #216]	; (8004714 <xTaskResumeAll+0x11c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d05e      	beq.n	8004700 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004642:	e02f      	b.n	80046a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <xTaskResumeAll+0x120>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3318      	adds	r3, #24
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff f851 	bl	80036f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3304      	adds	r3, #4
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff f84c 	bl	80036f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <xTaskResumeAll+0x124>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d903      	bls.n	8004674 <xTaskResumeAll+0x7c>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a2a      	ldr	r2, [pc, #168]	; (800471c <xTaskResumeAll+0x124>)
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <xTaskResumeAll+0x128>)
 8004682:	441a      	add	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7fe ffd7 	bl	800363e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <xTaskResumeAll+0x12c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <xTaskResumeAll+0x130>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046a4:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <xTaskResumeAll+0x120>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1cb      	bne.n	8004644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046b2:	f000 fb5f 	bl	8004d74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <xTaskResumeAll+0x134>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046c2:	f000 f847 	bl	8004754 <xTaskIncrementTick>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <xTaskResumeAll+0x130>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f1      	bne.n	80046c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <xTaskResumeAll+0x134>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046e4:	4b10      	ldr	r3, [pc, #64]	; (8004728 <xTaskResumeAll+0x130>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <xTaskResumeAll+0x138>)
 80046f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004700:	f001 f8e0 	bl	80058c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004704:	68bb      	ldr	r3, [r7, #8]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000e18 	.word	0x20000e18
 8004714:	20000df0 	.word	0x20000df0
 8004718:	20000db0 	.word	0x20000db0
 800471c:	20000df8 	.word	0x20000df8
 8004720:	20000920 	.word	0x20000920
 8004724:	2000091c 	.word	0x2000091c
 8004728:	20000e04 	.word	0x20000e04
 800472c:	20000e00 	.word	0x20000e00
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <xTaskGetTickCount+0x1c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004740:	687b      	ldr	r3, [r7, #4]
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000df4 	.word	0x20000df4

08004754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800475e:	4b4f      	ldr	r3, [pc, #316]	; (800489c <xTaskIncrementTick+0x148>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 808f 	bne.w	8004886 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004768:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <xTaskIncrementTick+0x14c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004770:	4a4b      	ldr	r2, [pc, #300]	; (80048a0 <xTaskIncrementTick+0x14c>)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d120      	bne.n	80047be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800477c:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <xTaskIncrementTick+0x150>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <xTaskIncrementTick+0x48>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	603b      	str	r3, [r7, #0]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <xTaskIncrementTick+0x46>
 800479c:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <xTaskIncrementTick+0x150>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <xTaskIncrementTick+0x154>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a3f      	ldr	r2, [pc, #252]	; (80048a4 <xTaskIncrementTick+0x150>)
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	4a3f      	ldr	r2, [pc, #252]	; (80048a8 <xTaskIncrementTick+0x154>)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <xTaskIncrementTick+0x158>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <xTaskIncrementTick+0x158>)
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	f000 fadb 	bl	8004d74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047be:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <xTaskIncrementTick+0x15c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d349      	bcc.n	800485c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <xTaskIncrementTick+0x150>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d2:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <xTaskIncrementTick+0x15c>)
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295
 80047d8:	601a      	str	r2, [r3, #0]
					break;
 80047da:	e03f      	b.n	800485c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047dc:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xTaskIncrementTick+0x150>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d203      	bcs.n	80047fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047f4:	4a2e      	ldr	r2, [pc, #184]	; (80048b0 <xTaskIncrementTick+0x15c>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047fa:	e02f      	b.n	800485c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3304      	adds	r3, #4
 8004800:	4618      	mov	r0, r3
 8004802:	f7fe ff79 	bl	80036f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3318      	adds	r3, #24
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe ff70 	bl	80036f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <xTaskIncrementTick+0x160>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d903      	bls.n	800482c <xTaskIncrementTick+0xd8>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <xTaskIncrementTick+0x160>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <xTaskIncrementTick+0x164>)
 800483a:	441a      	add	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe fefb 	bl	800363e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <xTaskIncrementTick+0x168>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	429a      	cmp	r2, r3
 8004854:	d3b8      	bcc.n	80047c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485a:	e7b5      	b.n	80047c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <xTaskIncrementTick+0x168>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	4915      	ldr	r1, [pc, #84]	; (80048b8 <xTaskIncrementTick+0x164>)
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d901      	bls.n	8004878 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004874:	2301      	movs	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004878:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <xTaskIncrementTick+0x16c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e004      	b.n	8004890 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <xTaskIncrementTick+0x170>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <xTaskIncrementTick+0x170>)
 800488e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004890:	697b      	ldr	r3, [r7, #20]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000e18 	.word	0x20000e18
 80048a0:	20000df4 	.word	0x20000df4
 80048a4:	20000da8 	.word	0x20000da8
 80048a8:	20000dac 	.word	0x20000dac
 80048ac:	20000e08 	.word	0x20000e08
 80048b0:	20000e10 	.word	0x20000e10
 80048b4:	20000df8 	.word	0x20000df8
 80048b8:	20000920 	.word	0x20000920
 80048bc:	2000091c 	.word	0x2000091c
 80048c0:	20000e04 	.word	0x20000e04
 80048c4:	20000e00 	.word	0x20000e00

080048c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <vTaskSwitchContext+0xb0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048d6:	4b29      	ldr	r3, [pc, #164]	; (800497c <vTaskSwitchContext+0xb4>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048dc:	e046      	b.n	800496c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80048de:	4b27      	ldr	r3, [pc, #156]	; (800497c <vTaskSwitchContext+0xb4>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e4:	4b26      	ldr	r3, [pc, #152]	; (8004980 <vTaskSwitchContext+0xb8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e010      	b.n	800490e <vTaskSwitchContext+0x46>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vTaskSwitchContext+0x40>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vTaskSwitchContext+0x3e>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	491d      	ldr	r1, [pc, #116]	; (8004984 <vTaskSwitchContext+0xbc>)
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0e4      	beq.n	80048ec <vTaskSwitchContext+0x24>
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <vTaskSwitchContext+0xbc>)
 800492e:	4413      	add	r3, r2
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3308      	adds	r3, #8
 8004944:	429a      	cmp	r2, r3
 8004946:	d104      	bne.n	8004952 <vTaskSwitchContext+0x8a>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a0b      	ldr	r2, [pc, #44]	; (8004988 <vTaskSwitchContext+0xc0>)
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <vTaskSwitchContext+0xb8>)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <vTaskSwitchContext+0xc0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3354      	adds	r3, #84	; 0x54
 8004968:	4a08      	ldr	r2, [pc, #32]	; (800498c <vTaskSwitchContext+0xc4>)
 800496a:	6013      	str	r3, [r2, #0]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000e18 	.word	0x20000e18
 800497c:	20000e04 	.word	0x20000e04
 8004980:	20000df8 	.word	0x20000df8
 8004984:	20000920 	.word	0x20000920
 8004988:	2000091c 	.word	0x2000091c
 800498c:	20000010 	.word	0x20000010

08004990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60fb      	str	r3, [r7, #12]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <vTaskPlaceOnEventList+0x44>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fe fe61 	bl	8003686 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049c4:	2101      	movs	r1, #1
 80049c6:	6838      	ldr	r0, [r7, #0]
 80049c8:	f000 fa80 	bl	8004ecc <prvAddCurrentTaskToDelayedList>
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	2000091c 	.word	0x2000091c

080049d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	617b      	str	r3, [r7, #20]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <vTaskPlaceOnEventListRestricted+0x54>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3318      	adds	r3, #24
 8004a06:	4619      	mov	r1, r3
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7fe fe18 	bl	800363e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f000 fa55 	bl	8004ecc <prvAddCurrentTaskToDelayedList>
	}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000091c 	.word	0x2000091c

08004a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	60fb      	str	r3, [r7, #12]
}
 8004a58:	bf00      	nop
 8004a5a:	e7fe      	b.n	8004a5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	3318      	adds	r3, #24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fe49 	bl	80036f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a66:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <xTaskRemoveFromEventList+0xb0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11d      	bne.n	8004aaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fe40 	bl	80036f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <xTaskRemoveFromEventList+0xb4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d903      	bls.n	8004a8c <xTaskRemoveFromEventList+0x5c>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <xTaskRemoveFromEventList+0xb4>)
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <xTaskRemoveFromEventList+0xb8>)
 8004a9a:	441a      	add	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe fdcb 	bl	800363e <vListInsertEnd>
 8004aa8:	e005      	b.n	8004ab6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3318      	adds	r3, #24
 8004aae:	4619      	mov	r1, r3
 8004ab0:	480e      	ldr	r0, [pc, #56]	; (8004aec <xTaskRemoveFromEventList+0xbc>)
 8004ab2:	f7fe fdc4 	bl	800363e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <xTaskRemoveFromEventList+0xc0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d905      	bls.n	8004ad0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <xTaskRemoveFromEventList+0xc4>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e001      	b.n	8004ad4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ad4:	697b      	ldr	r3, [r7, #20]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000e18 	.word	0x20000e18
 8004ae4:	20000df8 	.word	0x20000df8
 8004ae8:	20000920 	.word	0x20000920
 8004aec:	20000db0 	.word	0x20000db0
 8004af0:	2000091c 	.word	0x2000091c
 8004af4:	20000e04 	.word	0x20000e04

08004af8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <vTaskInternalSetTimeOutState+0x24>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <vTaskInternalSetTimeOutState+0x28>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	605a      	str	r2, [r3, #4]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000e08 	.word	0x20000e08
 8004b20:	20000df4 	.word	0x20000df4

08004b24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	613b      	str	r3, [r7, #16]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60fb      	str	r3, [r7, #12]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b66:	f000 fe7d 	bl	8005864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <xTaskCheckForTimeOut+0xbc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d102      	bne.n	8004b8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e023      	b.n	8004bd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <xTaskCheckForTimeOut+0xc0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d007      	beq.n	8004ba6 <xTaskCheckForTimeOut+0x82>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e015      	b.n	8004bd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d20b      	bcs.n	8004bc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad2      	subs	r2, r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff9b 	bl	8004af8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	e004      	b.n	8004bd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bd2:	f000 fe77 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000df4 	.word	0x20000df4
 8004be4:	20000e08 	.word	0x20000e08

08004be8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bec:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <vTaskMissedYield+0x14>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	20000e04 	.word	0x20000e04

08004c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c08:	f000 f852 	bl	8004cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <prvIdleTask+0x28>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d9f9      	bls.n	8004c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <prvIdleTask+0x2c>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c24:	e7f0      	b.n	8004c08 <prvIdleTask+0x8>
 8004c26:	bf00      	nop
 8004c28:	20000920 	.word	0x20000920
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	e00c      	b.n	8004c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <prvInitialiseTaskLists+0x60>)
 8004c48:	4413      	add	r3, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fcca 	bl	80035e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3301      	adds	r3, #1
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b37      	cmp	r3, #55	; 0x37
 8004c5a:	d9ef      	bls.n	8004c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c5c:	480d      	ldr	r0, [pc, #52]	; (8004c94 <prvInitialiseTaskLists+0x64>)
 8004c5e:	f7fe fcc1 	bl	80035e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c62:	480d      	ldr	r0, [pc, #52]	; (8004c98 <prvInitialiseTaskLists+0x68>)
 8004c64:	f7fe fcbe 	bl	80035e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c68:	480c      	ldr	r0, [pc, #48]	; (8004c9c <prvInitialiseTaskLists+0x6c>)
 8004c6a:	f7fe fcbb 	bl	80035e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c6e:	480c      	ldr	r0, [pc, #48]	; (8004ca0 <prvInitialiseTaskLists+0x70>)
 8004c70:	f7fe fcb8 	bl	80035e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c74:	480b      	ldr	r0, [pc, #44]	; (8004ca4 <prvInitialiseTaskLists+0x74>)
 8004c76:	f7fe fcb5 	bl	80035e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <prvInitialiseTaskLists+0x78>)
 8004c7c:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <prvInitialiseTaskLists+0x64>)
 8004c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <prvInitialiseTaskLists+0x7c>)
 8004c82:	4a05      	ldr	r2, [pc, #20]	; (8004c98 <prvInitialiseTaskLists+0x68>)
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000920 	.word	0x20000920
 8004c94:	20000d80 	.word	0x20000d80
 8004c98:	20000d94 	.word	0x20000d94
 8004c9c:	20000db0 	.word	0x20000db0
 8004ca0:	20000dc4 	.word	0x20000dc4
 8004ca4:	20000ddc 	.word	0x20000ddc
 8004ca8:	20000da8 	.word	0x20000da8
 8004cac:	20000dac 	.word	0x20000dac

08004cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cb6:	e019      	b.n	8004cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cb8:	f000 fdd4 	bl	8005864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <prvCheckTasksWaitingTermination+0x50>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe fd15 	bl	80036f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <prvCheckTasksWaitingTermination+0x54>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <prvCheckTasksWaitingTermination+0x54>)
 8004cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <prvCheckTasksWaitingTermination+0x58>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <prvCheckTasksWaitingTermination+0x58>)
 8004ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ce2:	f000 fdef 	bl	80058c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f810 	bl	8004d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <prvCheckTasksWaitingTermination+0x58>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e1      	bne.n	8004cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000dc4 	.word	0x20000dc4
 8004d04:	20000df0 	.word	0x20000df0
 8004d08:	20000dd8 	.word	0x20000dd8

08004d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3354      	adds	r3, #84	; 0x54
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 f8f9 	bl	8005f10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 ff87 	bl	8005c40 <vPortFree>
				vPortFree( pxTCB );
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 ff84 	bl	8005c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d38:	e018      	b.n	8004d6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d103      	bne.n	8004d4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 ff7b 	bl	8005c40 <vPortFree>
	}
 8004d4a:	e00f      	b.n	8004d6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d00a      	beq.n	8004d6c <prvDeleteTCB+0x60>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60fb      	str	r3, [r7, #12]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <prvDeleteTCB+0x5e>
	}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <prvResetNextTaskUnblockTime+0x38>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <prvResetNextTaskUnblockTime+0x3c>)
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d8c:	e008      	b.n	8004da0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <prvResetNextTaskUnblockTime+0x38>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <prvResetNextTaskUnblockTime+0x3c>)
 8004d9e:	6013      	str	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000da8 	.word	0x20000da8
 8004db0:	20000e10 	.word	0x20000e10

08004db4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <xTaskGetSchedulerState+0x34>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	e008      	b.n	8004dda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc8:	4b08      	ldr	r3, [pc, #32]	; (8004dec <xTaskGetSchedulerState+0x38>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	e001      	b.n	8004dda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dda:	687b      	ldr	r3, [r7, #4]
	}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	20000dfc 	.word	0x20000dfc
 8004dec:	20000e18 	.word	0x20000e18

08004df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d056      	beq.n	8004eb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e06:	4b2e      	ldr	r3, [pc, #184]	; (8004ec0 <xTaskPriorityDisinherit+0xd0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d00a      	beq.n	8004e26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60bb      	str	r3, [r7, #8]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	1e5a      	subs	r2, r3, #1
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d02c      	beq.n	8004eb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d128      	bne.n	8004eb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fc46 	bl	80036f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <xTaskPriorityDisinherit+0xd4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d903      	bls.n	8004e94 <xTaskPriorityDisinherit+0xa4>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <xTaskPriorityDisinherit+0xd4>)
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <xTaskPriorityDisinherit+0xd8>)
 8004ea2:	441a      	add	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7fe fbc7 	bl	800363e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004eb4:	697b      	ldr	r3, [r7, #20]
	}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	2000091c 	.word	0x2000091c
 8004ec4:	20000df8 	.word	0x20000df8
 8004ec8:	20000920 	.word	0x20000920

08004ecc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fc08 	bl	80036f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d10a      	bne.n	8004f06 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4819      	ldr	r0, [pc, #100]	; (8004f64 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f00:	f7fe fb9d 	bl	800363e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f04:	e026      	b.n	8004f54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d209      	bcs.n	8004f32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fe fbab 	bl	8003686 <vListInsert>
}
 8004f30:	e010      	b.n	8004f54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f7fe fba1 	bl	8003686 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d202      	bcs.n	8004f54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6013      	str	r3, [r2, #0]
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000df4 	.word	0x20000df4
 8004f60:	2000091c 	.word	0x2000091c
 8004f64:	20000ddc 	.word	0x20000ddc
 8004f68:	20000dac 	.word	0x20000dac
 8004f6c:	20000da8 	.word	0x20000da8
 8004f70:	20000e10 	.word	0x20000e10

08004f74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f7e:	f000 fb07 	bl	8005590 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f82:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <xTimerCreateTimerTask+0x80>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d021      	beq.n	8004fce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f92:	1d3a      	adds	r2, r7, #4
 8004f94:	f107 0108 	add.w	r1, r7, #8
 8004f98:	f107 030c 	add.w	r3, r7, #12
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe fb07 	bl	80035b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	2302      	movs	r3, #2
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	4910      	ldr	r1, [pc, #64]	; (8004ff8 <xTimerCreateTimerTask+0x84>)
 8004fb6:	4811      	ldr	r0, [pc, #68]	; (8004ffc <xTimerCreateTimerTask+0x88>)
 8004fb8:	f7ff f8b4 	bl	8004124 <xTaskCreateStatic>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4a10      	ldr	r2, [pc, #64]	; (8005000 <xTimerCreateTimerTask+0x8c>)
 8004fc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <xTimerCreateTimerTask+0x8c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	613b      	str	r3, [r7, #16]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004fea:	697b      	ldr	r3, [r7, #20]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20000e4c 	.word	0x20000e4c
 8004ff8:	080060e4 	.word	0x080060e4
 8004ffc:	08005139 	.word	0x08005139
 8005000:	20000e50 	.word	0x20000e50

08005004 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	; 0x28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <xTimerGenericCommand+0x2e>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	623b      	str	r3, [r7, #32]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <xTimerGenericCommand+0x98>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d02a      	beq.n	8005090 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b05      	cmp	r3, #5
 800504a:	dc18      	bgt.n	800507e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800504c:	f7ff feb2 	bl	8004db4 <xTaskGetSchedulerState>
 8005050:	4603      	mov	r3, r0
 8005052:	2b02      	cmp	r3, #2
 8005054:	d109      	bne.n	800506a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <xTimerGenericCommand+0x98>)
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f107 0110 	add.w	r1, r7, #16
 800505e:	2300      	movs	r3, #0
 8005060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005062:	f7fe fc77 	bl	8003954 <xQueueGenericSend>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24
 8005068:	e012      	b.n	8005090 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <xTimerGenericCommand+0x98>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f107 0110 	add.w	r1, r7, #16
 8005072:	2300      	movs	r3, #0
 8005074:	2200      	movs	r2, #0
 8005076:	f7fe fc6d 	bl	8003954 <xQueueGenericSend>
 800507a:	6278      	str	r0, [r7, #36]	; 0x24
 800507c:	e008      	b.n	8005090 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <xTimerGenericCommand+0x98>)
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	f107 0110 	add.w	r1, r7, #16
 8005086:	2300      	movs	r3, #0
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	f7fe fd61 	bl	8003b50 <xQueueGenericSendFromISR>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005092:	4618      	mov	r0, r3
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000e4c 	.word	0x20000e4c

080050a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050aa:	4b22      	ldr	r3, [pc, #136]	; (8005134 <prvProcessExpiredTimer+0x94>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fe fb1d 	bl	80036f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d022      	beq.n	8005112 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	699a      	ldr	r2, [r3, #24]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	18d1      	adds	r1, r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	6978      	ldr	r0, [r7, #20]
 80050da:	f000 f8d1 	bl	8005280 <prvInsertTimerInActiveList>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01f      	beq.n	8005124 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050e4:	2300      	movs	r3, #0
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	2100      	movs	r1, #0
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f7ff ff88 	bl	8005004 <xTimerGenericCommand>
 80050f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d113      	bne.n	8005124 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60fb      	str	r3, [r7, #12]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	6978      	ldr	r0, [r7, #20]
 800512a:	4798      	blx	r3
}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000e44 	.word	0x20000e44

08005138 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005140:	f107 0308 	add.w	r3, r7, #8
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f857 	bl	80051f8 <prvGetNextExpireTime>
 800514a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4619      	mov	r1, r3
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f803 	bl	800515c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005156:	f000 f8d5 	bl	8005304 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800515a:	e7f1      	b.n	8005140 <prvTimerTask+0x8>

0800515c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005166:	f7ff fa39 	bl	80045dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f866 	bl	8005240 <prvSampleTimeNow>
 8005174:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d130      	bne.n	80051de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <prvProcessTimerOrBlockTask+0x3c>
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d806      	bhi.n	8005198 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800518a:	f7ff fa35 	bl	80045f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff85 	bl	80050a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005196:	e024      	b.n	80051e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <prvProcessTimerOrBlockTask+0x90>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <prvProcessTimerOrBlockTask+0x50>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <prvProcessTimerOrBlockTask+0x52>
 80051ac:	2300      	movs	r3, #0
 80051ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051b0:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <prvProcessTimerOrBlockTask+0x94>)
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	f7fe ff7d 	bl	80040bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051c2:	f7ff fa19 	bl	80045f8 <xTaskResumeAll>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <prvProcessTimerOrBlockTask+0x98>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
}
 80051dc:	e001      	b.n	80051e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051de:	f7ff fa0b 	bl	80045f8 <xTaskResumeAll>
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000e48 	.word	0x20000e48
 80051f0:	20000e4c 	.word	0x20000e4c
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005200:	4b0e      	ldr	r3, [pc, #56]	; (800523c <prvGetNextExpireTime+0x44>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <prvGetNextExpireTime+0x16>
 800520a:	2201      	movs	r2, #1
 800520c:	e000      	b.n	8005210 <prvGetNextExpireTime+0x18>
 800520e:	2200      	movs	r2, #0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <prvGetNextExpireTime+0x44>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e001      	b.n	800522c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800522c:	68fb      	ldr	r3, [r7, #12]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000e44 	.word	0x20000e44

08005240 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005248:	f7ff fa74 	bl	8004734 <xTaskGetTickCount>
 800524c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <prvSampleTimeNow+0x3c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	429a      	cmp	r2, r3
 8005256:	d205      	bcs.n	8005264 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005258:	f000 f936 	bl	80054c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	e002      	b.n	800526a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800526a:	4a04      	ldr	r2, [pc, #16]	; (800527c <prvSampleTimeNow+0x3c>)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005270:	68fb      	ldr	r3, [r7, #12]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000e54 	.word	0x20000e54

08005280 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d812      	bhi.n	80052cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad2      	subs	r2, r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d302      	bcc.n	80052ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e01b      	b.n	80052f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052ba:	4b10      	ldr	r3, [pc, #64]	; (80052fc <prvInsertTimerInActiveList+0x7c>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7fe f9de 	bl	8003686 <vListInsert>
 80052ca:	e012      	b.n	80052f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d206      	bcs.n	80052e2 <prvInsertTimerInActiveList+0x62>
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d302      	bcc.n	80052e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e007      	b.n	80052f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <prvInsertTimerInActiveList+0x80>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7fe f9ca 	bl	8003686 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052f2:	697b      	ldr	r3, [r7, #20]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000e48 	.word	0x20000e48
 8005300:	20000e44 	.word	0x20000e44

08005304 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08e      	sub	sp, #56	; 0x38
 8005308:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800530a:	e0ca      	b.n	80054a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	da18      	bge.n	8005344 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	3304      	adds	r3, #4
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	61fb      	str	r3, [r7, #28]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800533a:	6850      	ldr	r0, [r2, #4]
 800533c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800533e:	6892      	ldr	r2, [r2, #8]
 8005340:	4611      	mov	r1, r2
 8005342:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f2c0 80aa 	blt.w	80054a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe f9cb 	bl	80036f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005362:	463b      	mov	r3, r7
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ff6b 	bl	8005240 <prvSampleTimeNow>
 800536a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b09      	cmp	r3, #9
 8005370:	f200 8097 	bhi.w	80054a2 <prvProcessReceivedCommands+0x19e>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <prvProcessReceivedCommands+0x78>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053a5 	.word	0x080053a5
 8005388:	08005419 	.word	0x08005419
 800538c:	0800542d 	.word	0x0800542d
 8005390:	08005477 	.word	0x08005477
 8005394:	080053a5 	.word	0x080053a5
 8005398:	080053a5 	.word	0x080053a5
 800539c:	08005419 	.word	0x08005419
 80053a0:	0800542d 	.word	0x0800542d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	18d1      	adds	r1, r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c4:	f7ff ff5c 	bl	8005280 <prvInsertTimerInActiveList>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d069      	beq.n	80054a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05e      	beq.n	80054a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	441a      	add	r2, r3
 80053ec:	2300      	movs	r3, #0
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	2300      	movs	r3, #0
 80053f2:	2100      	movs	r1, #0
 80053f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f6:	f7ff fe05 	bl	8005004 <xTimerGenericCommand>
 80053fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d14f      	bne.n	80054a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	61bb      	str	r3, [r7, #24]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800542a:	e03a      	b.n	80054a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	b2da      	uxtb	r2, r3
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	617b      	str	r3, [r7, #20]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	18d1      	adds	r1, r2, r3
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005470:	f7ff ff06 	bl	8005280 <prvInsertTimerInActiveList>
					break;
 8005474:	e015      	b.n	80054a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d103      	bne.n	800548c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005486:	f000 fbdb 	bl	8005c40 <vPortFree>
 800548a:	e00a      	b.n	80054a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005492:	f023 0301 	bic.w	r3, r3, #1
 8005496:	b2da      	uxtb	r2, r3
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800549e:	e000      	b.n	80054a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <prvProcessReceivedCommands+0x1c0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	1d39      	adds	r1, r7, #4
 80054a8:	2200      	movs	r2, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fbec 	bl	8003c88 <xQueueReceive>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f47f af2a 	bne.w	800530c <prvProcessReceivedCommands+0x8>
	}
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	3730      	adds	r7, #48	; 0x30
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000e4c 	.word	0x20000e4c

080054c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054ce:	e048      	b.n	8005562 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <prvSwitchTimerLists+0xc0>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054da:	4b2b      	ldr	r3, [pc, #172]	; (8005588 <prvSwitchTimerLists+0xc0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe f905 	bl	80036f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d02e      	beq.n	8005562 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	429a      	cmp	r2, r3
 8005514:	d90e      	bls.n	8005534 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005522:	4b19      	ldr	r3, [pc, #100]	; (8005588 <prvSwitchTimerLists+0xc0>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3304      	adds	r3, #4
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f7fe f8aa 	bl	8003686 <vListInsert>
 8005532:	e016      	b.n	8005562 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005534:	2300      	movs	r3, #0
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	2300      	movs	r3, #0
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	2100      	movs	r1, #0
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff fd60 	bl	8005004 <xTimerGenericCommand>
 8005544:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	603b      	str	r3, [r7, #0]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <prvSwitchTimerLists+0xc0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1b1      	bne.n	80054d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <prvSwitchTimerLists+0xc0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <prvSwitchTimerLists+0xc4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a04      	ldr	r2, [pc, #16]	; (8005588 <prvSwitchTimerLists+0xc0>)
 8005578:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800557a:	4a04      	ldr	r2, [pc, #16]	; (800558c <prvSwitchTimerLists+0xc4>)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000e44 	.word	0x20000e44
 800558c:	20000e48 	.word	0x20000e48

08005590 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005596:	f000 f965 	bl	8005864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <prvCheckForValidListAndQueue+0x60>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d120      	bne.n	80055e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055a2:	4814      	ldr	r0, [pc, #80]	; (80055f4 <prvCheckForValidListAndQueue+0x64>)
 80055a4:	f7fe f81e 	bl	80035e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80055a8:	4813      	ldr	r0, [pc, #76]	; (80055f8 <prvCheckForValidListAndQueue+0x68>)
 80055aa:	f7fe f81b 	bl	80035e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <prvCheckForValidListAndQueue+0x6c>)
 80055b0:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <prvCheckForValidListAndQueue+0x64>)
 80055b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <prvCheckForValidListAndQueue+0x70>)
 80055b6:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <prvCheckForValidListAndQueue+0x68>)
 80055b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80055ba:	2300      	movs	r3, #0
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	4b11      	ldr	r3, [pc, #68]	; (8005604 <prvCheckForValidListAndQueue+0x74>)
 80055c0:	4a11      	ldr	r2, [pc, #68]	; (8005608 <prvCheckForValidListAndQueue+0x78>)
 80055c2:	2110      	movs	r1, #16
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7fe f929 	bl	800381c <xQueueGenericCreateStatic>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <prvCheckForValidListAndQueue+0x60>)
 80055ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80055d0:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <prvCheckForValidListAndQueue+0x60>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <prvCheckForValidListAndQueue+0x60>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	490b      	ldr	r1, [pc, #44]	; (800560c <prvCheckForValidListAndQueue+0x7c>)
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fd42 	bl	8004068 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055e4:	f000 f96e 	bl	80058c4 <vPortExitCritical>
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000e4c 	.word	0x20000e4c
 80055f4:	20000e1c 	.word	0x20000e1c
 80055f8:	20000e30 	.word	0x20000e30
 80055fc:	20000e44 	.word	0x20000e44
 8005600:	20000e48 	.word	0x20000e48
 8005604:	20000ef8 	.word	0x20000ef8
 8005608:	20000e58 	.word	0x20000e58
 800560c:	080060ec 	.word	0x080060ec

08005610 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3b04      	subs	r3, #4
 8005620:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3b04      	subs	r3, #4
 800562e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f023 0201 	bic.w	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3b04      	subs	r3, #4
 800563e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005640:	4a0c      	ldr	r2, [pc, #48]	; (8005674 <pxPortInitialiseStack+0x64>)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3b14      	subs	r3, #20
 800564a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3b04      	subs	r3, #4
 8005656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f06f 0202 	mvn.w	r2, #2
 800565e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b20      	subs	r3, #32
 8005664:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005666:	68fb      	ldr	r3, [r7, #12]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	08005679 	.word	0x08005679

08005678 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005682:	4b12      	ldr	r3, [pc, #72]	; (80056cc <prvTaskExitError+0x54>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d00a      	beq.n	80056a2 <prvTaskExitError+0x2a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60fb      	str	r3, [r7, #12]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <prvTaskExitError+0x28>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60bb      	str	r3, [r7, #8]
}
 80056b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056b6:	bf00      	nop
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0fc      	beq.n	80056b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056be:	bf00      	nop
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <pxCurrentTCBConst2>)
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	f380 8809 	msr	PSP, r0
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f380 8811 	msr	BASEPRI, r0
 80056ea:	4770      	bx	lr
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst2>:
 80056f0:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056f8:	4808      	ldr	r0, [pc, #32]	; (800571c <prvPortStartFirstTask+0x24>)
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f380 8808 	msr	MSP, r0
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8814 	msr	CONTROL, r0
 800570a:	b662      	cpsie	i
 800570c:	b661      	cpsie	f
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	df00      	svc	0
 8005718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800571a:	bf00      	nop
 800571c:	e000ed08 	.word	0xe000ed08

08005720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005726:	4b46      	ldr	r3, [pc, #280]	; (8005840 <xPortStartScheduler+0x120>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <xPortStartScheduler+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10a      	bne.n	8005746 <xPortStartScheduler+0x26>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005746:	4b3e      	ldr	r3, [pc, #248]	; (8005840 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3f      	ldr	r2, [pc, #252]	; (8005848 <xPortStartScheduler+0x128>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x46>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <xPortStartScheduler+0x12c>)
 8005768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	22ff      	movs	r2, #255	; 0xff
 8005776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <xPortStartScheduler+0x130>)
 800578c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <xPortStartScheduler+0x134>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005794:	e009      	b.n	80057aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <xPortStartScheduler+0x134>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <xPortStartScheduler+0x134>)
 800579e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d0ef      	beq.n	8005796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1c3 0307 	rsb	r3, r3, #7
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d00a      	beq.n	80057d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <xPortStartScheduler+0x134>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <xPortStartScheduler+0x134>)
 80057e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <xPortStartScheduler+0x134>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ea:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <xPortStartScheduler+0x134>)
 80057ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <xPortStartScheduler+0x138>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <xPortStartScheduler+0x138>)
 80057fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <xPortStartScheduler+0x138>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <xPortStartScheduler+0x138>)
 8005808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800580c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800580e:	f000 f8dd 	bl	80059cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <xPortStartScheduler+0x13c>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005818:	f000 f8fc 	bl	8005a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xPortStartScheduler+0x140>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <xPortStartScheduler+0x140>)
 8005822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005828:	f7ff ff66 	bl	80056f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800582c:	f7ff f84c 	bl	80048c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005830:	f7ff ff22 	bl	8005678 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	e000ed00 	.word	0xe000ed00
 8005844:	410fc271 	.word	0x410fc271
 8005848:	410fc270 	.word	0x410fc270
 800584c:	e000e400 	.word	0xe000e400
 8005850:	20000f48 	.word	0x20000f48
 8005854:	20000f4c 	.word	0x20000f4c
 8005858:	e000ed20 	.word	0xe000ed20
 800585c:	2000000c 	.word	0x2000000c
 8005860:	e000ef34 	.word	0xe000ef34

08005864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <vPortEnterCritical+0x58>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <vPortEnterCritical+0x58>)
 8005886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <vPortEnterCritical+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10f      	bne.n	80058b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortEnterCritical+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	603b      	str	r3, [r7, #0]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortEnterCritical+0x4a>
	}
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	2000000c 	.word	0x2000000c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <vPortExitCritical+0x50>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <vPortExitCritical+0x24>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <vPortExitCritical+0x50>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <vPortExitCritical+0x50>)
 80058f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <vPortExitCritical+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <vPortExitCritical+0x42>
 80058fa:	2300      	movs	r3, #0
 80058fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f383 8811 	msr	BASEPRI, r3
}
 8005904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
	...

08005920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005920:	f3ef 8009 	mrs	r0, PSP
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pxCurrentTCBConst>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f01e 0f10 	tst.w	lr, #16
 8005930:	bf08      	it	eq
 8005932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005944:	f380 8811 	msr	BASEPRI, r0
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f7fe ffba 	bl	80048c8 <vTaskSwitchContext>
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f380 8811 	msr	BASEPRI, r0
 800595c:	bc09      	pop	{r0, r3}
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	f01e 0f10 	tst.w	lr, #16
 800596a:	bf08      	it	eq
 800596c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005970:	f380 8809 	msr	PSP, r0
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst>:
 8005980:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f7fe fed7 	bl	8004754 <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <xPortSysTickHandler+0x40>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <vPortSetupTimerInterrupt+0x38>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vPortSetupTimerInterrupt+0x3c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <vPortSetupTimerInterrupt+0x40>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <vPortSetupTimerInterrupt+0x44>)
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010
 8005a04:	e000e018 	.word	0xe000e018
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	e000e014 	.word	0xe000e014

08005a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a24 <vPortEnableVFP+0x10>
 8005a18:	6801      	ldr	r1, [r0, #0]
 8005a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a1e:	6001      	str	r1, [r0, #0]
 8005a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a22:	bf00      	nop
 8005a24:	e000ed88 	.word	0xe000ed88

08005a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a2e:	f3ef 8305 	mrs	r3, IPSR
 8005a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d914      	bls.n	8005a64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <vPortValidateInterruptPriority+0x70>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <vPortValidateInterruptPriority+0x74>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	7afa      	ldrb	r2, [r7, #11]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d20a      	bcs.n	8005a64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <vPortValidateInterruptPriority+0x78>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <vPortValidateInterruptPriority+0x7c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d90a      	bls.n	8005a8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	603b      	str	r3, [r7, #0]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <vPortValidateInterruptPriority+0x60>
	}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	e000e3f0 	.word	0xe000e3f0
 8005a9c:	20000f48 	.word	0x20000f48
 8005aa0:	e000ed0c 	.word	0xe000ed0c
 8005aa4:	20000f4c 	.word	0x20000f4c

08005aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ab4:	f7fe fd92 	bl	80045dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ab8:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <pvPortMalloc+0x180>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ac0:	f000 f920 	bl	8005d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ac4:	4b59      	ldr	r3, [pc, #356]	; (8005c2c <pvPortMalloc+0x184>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 8093 	bne.w	8005bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01d      	beq.n	8005b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ad8:	2208      	movs	r2, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d014      	beq.n	8005b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f023 0307 	bic.w	r3, r3, #7
 8005af0:	3308      	adds	r3, #8
 8005af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <pvPortMalloc+0x6c>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	617b      	str	r3, [r7, #20]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d06e      	beq.n	8005bf8 <pvPortMalloc+0x150>
 8005b1a:	4b45      	ldr	r3, [pc, #276]	; (8005c30 <pvPortMalloc+0x188>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d869      	bhi.n	8005bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b24:	4b43      	ldr	r3, [pc, #268]	; (8005c34 <pvPortMalloc+0x18c>)
 8005b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b28:	4b42      	ldr	r3, [pc, #264]	; (8005c34 <pvPortMalloc+0x18c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b2e:	e004      	b.n	8005b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d903      	bls.n	8005b4c <pvPortMalloc+0xa4>
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f1      	bne.n	8005b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b4c:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <pvPortMalloc+0x180>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d050      	beq.n	8005bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	1ad2      	subs	r2, r2, r3
 8005b70:	2308      	movs	r3, #8
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d91f      	bls.n	8005bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	613b      	str	r3, [r7, #16]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	1ad2      	subs	r2, r2, r3
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bb2:	69b8      	ldr	r0, [r7, #24]
 8005bb4:	f000 f908 	bl	8005dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <pvPortMalloc+0x188>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	4a1b      	ldr	r2, [pc, #108]	; (8005c30 <pvPortMalloc+0x188>)
 8005bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <pvPortMalloc+0x188>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <pvPortMalloc+0x190>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d203      	bcs.n	8005bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bd2:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <pvPortMalloc+0x188>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <pvPortMalloc+0x190>)
 8005bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <pvPortMalloc+0x184>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <pvPortMalloc+0x194>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	4a11      	ldr	r2, [pc, #68]	; (8005c3c <pvPortMalloc+0x194>)
 8005bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bf8:	f7fe fcfe 	bl	80045f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <pvPortMalloc+0x174>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60fb      	str	r3, [r7, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <pvPortMalloc+0x172>
	return pvReturn;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3728      	adds	r7, #40	; 0x28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20001b58 	.word	0x20001b58
 8005c2c:	20001b6c 	.word	0x20001b6c
 8005c30:	20001b5c 	.word	0x20001b5c
 8005c34:	20001b50 	.word	0x20001b50
 8005c38:	20001b60 	.word	0x20001b60
 8005c3c:	20001b64 	.word	0x20001b64

08005c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04d      	beq.n	8005cee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c52:	2308      	movs	r3, #8
 8005c54:	425b      	negs	r3, r3
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4413      	add	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <vPortFree+0xb8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <vPortFree+0x44>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	60fb      	str	r3, [r7, #12]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <vPortFree+0x62>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	60bb      	str	r3, [r7, #8]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <vPortFree+0xb8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01e      	beq.n	8005cee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11a      	bne.n	8005cee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <vPortFree+0xb8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cc8:	f7fe fc88 	bl	80045dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <vPortFree+0xbc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <vPortFree+0xbc>)
 8005cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cda:	6938      	ldr	r0, [r7, #16]
 8005cdc:	f000 f874 	bl	8005dc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <vPortFree+0xc0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	4a06      	ldr	r2, [pc, #24]	; (8005d00 <vPortFree+0xc0>)
 8005ce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cea:	f7fe fc85 	bl	80045f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cee:	bf00      	nop
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20001b6c 	.word	0x20001b6c
 8005cfc:	20001b5c 	.word	0x20001b5c
 8005d00:	20001b68 	.word	0x20001b68

08005d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d10:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <prvHeapInit+0xac>)
 8005d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00c      	beq.n	8005d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3307      	adds	r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0307 	bic.w	r3, r3, #7
 8005d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <prvHeapInit+0xac>)
 8005d34:	4413      	add	r3, r2
 8005d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <prvHeapInit+0xb0>)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d42:	4b1c      	ldr	r3, [pc, #112]	; (8005db4 <prvHeapInit+0xb0>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d50:	2208      	movs	r2, #8
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <prvHeapInit+0xb4>)
 8005d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <prvHeapInit+0xb4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <prvHeapInit+0xb4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <prvHeapInit+0xb4>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <prvHeapInit+0xb8>)
 8005d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <prvHeapInit+0xbc>)
 8005d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d9c:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <prvHeapInit+0xc0>)
 8005d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005da2:	601a      	str	r2, [r3, #0]
}
 8005da4:	bf00      	nop
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	20000f50 	.word	0x20000f50
 8005db4:	20001b50 	.word	0x20001b50
 8005db8:	20001b58 	.word	0x20001b58
 8005dbc:	20001b60 	.word	0x20001b60
 8005dc0:	20001b5c 	.word	0x20001b5c
 8005dc4:	20001b6c 	.word	0x20001b6c

08005dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dd0:	4b28      	ldr	r3, [pc, #160]	; (8005e74 <prvInsertBlockIntoFreeList+0xac>)
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e002      	b.n	8005ddc <prvInsertBlockIntoFreeList+0x14>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d8f7      	bhi.n	8005dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4413      	add	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d108      	bne.n	8005e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	441a      	add	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d118      	bne.n	8005e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <prvInsertBlockIntoFreeList+0xb0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d00d      	beq.n	8005e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e008      	b.n	8005e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <prvInsertBlockIntoFreeList+0xb0>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e003      	b.n	8005e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d002      	beq.n	8005e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20001b50 	.word	0x20001b50
 8005e78:	20001b58 	.word	0x20001b58

08005e7c <__libc_init_array>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4d0d      	ldr	r5, [pc, #52]	; (8005eb4 <__libc_init_array+0x38>)
 8005e80:	4c0d      	ldr	r4, [pc, #52]	; (8005eb8 <__libc_init_array+0x3c>)
 8005e82:	1b64      	subs	r4, r4, r5
 8005e84:	10a4      	asrs	r4, r4, #2
 8005e86:	2600      	movs	r6, #0
 8005e88:	42a6      	cmp	r6, r4
 8005e8a:	d109      	bne.n	8005ea0 <__libc_init_array+0x24>
 8005e8c:	4d0b      	ldr	r5, [pc, #44]	; (8005ebc <__libc_init_array+0x40>)
 8005e8e:	4c0c      	ldr	r4, [pc, #48]	; (8005ec0 <__libc_init_array+0x44>)
 8005e90:	f000 f8f2 	bl	8006078 <_init>
 8005e94:	1b64      	subs	r4, r4, r5
 8005e96:	10a4      	asrs	r4, r4, #2
 8005e98:	2600      	movs	r6, #0
 8005e9a:	42a6      	cmp	r6, r4
 8005e9c:	d105      	bne.n	8005eaa <__libc_init_array+0x2e>
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea4:	4798      	blx	r3
 8005ea6:	3601      	adds	r6, #1
 8005ea8:	e7ee      	b.n	8005e88 <__libc_init_array+0xc>
 8005eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eae:	4798      	blx	r3
 8005eb0:	3601      	adds	r6, #1
 8005eb2:	e7f2      	b.n	8005e9a <__libc_init_array+0x1e>
 8005eb4:	080061ac 	.word	0x080061ac
 8005eb8:	080061ac 	.word	0x080061ac
 8005ebc:	080061ac 	.word	0x080061ac
 8005ec0:	080061b0 	.word	0x080061b0

08005ec4 <__retarget_lock_acquire_recursive>:
 8005ec4:	4770      	bx	lr

08005ec6 <__retarget_lock_release_recursive>:
 8005ec6:	4770      	bx	lr

08005ec8 <memcpy>:
 8005ec8:	440a      	add	r2, r1
 8005eca:	4291      	cmp	r1, r2
 8005ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ed0:	d100      	bne.n	8005ed4 <memcpy+0xc>
 8005ed2:	4770      	bx	lr
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	d1f9      	bne.n	8005ed6 <memcpy+0xe>
 8005ee2:	bd10      	pop	{r4, pc}

08005ee4 <memset>:
 8005ee4:	4402      	add	r2, r0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d100      	bne.n	8005eee <memset+0xa>
 8005eec:	4770      	bx	lr
 8005eee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef2:	e7f9      	b.n	8005ee8 <memset+0x4>

08005ef4 <cleanup_glue>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	6809      	ldr	r1, [r1, #0]
 8005efa:	4605      	mov	r5, r0
 8005efc:	b109      	cbz	r1, 8005f02 <cleanup_glue+0xe>
 8005efe:	f7ff fff9 	bl	8005ef4 <cleanup_glue>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4628      	mov	r0, r5
 8005f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f0a:	f000 b869 	b.w	8005fe0 <_free_r>
	...

08005f10 <_reclaim_reent>:
 8005f10:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <_reclaim_reent+0xb4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4283      	cmp	r3, r0
 8005f16:	b570      	push	{r4, r5, r6, lr}
 8005f18:	4604      	mov	r4, r0
 8005f1a:	d051      	beq.n	8005fc0 <_reclaim_reent+0xb0>
 8005f1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f1e:	b143      	cbz	r3, 8005f32 <_reclaim_reent+0x22>
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d14a      	bne.n	8005fbc <_reclaim_reent+0xac>
 8005f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f28:	6819      	ldr	r1, [r3, #0]
 8005f2a:	b111      	cbz	r1, 8005f32 <_reclaim_reent+0x22>
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f000 f857 	bl	8005fe0 <_free_r>
 8005f32:	6961      	ldr	r1, [r4, #20]
 8005f34:	b111      	cbz	r1, 8005f3c <_reclaim_reent+0x2c>
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 f852 	bl	8005fe0 <_free_r>
 8005f3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f3e:	b111      	cbz	r1, 8005f46 <_reclaim_reent+0x36>
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 f84d 	bl	8005fe0 <_free_r>
 8005f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f48:	b111      	cbz	r1, 8005f50 <_reclaim_reent+0x40>
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 f848 	bl	8005fe0 <_free_r>
 8005f50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005f52:	b111      	cbz	r1, 8005f5a <_reclaim_reent+0x4a>
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 f843 	bl	8005fe0 <_free_r>
 8005f5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f5c:	b111      	cbz	r1, 8005f64 <_reclaim_reent+0x54>
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 f83e 	bl	8005fe0 <_free_r>
 8005f64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005f66:	b111      	cbz	r1, 8005f6e <_reclaim_reent+0x5e>
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 f839 	bl	8005fe0 <_free_r>
 8005f6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005f70:	b111      	cbz	r1, 8005f78 <_reclaim_reent+0x68>
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 f834 	bl	8005fe0 <_free_r>
 8005f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f7a:	b111      	cbz	r1, 8005f82 <_reclaim_reent+0x72>
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 f82f 	bl	8005fe0 <_free_r>
 8005f82:	69a3      	ldr	r3, [r4, #24]
 8005f84:	b1e3      	cbz	r3, 8005fc0 <_reclaim_reent+0xb0>
 8005f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f88:	4620      	mov	r0, r4
 8005f8a:	4798      	blx	r3
 8005f8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f8e:	b1b9      	cbz	r1, 8005fc0 <_reclaim_reent+0xb0>
 8005f90:	4620      	mov	r0, r4
 8005f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f96:	f7ff bfad 	b.w	8005ef4 <cleanup_glue>
 8005f9a:	5949      	ldr	r1, [r1, r5]
 8005f9c:	b941      	cbnz	r1, 8005fb0 <_reclaim_reent+0xa0>
 8005f9e:	3504      	adds	r5, #4
 8005fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa2:	2d80      	cmp	r5, #128	; 0x80
 8005fa4:	68d9      	ldr	r1, [r3, #12]
 8005fa6:	d1f8      	bne.n	8005f9a <_reclaim_reent+0x8a>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 f819 	bl	8005fe0 <_free_r>
 8005fae:	e7ba      	b.n	8005f26 <_reclaim_reent+0x16>
 8005fb0:	680e      	ldr	r6, [r1, #0]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f814 	bl	8005fe0 <_free_r>
 8005fb8:	4631      	mov	r1, r6
 8005fba:	e7ef      	b.n	8005f9c <_reclaim_reent+0x8c>
 8005fbc:	2500      	movs	r5, #0
 8005fbe:	e7ef      	b.n	8005fa0 <_reclaim_reent+0x90>
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000010 	.word	0x20000010

08005fc8 <__malloc_lock>:
 8005fc8:	4801      	ldr	r0, [pc, #4]	; (8005fd0 <__malloc_lock+0x8>)
 8005fca:	f7ff bf7b 	b.w	8005ec4 <__retarget_lock_acquire_recursive>
 8005fce:	bf00      	nop
 8005fd0:	20001b70 	.word	0x20001b70

08005fd4 <__malloc_unlock>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	; (8005fdc <__malloc_unlock+0x8>)
 8005fd6:	f7ff bf76 	b.w	8005ec6 <__retarget_lock_release_recursive>
 8005fda:	bf00      	nop
 8005fdc:	20001b70 	.word	0x20001b70

08005fe0 <_free_r>:
 8005fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d044      	beq.n	8006070 <_free_r+0x90>
 8005fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fea:	9001      	str	r0, [sp, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f1a1 0404 	sub.w	r4, r1, #4
 8005ff2:	bfb8      	it	lt
 8005ff4:	18e4      	addlt	r4, r4, r3
 8005ff6:	f7ff ffe7 	bl	8005fc8 <__malloc_lock>
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	; (8006074 <_free_r+0x94>)
 8005ffc:	9801      	ldr	r0, [sp, #4]
 8005ffe:	6813      	ldr	r3, [r2, #0]
 8006000:	b933      	cbnz	r3, 8006010 <_free_r+0x30>
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	6014      	str	r4, [r2, #0]
 8006006:	b003      	add	sp, #12
 8006008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800600c:	f7ff bfe2 	b.w	8005fd4 <__malloc_unlock>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d908      	bls.n	8006026 <_free_r+0x46>
 8006014:	6825      	ldr	r5, [r4, #0]
 8006016:	1961      	adds	r1, r4, r5
 8006018:	428b      	cmp	r3, r1
 800601a:	bf01      	itttt	eq
 800601c:	6819      	ldreq	r1, [r3, #0]
 800601e:	685b      	ldreq	r3, [r3, #4]
 8006020:	1949      	addeq	r1, r1, r5
 8006022:	6021      	streq	r1, [r4, #0]
 8006024:	e7ed      	b.n	8006002 <_free_r+0x22>
 8006026:	461a      	mov	r2, r3
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	b10b      	cbz	r3, 8006030 <_free_r+0x50>
 800602c:	42a3      	cmp	r3, r4
 800602e:	d9fa      	bls.n	8006026 <_free_r+0x46>
 8006030:	6811      	ldr	r1, [r2, #0]
 8006032:	1855      	adds	r5, r2, r1
 8006034:	42a5      	cmp	r5, r4
 8006036:	d10b      	bne.n	8006050 <_free_r+0x70>
 8006038:	6824      	ldr	r4, [r4, #0]
 800603a:	4421      	add	r1, r4
 800603c:	1854      	adds	r4, r2, r1
 800603e:	42a3      	cmp	r3, r4
 8006040:	6011      	str	r1, [r2, #0]
 8006042:	d1e0      	bne.n	8006006 <_free_r+0x26>
 8006044:	681c      	ldr	r4, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	6053      	str	r3, [r2, #4]
 800604a:	4421      	add	r1, r4
 800604c:	6011      	str	r1, [r2, #0]
 800604e:	e7da      	b.n	8006006 <_free_r+0x26>
 8006050:	d902      	bls.n	8006058 <_free_r+0x78>
 8006052:	230c      	movs	r3, #12
 8006054:	6003      	str	r3, [r0, #0]
 8006056:	e7d6      	b.n	8006006 <_free_r+0x26>
 8006058:	6825      	ldr	r5, [r4, #0]
 800605a:	1961      	adds	r1, r4, r5
 800605c:	428b      	cmp	r3, r1
 800605e:	bf04      	itt	eq
 8006060:	6819      	ldreq	r1, [r3, #0]
 8006062:	685b      	ldreq	r3, [r3, #4]
 8006064:	6063      	str	r3, [r4, #4]
 8006066:	bf04      	itt	eq
 8006068:	1949      	addeq	r1, r1, r5
 800606a:	6021      	streq	r1, [r4, #0]
 800606c:	6054      	str	r4, [r2, #4]
 800606e:	e7ca      	b.n	8006006 <_free_r+0x26>
 8006070:	b003      	add	sp, #12
 8006072:	bd30      	pop	{r4, r5, pc}
 8006074:	20001b74 	.word	0x20001b74

08006078 <_init>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr

08006084 <_fini>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr
