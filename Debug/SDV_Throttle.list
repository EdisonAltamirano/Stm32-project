
SDV_Throttle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005230  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005574  08005574  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005574  08005574  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800557c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b30  20000074  080055f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ba4  080055f0  00021ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cf8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cf  00000000  00000000  00034d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00037e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00038f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000389f  00000000  00000000  00039f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001192b  00000000  00000000  0003d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c084c  00000000  00000000  0004f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f93e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000483c  00000000  00000000  0010f990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	080053f8 	.word	0x080053f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	080053f8 	.word	0x080053f8

08000220 <can_init>:
int cmp = 0;
extern volatile uint8_t g_panelModule;
extern volatile uint8_t g_sendInfopanel;
extern volatile uint8_t g_panelError;
extern volatile float data_panel;
void can_init(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0

	FDCAN_FilterTypeDef sFilterConfig;

	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000226:	2300      	movs	r3, #0
 8000228:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800022e:	2302      	movs	r3, #2
 8000230:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000232:	2301      	movs	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x111;
 8000236:	f240 1311 	movw	r3, #273	; 0x111
 800023a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0xFFF;
 800023c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000240:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000242:	463b      	mov	r3, r7
 8000244:	4619      	mov	r1, r3
 8000246:	480f      	ldr	r0, [pc, #60]	; (8000284 <can_init+0x64>)
 8000248:	f000 fd96 	bl	8000d78 <HAL_FDCAN_ConfigFilter>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <can_init+0x36>
	  {
		Error_Handler();
 8000252:	f000 f9ab 	bl	80005ac <Error_Handler>
	  }
	  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <can_init+0x64>)
 8000258:	f000 fde8 	bl	8000e2c <HAL_FDCAN_Start>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <can_init+0x46>
	  {
		  Error_Handler();
 8000262:	f000 f9a3 	bl	80005ac <Error_Handler>
	  }
	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000266:	2200      	movs	r2, #0
 8000268:	2101      	movs	r1, #1
 800026a:	4806      	ldr	r0, [pc, #24]	; (8000284 <can_init+0x64>)
 800026c:	f000 fe06 	bl	8000e7c <HAL_FDCAN_ActivateNotification>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <can_init+0x5a>
	  {
	    /* Notification Error */
	    Error_Handler();
 8000276:	f000 f999 	bl	80005ac <Error_Handler>
	  }
}
 800027a:	bf00      	nop
 800027c:	3718      	adds	r7, #24
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000114 	.word	0x20000114

08000288 <can_task_panel>:
void sdv_autonomous_loop1(){
	ab++;
	//queue_can_msg_short(HEARTBEAT_ID, HAL_GetTick());
}
void can_task_panel(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN panel_task */
  /* Infinite loop */
  for(;;)
  {
		if(g_panelModule){
 800028c:	4b42      	ldr	r3, [pc, #264]	; (8000398 <can_task_panel+0x110>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d07a      	beq.n	800038c <can_task_panel+0x104>
			if(data_panel>=1 && data_panel<=16){
 8000296:	4b41      	ldr	r3, [pc, #260]	; (800039c <can_task_panel+0x114>)
 8000298:	edd3 7a00 	vldr	s15, [r3]
 800029c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80002a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002a8:	db67      	blt.n	800037a <can_task_panel+0xf2>
 80002aa:	4b3c      	ldr	r3, [pc, #240]	; (800039c <can_task_panel+0x114>)
 80002ac:	edd3 7a00 	vldr	s15, [r3]
 80002b0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80002b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002bc:	d85d      	bhi.n	800037a <can_task_panel+0xf2>
				if(data_panel>=10){
 80002be:	4b37      	ldr	r3, [pc, #220]	; (800039c <can_task_panel+0x114>)
 80002c0:	edd3 7a00 	vldr	s15, [r3]
 80002c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80002c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d0:	db2c      	blt.n	800032c <can_task_panel+0xa4>
					data_panel=data_panel-10;
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <can_task_panel+0x114>)
 80002d4:	edd3 7a00 	vldr	s15, [r3]
 80002d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80002dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80002e0:	4b2e      	ldr	r3, [pc, #184]	; (800039c <can_task_panel+0x114>)
 80002e2:	edc3 7a00 	vstr	s15, [r3]
					HAL_GPIO_WritePin(panel_leds[(int) data_panel].type, panel_leds[(int) data_panel].value, GPIO_PIN_RESET);
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <can_task_panel+0x114>)
 80002e8:	edd3 7a00 	vldr	s15, [r3]
 80002ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80002f0:	ee17 1a90 	vmov	r1, s15
 80002f4:	4a2a      	ldr	r2, [pc, #168]	; (80003a0 <can_task_panel+0x118>)
 80002f6:	460b      	mov	r3, r1
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	3304      	adds	r3, #4
 8000302:	6818      	ldr	r0, [r3, #0]
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <can_task_panel+0x114>)
 8000306:	edd3 7a00 	vldr	s15, [r3]
 800030a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800030e:	ee17 1a90 	vmov	r1, s15
 8000312:	4a23      	ldr	r2, [pc, #140]	; (80003a0 <can_task_panel+0x118>)
 8000314:	460b      	mov	r3, r1
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	440b      	add	r3, r1
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	3308      	adds	r3, #8
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	2200      	movs	r2, #0
 8000324:	4619      	mov	r1, r3
 8000326:	f001 fa15 	bl	8001754 <HAL_GPIO_WritePin>
				if(data_panel>=10){
 800032a:	e029      	b.n	8000380 <can_task_panel+0xf8>
				}
				else{
					HAL_GPIO_WritePin(panel_leds[(int) data_panel].type, panel_leds[(int) data_panel].value, GPIO_PIN_SET);
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <can_task_panel+0x114>)
 800032e:	edd3 7a00 	vldr	s15, [r3]
 8000332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000336:	ee17 1a90 	vmov	r1, s15
 800033a:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <can_task_panel+0x118>)
 800033c:	460b      	mov	r3, r1
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	440b      	add	r3, r1
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	3304      	adds	r3, #4
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <can_task_panel+0x114>)
 800034c:	edd3 7a00 	vldr	s15, [r3]
 8000350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000354:	ee17 1a90 	vmov	r1, s15
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <can_task_panel+0x118>)
 800035a:	460b      	mov	r3, r1
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	440b      	add	r3, r1
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	3308      	adds	r3, #8
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	f001 f9f2 	bl	8001754 <HAL_GPIO_WritePin>
					osDelay(1000);
 8000370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000374:	f002 faa6 	bl	80028c4 <osDelay>
				if(data_panel>=10){
 8000378:	e002      	b.n	8000380 <can_task_panel+0xf8>
				}
			}
			else{
				g_panelError = 1;
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <can_task_panel+0x11c>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
			//			HAL_GPIO_WritePin(panel_leds[i].type, panel_leds[i].value, GPIO_PIN_SET);
			//			osDelay(200);
			//			HAL_GPIO_WritePin(panel_leds[i].type, panel_leds[i].value, GPIO_PIN_RESET);
			//			osDelay(200);
			//		}
			g_panelModule = 0;
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <can_task_panel+0x110>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
			g_sendInfopanel = 1;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <can_task_panel+0x120>)
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
		}
	  osDelay(500);
 800038c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000390:	f002 fa98 	bl	80028c4 <osDelay>
		if(g_panelModule){
 8000394:	e77a      	b.n	800028c <can_task_panel+0x4>
 8000396:	bf00      	nop
 8000398:	20000108 	.word	0x20000108
 800039c:	2000010c 	.word	0x2000010c
 80003a0:	20000090 	.word	0x20000090
 80003a4:	20000111 	.word	0x20000111
 80003a8:	20000110 	.word	0x20000110

080003ac <can_task_pot>:
  }
  /* USER CODE END panel_task */
}
void can_task_pot(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	for(;;){
		osDelay(500);
 80003b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b4:	f002 fa86 	bl	80028c4 <osDelay>
 80003b8:	e7fa      	b.n	80003b0 <can_task_pot+0x4>

080003ba <can_task_lcd>:
	}
}

void can_task_lcd(){
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0
	for(;;){
		osDelay(500);
 80003be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c2:	f002 fa7f 	bl	80028c4 <osDelay>
 80003c6:	e7fa      	b.n	80003be <can_task_lcd+0x4>

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003cc:	f000 f9f9 	bl	80007c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d0:	f000 f846 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d4:	f000 f8ca 	bl	800056c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80003d8:	f000 f882 	bl	80004e0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  can_init();
 80003dc:	f7ff ff20 	bl	8000220 <can_init>
  /* Init scheduler */
  osKernelInitialize();
 80003e0:	f002 f994 	bl	800270c <osKernelInitialize>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003e4:	f002 f992 	bl	800270c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003e8:	4a11      	ldr	r2, [pc, #68]	; (8000430 <main+0x68>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	4811      	ldr	r0, [pc, #68]	; (8000434 <main+0x6c>)
 80003ee:	f002 f9d7 	bl	80027a0 <osThreadNew>
 80003f2:	4603      	mov	r3, r0
 80003f4:	4a10      	ldr	r2, [pc, #64]	; (8000438 <main+0x70>)
 80003f6:	6013      	str	r3, [r2, #0]

  /* creation of canTask_rx */
  //canTask_rxHandle = osThreadNew(can_rx_task, NULL, &canTask_rx_attributes);

  /* creation of canTask_panel */
  canTask_panelHandle = osThreadNew(can_task_panel, NULL, &canTask_panel_attributes);
 80003f8:	4a10      	ldr	r2, [pc, #64]	; (800043c <main+0x74>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	4810      	ldr	r0, [pc, #64]	; (8000440 <main+0x78>)
 80003fe:	f002 f9cf 	bl	80027a0 <osThreadNew>
 8000402:	4603      	mov	r3, r0
 8000404:	4a0f      	ldr	r2, [pc, #60]	; (8000444 <main+0x7c>)
 8000406:	6013      	str	r3, [r2, #0]

  /* creation of canTask_pot */
  canTask_potHandle = osThreadNew(can_task_pot, NULL, &canTask_pot_attributes);
 8000408:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <main+0x80>)
 800040a:	2100      	movs	r1, #0
 800040c:	480f      	ldr	r0, [pc, #60]	; (800044c <main+0x84>)
 800040e:	f002 f9c7 	bl	80027a0 <osThreadNew>
 8000412:	4603      	mov	r3, r0
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <main+0x88>)
 8000416:	6013      	str	r3, [r2, #0]

  /* creation of canTask_lcd */
  canTask_lcdHandle = osThreadNew(can_task_lcd, NULL, &canTask_lcd_attributes);
 8000418:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <main+0x8c>)
 800041a:	2100      	movs	r1, #0
 800041c:	480e      	ldr	r0, [pc, #56]	; (8000458 <main+0x90>)
 800041e:	f002 f9bf 	bl	80027a0 <osThreadNew>
 8000422:	4603      	mov	r3, r0
 8000424:	4a0d      	ldr	r2, [pc, #52]	; (800045c <main+0x94>)
 8000426:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000428:	f002 f994 	bl	8002754 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800042c:	e7fe      	b.n	800042c <main+0x64>
 800042e:	bf00      	nop
 8000430:	08005474 	.word	0x08005474
 8000434:	0800059d 	.word	0x0800059d
 8000438:	20000178 	.word	0x20000178
 800043c:	08005498 	.word	0x08005498
 8000440:	08000289 	.word	0x08000289
 8000444:	2000017c 	.word	0x2000017c
 8000448:	080054bc 	.word	0x080054bc
 800044c:	080003ad 	.word	0x080003ad
 8000450:	20000180 	.word	0x20000180
 8000454:	080054e0 	.word	0x080054e0
 8000458:	080003bb 	.word	0x080003bb
 800045c:	20000184 	.word	0x20000184

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b094      	sub	sp, #80	; 0x50
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	2238      	movs	r2, #56	; 0x38
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f004 fef8 	bl	8005264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000482:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000486:	f001 f97d 	bl	8001784 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048a:	2302      	movs	r3, #2
 800048c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000494:	2340      	movs	r3, #64	; 0x40
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000498:	2300      	movs	r3, #0
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fa13 	bl	80018cc <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004ac:	f000 f87e 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	230f      	movs	r3, #15
 80004b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b4:	2301      	movs	r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 fd17 	bl	8001efc <HAL_RCC_ClockConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004d4:	f000 f86a 	bl	80005ac <Error_Handler>
  }
}
 80004d8:	bf00      	nop
 80004da:	3750      	adds	r7, #80	; 0x50
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_FDCAN1_Init+0x84>)
 80004e6:	4a20      	ldr	r2, [pc, #128]	; (8000568 <MX_FDCAN1_Init+0x88>)
 80004e8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_FDCAN1_Init+0x84>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_FDCAN1_Init+0x84>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_FDCAN1_Init+0x84>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_FDCAN1_Init+0x84>)
 80004fe:	2201      	movs	r2, #1
 8000500:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000504:	2201      	movs	r2, #1
 8000506:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_FDCAN1_Init+0x84>)
 800050a:	2200      	movs	r2, #0
 800050c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000510:	2208      	movs	r2, #8
 8000512:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000516:	2210      	movs	r2, #16
 8000518:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_FDCAN1_Init+0x84>)
 800051c:	220d      	movs	r2, #13
 800051e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000520:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000522:	2202      	movs	r2, #2
 8000524:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000528:	2201      	movs	r2, #1
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <MX_FDCAN1_Init+0x84>)
 800052e:	2204      	movs	r2, #4
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000534:	2205      	movs	r2, #5
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_FDCAN1_Init+0x84>)
 800053a:	2204      	movs	r2, #4
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000540:	2201      	movs	r2, #1
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000546:	2201      	movs	r2, #1
 8000548:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_FDCAN1_Init+0x84>)
 800054c:	2200      	movs	r2, #0
 800054e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_FDCAN1_Init+0x84>)
 8000552:	f000 fab7 	bl	8000ac4 <HAL_FDCAN_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800055c:	f000 f826 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000114 	.word	0x20000114
 8000568:	40006400 	.word	0x40006400

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_GPIO_Init+0x2c>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <MX_GPIO_Init+0x2c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_GPIO_Init+0x2c>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f002 f98d 	bl	80028c4 <osDelay>
 80005aa:	e7fb      	b.n	80005a4 <StartDefaultTask+0x8>

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_MspInit+0x4c>)
 80005c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c2:	4a10      	ldr	r2, [pc, #64]	; (8000604 <HAL_MspInit+0x4c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <HAL_MspInit+0x4c>)
 80005cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <HAL_MspInit+0x4c>)
 80005d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <HAL_MspInit+0x4c>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	6593      	str	r3, [r2, #88]	; 0x58
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <HAL_MspInit+0x4c>)
 80005e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	210f      	movs	r1, #15
 80005f2:	f06f 0001 	mvn.w	r0, #1
 80005f6:	f000 fa30 	bl	8000a5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09a      	sub	sp, #104	; 0x68
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2244      	movs	r2, #68	; 0x44
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fe1b 	bl	8005264 <memset>
  if(hfdcan->Instance==FDCAN1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <HAL_FDCAN_MspInit+0xcc>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d149      	bne.n	80006cc <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800063e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fe3b 	bl	80022c4 <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000654:	f7ff ffaa 	bl	80005ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <HAL_FDCAN_MspInit+0xd0>)
 800065a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065c:	4a1e      	ldr	r2, [pc, #120]	; (80006d8 <HAL_FDCAN_MspInit+0xd0>)
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	6593      	str	r3, [r2, #88]	; 0x58
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <HAL_FDCAN_MspInit+0xd0>)
 8000666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <HAL_FDCAN_MspInit+0xd0>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000674:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <HAL_FDCAN_MspInit+0xd0>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_FDCAN_MspInit+0xd0>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000688:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800069a:	2309      	movs	r3, #9
 800069c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f000 fed2 	bl	8001450 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2105      	movs	r1, #5
 80006b0:	2015      	movs	r0, #21
 80006b2:	f000 f9d2 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80006b6:	2015      	movs	r0, #21
 80006b8:	f000 f9e9 	bl	8000a8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2105      	movs	r1, #5
 80006c0:	2016      	movs	r0, #22
 80006c2:	f000 f9ca 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80006c6:	2016      	movs	r0, #22
 80006c8:	f000 f9e1 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80006cc:	bf00      	nop
 80006ce:	3768      	adds	r7, #104	; 0x68
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40006400 	.word	0x40006400
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f8ac 	bl	8000868 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000710:	f003 fd10 	bl	8004134 <xTaskGetSchedulerState>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d001      	beq.n	800071e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800071a:	f004 faf5 	bl	8004d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <FDCAN1_IT0_IRQHandler+0x10>)
 800072a:	f000 fc8d 	bl	8001048 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000114 	.word	0x20000114

08000738 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <FDCAN1_IT1_IRQHandler+0x10>)
 800073e:	f000 fc83 	bl	8001048 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000114 	.word	0x20000114

0800074c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000772:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ffd7 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f004 fd2d 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a2:	f7ff fe11 	bl	80003c8 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   r0, =_estack
 80007a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007b4:	0800557c 	.word	0x0800557c
  ldr r2, =_sbss
 80007b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007bc:	20001ba4 	.word	0x20001ba4

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>

080007c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f939 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f80e 	bl	80007f4 <HAL_InitTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	e001      	b.n	80007e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e4:	f7ff fee8 	bl	80005b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e8:	79fb      	ldrb	r3, [r7, #7]

}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_InitTick+0x68>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d022      	beq.n	800084e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_InitTick+0x6c>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <HAL_InitTick+0x68>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000814:	fbb1 f3f3 	udiv	r3, r1, r3
 8000818:	fbb2 f3f3 	udiv	r3, r2, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f944 	bl	8000aaa <HAL_SYSTICK_Config>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10f      	bne.n	8000848 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b0f      	cmp	r3, #15
 800082c:	d809      	bhi.n	8000842 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082e:	2200      	movs	r2, #0
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	f04f 30ff 	mov.w	r0, #4294967295
 8000836:	f000 f910 	bl	8000a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_InitTick+0x70>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	e007      	b.n	8000852 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e004      	b.n	8000852 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	e001      	b.n	8000852 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000008 	.word	0x20000008
 8000860:	20000000 	.word	0x20000000
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x1c>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x20>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4413      	add	r3, r2
 8000876:	4a03      	ldr	r2, [pc, #12]	; (8000884 <HAL_IncTick+0x1c>)
 8000878:	6013      	str	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	20000188 	.word	0x20000188
 8000888:	20000008 	.word	0x20000008

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000188 	.word	0x20000188

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	db0b      	blt.n	8000932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 021f 	and.w	r2, r3, #31
 8000920:	4907      	ldr	r1, [pc, #28]	; (8000940 <__NVIC_EnableIRQ+0x38>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	2001      	movs	r0, #1
 800092a:	fa00 f202 	lsl.w	r2, r0, r2
 800092e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	; 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a10:	d301      	bcc.n	8000a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00f      	b.n	8000a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <SysTick_Config+0x40>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f7ff ff8e 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x40>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x40>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff29 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff40 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff90 	bl	8000998 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5f 	bl	8000944 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff33 	bl	8000908 <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa4 	bl	8000a00 <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e147      	b.n	8000d66 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d106      	bne.n	8000af0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fd8c 	bl	8000608 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	699a      	ldr	r2, [r3, #24]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0210 	bic.w	r2, r2, #16
 8000afe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b00:	f7ff fec4 	bl	800088c <HAL_GetTick>
 8000b04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b06:	e012      	b.n	8000b2e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b08:	f7ff fec0 	bl	800088c <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d90b      	bls.n	8000b2e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	f043 0201 	orr.w	r2, r3, #1
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2203      	movs	r2, #3
 8000b26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e11b      	b.n	8000d66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d0e5      	beq.n	8000b08 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	699a      	ldr	r2, [r3, #24]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f042 0201 	orr.w	r2, r2, #1
 8000b4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b4c:	f7ff fe9e 	bl	800088c <HAL_GetTick>
 8000b50:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b52:	e012      	b.n	8000b7a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b54:	f7ff fe9a 	bl	800088c <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	2b0a      	cmp	r3, #10
 8000b60:	d90b      	bls.n	8000b7a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	f043 0201 	orr.w	r2, r3, #1
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2203      	movs	r2, #3
 8000b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e0f5      	b.n	8000d66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0e5      	beq.n	8000b54 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	699a      	ldr	r2, [r3, #24]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0202 	orr.w	r2, r2, #2
 8000b96:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a74      	ldr	r2, [pc, #464]	; (8000d70 <HAL_FDCAN_Init+0x2ac>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d103      	bne.n	8000baa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000ba2:	4a74      	ldr	r2, [pc, #464]	; (8000d74 <HAL_FDCAN_Init+0x2b0>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7c1b      	ldrb	r3, [r3, #16]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bc0:	619a      	str	r2, [r3, #24]
 8000bc2:	e007      	b.n	8000bd4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	699a      	ldr	r2, [r3, #24]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bd2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7c5b      	ldrb	r3, [r3, #17]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	699a      	ldr	r2, [r3, #24]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bea:	619a      	str	r2, [r3, #24]
 8000bec:	e007      	b.n	8000bfe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	699a      	ldr	r2, [r3, #24]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000bfc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7c9b      	ldrb	r3, [r3, #18]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d108      	bne.n	8000c18 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	699a      	ldr	r2, [r3, #24]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c14:	619a      	str	r2, [r3, #24]
 8000c16:	e007      	b.n	8000c28 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c26:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	699a      	ldr	r2, [r3, #24]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000c4c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f022 0210 	bic.w	r2, r2, #16
 8000c5c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d108      	bne.n	8000c78 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	699a      	ldr	r2, [r3, #24]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f042 0204 	orr.w	r2, r2, #4
 8000c74:	619a      	str	r2, [r3, #24]
 8000c76:	e02c      	b.n	8000cd2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d028      	beq.n	8000cd2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d01c      	beq.n	8000cc2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c96:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0210 	orr.w	r2, r2, #16
 8000ca6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d110      	bne.n	8000cd2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0220 	orr.w	r2, r2, #32
 8000cbe:	619a      	str	r2, [r3, #24]
 8000cc0:	e007      	b.n	8000cd2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f042 0220 	orr.w	r2, r2, #32
 8000cd0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ce2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a1b      	ldr	r3, [r3, #32]
 8000ce8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000cea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000cfa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000cfc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000d06:	d115      	bne.n	8000d34 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	3b01      	subs	r3, #1
 8000d14:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d16:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000d20:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000d30:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d32:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 fb2a 	bl	80013a4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40006400 	.word	0x40006400
 8000d74:	40006500 	.word	0x40006500

08000d78 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000d88:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d002      	beq.n	8000d96 <HAL_FDCAN_ConfigFilter+0x1e>
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d13d      	bne.n	8000e12 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d119      	bne.n	8000dd2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000daa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000db2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e01d      	b.n	8000e0e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	075a      	lsls	r2, r3, #29
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	079a      	lsls	r2, r3, #30
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	3304      	adds	r3, #4
 8000e06:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e006      	b.n	8000e20 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f043 0202 	orr.w	r2, r3, #2
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
  }
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d110      	bne.n	8000e62 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e006      	b.n	8000e70 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	f043 0204 	orr.w	r2, r3, #4
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
  }
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e8e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d003      	beq.n	8000e9e <HAL_FDCAN_ActivateNotification+0x22>
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	f040 80c8 	bne.w	800102e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d004      	beq.n	8000eba <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d03b      	beq.n	8000f32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d031      	beq.n	8000f32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d027      	beq.n	8000f32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d01d      	beq.n	8000f32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d013      	beq.n	8000f32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d009      	beq.n	8000f32 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00c      	beq.n	8000f42 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d107      	bne.n	8000f42 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f042 0201 	orr.w	r2, r2, #1
 8000f40:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d13b      	bne.n	8000fce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d131      	bne.n	8000fce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d127      	bne.n	8000fce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d11d      	bne.n	8000fce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d113      	bne.n	8000fce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f003 0320 	and.w	r3, r3, #32
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d109      	bne.n	8000fce <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00c      	beq.n	8000fde <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0202 	orr.w	r2, r2, #2
 8000fdc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d009      	beq.n	8000ffc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001002:	2b00      	cmp	r3, #0
 8001004:	d009      	beq.n	800101a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	430a      	orrs	r2, r1
 8001016:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	430a      	orrs	r2, r1
 8001028:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e006      	b.n	800103c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	f043 0202 	orr.w	r2, r3, #2
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
  }
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001056:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001064:	4013      	ands	r3, r2
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107a:	6a3a      	ldr	r2, [r7, #32]
 800107c:	4013      	ands	r3, r2
 800107e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800108a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4013      	ands	r3, r2
 8001096:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800109e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80010a2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010ba:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00d      	beq.n	80010f2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f939 	bl	8001364 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d01b      	beq.n	8001138 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d014      	beq.n	8001138 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001116:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001130:	6939      	ldr	r1, [r7, #16]
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f8f7 	bl	8001326 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001144:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f8b6 	bl	80012ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6a3a      	ldr	r2, [r7, #32]
 800115a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800115c:	6a39      	ldr	r1, [r7, #32]
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f8b6 	bl	80012d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001172:	69f9      	ldr	r1, [r7, #28]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f8b6 	bl	80012e6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00e      	beq.n	80011a6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f8ab 	bl	80012fc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01a      	beq.n	80011ea <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011ca:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f893 	bl	8001310 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00e      	beq.n	8001216 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f893 	bl	800133c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00e      	beq.n	8001242 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800123a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f887 	bl	8001350 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d011      	beq.n	8001274 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001266:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001282:	6979      	ldr	r1, [r7, #20]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f881 	bl	800138c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d009      	beq.n	80012a4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f863 	bl	8001378 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80013ae:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013be:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	041a      	lsls	r2, r3, #16
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ec:	061a      	lsls	r2, r3, #24
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e005      	b.n	8001432 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3304      	adds	r3, #4
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	429a      	cmp	r2, r3
 800143c:	d3f3      	bcc.n	8001426 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	4000a400 	.word	0x4000a400

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800145e:	e15a      	b.n	8001716 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 814c 	beq.w	8001710 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d005      	beq.n	8001490 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800148c:	2b02      	cmp	r3, #2
 800148e:	d130      	bne.n	80014f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c6:	2201      	movs	r2, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 0201 	and.w	r2, r3, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d017      	beq.n	800152e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d123      	bne.n	8001582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	08da      	lsrs	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3208      	adds	r2, #8
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0203 	and.w	r2, r3, #3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80a6 	beq.w	8001710 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <HAL_GPIO_Init+0x2e4>)
 80015c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c8:	4a5a      	ldr	r2, [pc, #360]	; (8001734 <HAL_GPIO_Init+0x2e4>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6613      	str	r3, [r2, #96]	; 0x60
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_GPIO_Init+0x2e4>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015dc:	4a56      	ldr	r2, [pc, #344]	; (8001738 <HAL_GPIO_Init+0x2e8>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001606:	d01f      	beq.n	8001648 <HAL_GPIO_Init+0x1f8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x2ec>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d019      	beq.n	8001644 <HAL_GPIO_Init+0x1f4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1f0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_GPIO_Init+0x2f4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1ec>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_GPIO_Init+0x2f8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1e8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_GPIO_Init+0x2fc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1e4>
 8001630:	2305      	movs	r3, #5
 8001632:	e00a      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001634:	2306      	movs	r3, #6
 8001636:	e008      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001638:	2304      	movs	r3, #4
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 800163c:	2303      	movs	r3, #3
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001640:	2302      	movs	r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x1fa>
 8001648:	2300      	movs	r3, #0
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165a:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_GPIO_Init+0x2e8>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_GPIO_Init+0x300>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168c:	4a30      	ldr	r2, [pc, #192]	; (8001750 <HAL_GPIO_Init+0x300>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_GPIO_Init+0x300>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b6:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_GPIO_Init+0x300>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <HAL_GPIO_Init+0x300>)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f47f ae9d 	bne.w	8001460 <HAL_GPIO_Init+0x10>
  }
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	48000400 	.word	0x48000400
 8001740:	48000800 	.word	0x48000800
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48001000 	.word	0x48001000
 800174c:	48001400 	.word	0x48001400
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001770:	e002      	b.n	8001778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d141      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001792:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d131      	bne.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a0:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017a6:	4a46      	ldr	r2, [pc, #280]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b8:	4a41      	ldr	r2, [pc, #260]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2232      	movs	r2, #50	; 0x32
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a3f      	ldr	r2, [pc, #252]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d6:	e002      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3b01      	subs	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ea:	d102      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f2      	bne.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d158      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e057      	b.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001804:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800180a:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001810:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001814:	e04d      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181c:	d141      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182a:	d131      	bne.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001844:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2232      	movs	r2, #50	; 0x32
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0c9b      	lsrs	r3, r3, #18
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001862:	e002      	b.n	800186a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3b01      	subs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001876:	d102      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f2      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d112      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e011      	b.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018a0:	e007      	b.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40007000 	.word	0x40007000
 80018c4:	20000000 	.word	0x20000000
 80018c8:	431bde83 	.word	0x431bde83

080018cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e306      	b.n	8001eec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d075      	beq.n	80019d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ea:	4b97      	ldr	r3, [pc, #604]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f4:	4b94      	ldr	r3, [pc, #592]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0x3e>
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d002      	beq.n	8001910 <HAL_RCC_OscConfig+0x44>
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b8d      	ldr	r3, [pc, #564]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d05b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x108>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d157      	bne.n	80019d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e2e1      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x74>
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a84      	ldr	r2, [pc, #528]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7e      	ldr	r2, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b7c      	ldr	r3, [pc, #496]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7b      	ldr	r2, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001964:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a74      	ldr	r2, [pc, #464]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7fe ff82 	bl	800088c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7fe ff7e 	bl	800088c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e2a6      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xc0>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7fe ff6e 	bl	800088c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7fe ff6a 	bl	800088c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e292      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	4b60      	ldr	r3, [pc, #384]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0xe8>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d075      	beq.n	8001ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ec:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d102      	bne.n	8001a02 <HAL_RCC_OscConfig+0x136>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_OscConfig+0x13c>
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d11f      	bne.n	8001a48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a08:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_OscConfig+0x154>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e265      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	4946      	ldr	r1, [pc, #280]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a34:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_RCC_OscConfig+0x280>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fedb 	bl	80007f4 <HAL_InitTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d043      	beq.n	8001acc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e251      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d023      	beq.n	8001a98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3c      	ldr	r2, [pc, #240]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7fe ff16 	bl	800088c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7fe ff12 	bl	800088c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e23a      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	492d      	ldr	r1, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
 8001a96:	e01a      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fef2 	bl	800088c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7fe feee 	bl	800088c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e216      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1e0>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d041      	beq.n	8001b5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7fe fecb 	bl	800088c <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afa:	f7fe fec7 	bl	800088c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1ef      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0ef      	beq.n	8001afa <HAL_RCC_OscConfig+0x22e>
 8001b1a:	e020      	b.n	8001b5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x27c>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7fe feae 	bl	800088c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b32:	e00d      	b.n	8001b50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7fe feaa 	bl	800088c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d906      	bls.n	8001b50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1d2      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b50:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ea      	bne.n	8001b34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80a6 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b70:	4b84      	ldr	r3, [pc, #528]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2b4>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x2b6>
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b7f      	ldr	r3, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	4a7e      	ldr	r2, [pc, #504]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	6593      	str	r3, [r2, #88]	; 0x58
 8001b92:	4b7c      	ldr	r3, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba2:	4b79      	ldr	r3, [pc, #484]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d118      	bne.n	8001be0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a75      	ldr	r2, [pc, #468]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bba:	f7fe fe67 	bl	800088c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7fe fe63 	bl	800088c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e18b      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd4:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x4bc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_RCC_OscConfig+0x32e>
 8001be8:	4b66      	ldr	r3, [pc, #408]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a65      	ldr	r2, [pc, #404]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf8:	e024      	b.n	8001c44 <HAL_RCC_OscConfig+0x378>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d110      	bne.n	8001c24 <HAL_RCC_OscConfig+0x358>
 8001c02:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c08:	4a5e      	ldr	r2, [pc, #376]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c12:	4b5c      	ldr	r3, [pc, #368]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	4a5a      	ldr	r2, [pc, #360]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c22:	e00f      	b.n	8001c44 <HAL_RCC_OscConfig+0x378>
 8001c24:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d016      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7fe fe1e 	bl	800088c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7fe fe1a 	bl	800088c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e140      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6a:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ed      	beq.n	8001c54 <HAL_RCC_OscConfig+0x388>
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7fe fe07 	bl	800088c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe fe03 	bl	800088c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e129      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1ed      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d03c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd2:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7fe fdd6 	bl	800088c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce4:	f7fe fdd2 	bl	800088c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0fa      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ef      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x418>
 8001d04:	e01b      	b.n	8001d3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7fe fdb9 	bl	800088c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1e:	f7fe fdb5 	bl	800088c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0dd      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ef      	bne.n	8001d1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80d1 	beq.w	8001eea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	f000 808b 	beq.w	8001e6c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d15e      	bne.n	8001e1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x4b8>)
 8001d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fd8f 	bl	800088c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	e00c      	b.n	8001d8c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7fe fd8b 	bl	800088c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d905      	bls.n	8001d8c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0b3      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ec      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4b56      	ldr	r3, [pc, #344]	; (8001ef8 <HAL_RCC_OscConfig+0x62c>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6a11      	ldr	r1, [r2, #32]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001db2:	0212      	lsls	r2, r2, #8
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dba:	0852      	lsrs	r2, r2, #1
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	0552      	lsls	r2, r2, #21
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc6:	0852      	lsrs	r2, r2, #1
 8001dc8:	3a01      	subs	r2, #1
 8001dca:	0652      	lsls	r2, r2, #25
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dd2:	06d2      	lsls	r2, r2, #27
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	4947      	ldr	r1, [pc, #284]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b45      	ldr	r3, [pc, #276]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a44      	ldr	r2, [pc, #272]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a41      	ldr	r2, [pc, #260]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe fd4a 	bl	800088c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fd46 	bl	800088c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e06e      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x530>
 8001e1a:	e066      	b.n	8001eea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a34      	ldr	r2, [pc, #208]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a31      	ldr	r2, [pc, #196]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe fd22 	bl	800088c <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7fe fd1e 	bl	800088c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e046      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5e:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x580>
 8001e6a:	e03e      	b.n	8001eea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e039      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_OscConfig+0x628>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d12c      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	3b01      	subs	r3, #1
 8001e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d123      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11b      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d113      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	019f800c 	.word	0x019f800c

08001efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e11e      	b.n	8002152 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b91      	ldr	r3, [pc, #580]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b8e      	ldr	r3, [pc, #568]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	498c      	ldr	r1, [pc, #560]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b8a      	ldr	r3, [pc, #552]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e106      	b.n	8002152 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d073      	beq.n	8002038 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d129      	bne.n	8001fac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f58:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0f4      	b.n	8002152 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f68:	f000 f966 	bl	8002238 <RCC_GetSysClockFreqFromPLLSource>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4a7c      	ldr	r2, [pc, #496]	; (8002164 <HAL_RCC_ClockConfig+0x268>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d93f      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f76:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d033      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d12f      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f96:	4b72      	ldr	r3, [pc, #456]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9e:	4a70      	ldr	r2, [pc, #448]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e024      	b.n	8001ff6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0c6      	b.n	8002152 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc4:	4b66      	ldr	r3, [pc, #408]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0be      	b.n	8002152 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fd4:	f000 f8ce 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4a61      	ldr	r2, [pc, #388]	; (8002164 <HAL_RCC_ClockConfig+0x268>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d909      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fea:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4957      	ldr	r1, [pc, #348]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002008:	f7fe fc40 	bl	800088c <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe fc3c 	bl	800088c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e095      	b.n	8002152 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b4e      	ldr	r3, [pc, #312]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d023      	beq.n	800208c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a42      	ldr	r2, [pc, #264]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800205a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002068:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002070:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002072:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4936      	ldr	r1, [pc, #216]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
 800208a:	e008      	b.n	800209e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d105      	bne.n	800209e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800209c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d21d      	bcs.n	80020e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 020f 	bic.w	r2, r3, #15
 80020b4:	4929      	ldr	r1, [pc, #164]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020bc:	f7fe fbe6 	bl	800088c <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe fbe2 	bl	800088c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e03b      	b.n	8002152 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1ed      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4917      	ldr	r1, [pc, #92]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	490f      	ldr	r1, [pc, #60]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002126:	f000 f825 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 800212a:	4602      	mov	r2, r0
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_RCC_ClockConfig+0x264>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	490c      	ldr	r1, [pc, #48]	; (8002168 <HAL_RCC_ClockConfig+0x26c>)
 8002138:	5ccb      	ldrb	r3, [r1, r3]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_RCC_ClockConfig+0x270>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x274>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fb52 	bl	80007f4 <HAL_InitTick>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40022000 	.word	0x40022000
 8002160:	40021000 	.word	0x40021000
 8002164:	04c4b400 	.word	0x04c4b400
 8002168:	08005504 	.word	0x08005504
 800216c:	20000000 	.word	0x20000000
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b04      	cmp	r3, #4
 8002184:	d102      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002186:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e047      	b.n	800221c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d102      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002198:	4b26      	ldr	r3, [pc, #152]	; (8002234 <HAL_RCC_GetSysClockFreq+0xc0>)
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e03e      	b.n	800221c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d136      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d2:	68d2      	ldr	r2, [r2, #12]
 80021d4:	0a12      	lsrs	r2, r2, #8
 80021d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
      break;
 80021e0:	e00c      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	0a12      	lsrs	r2, r2, #8
 80021f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
      break;
 80021fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0e5b      	lsrs	r3, r3, #25
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	3301      	adds	r3, #1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e001      	b.n	800221c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800221c:	693b      	ldr	r3, [r7, #16]
}
 800221e:	4618      	mov	r0, r3
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	00f42400 	.word	0x00f42400
 8002234:	007a1200 	.word	0x007a1200

08002238 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d10c      	bne.n	8002276 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800225c:	4a17      	ldr	r2, [pc, #92]	; (80022bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002266:	68d2      	ldr	r2, [r2, #12]
 8002268:	0a12      	lsrs	r2, r2, #8
 800226a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
    break;
 8002274:	e00c      	b.n	8002290 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002280:	68d2      	ldr	r2, [r2, #12]
 8002282:	0a12      	lsrs	r2, r2, #8
 8002284:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    break;
 800228e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0e5b      	lsrs	r3, r3, #25
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	3301      	adds	r3, #1
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022aa:	687b      	ldr	r3, [r7, #4]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000
 80022bc:	007a1200 	.word	0x007a1200
 80022c0:	00f42400 	.word	0x00f42400

080022c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022cc:	2300      	movs	r3, #0
 80022ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022d0:	2300      	movs	r3, #0
 80022d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8098 	beq.w	8002412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800230e:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a39      	ldr	r2, [pc, #228]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800231a:	f7fe fab7 	bl	800088c <HAL_GetTick>
 800231e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002320:	e009      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe fab3 	bl	800088c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d902      	bls.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	74fb      	strb	r3, [r7, #19]
        break;
 8002334:	e005      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0ef      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d159      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002352:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01e      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	d019      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fa73 	bl	800088c <HAL_GetTick>
 80023a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a8:	e00b      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fa6f 	bl	800088c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d902      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	74fb      	strb	r3, [r7, #19]
            break;
 80023c0:	e006      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ec      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ec:	e008      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	74bb      	strb	r3, [r7, #18]
 80023f2:	e005      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002400:	7c7b      	ldrb	r3, [r7, #17]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	4ba6      	ldr	r3, [pc, #664]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	4aa5      	ldr	r2, [pc, #660]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241e:	4ba0      	ldr	r3, [pc, #640]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f023 0203 	bic.w	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	499c      	ldr	r1, [pc, #624]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002440:	4b97      	ldr	r3, [pc, #604]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f023 020c 	bic.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4994      	ldr	r1, [pc, #592]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002462:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	498b      	ldr	r1, [pc, #556]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002484:	4b86      	ldr	r3, [pc, #536]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	4983      	ldr	r1, [pc, #524]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024a6:	4b7e      	ldr	r3, [pc, #504]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	497a      	ldr	r1, [pc, #488]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c8:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	4972      	ldr	r1, [pc, #456]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	4969      	ldr	r1, [pc, #420]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4961      	ldr	r1, [pc, #388]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	4958      	ldr	r1, [pc, #352]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	4950      	ldr	r1, [pc, #320]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002570:	4b4b      	ldr	r3, [pc, #300]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a4a      	ldr	r2, [pc, #296]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	4942      	ldr	r1, [pc, #264]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4934      	ldr	r1, [pc, #208]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a2e      	ldr	r2, [pc, #184]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	4926      	ldr	r1, [pc, #152]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002616:	d105      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002622:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4918      	ldr	r1, [pc, #96]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264e:	d105      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	490a      	ldr	r1, [pc, #40]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002686:	d105      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002692:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002694:	7cbb      	ldrb	r3, [r7, #18]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <__NVIC_SetPriority>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026fc:	2100      	movs	r1, #0
 80026fe:	f06f 0004 	mvn.w	r0, #4
 8002702:	f7ff ffcf 	bl	80026a4 <__NVIC_SetPriority>
#endif
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002712:	f3ef 8305 	mrs	r3, IPSR
 8002716:	603b      	str	r3, [r7, #0]
  return(result);
 8002718:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800271e:	f06f 0305 	mvn.w	r3, #5
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	e00c      	b.n	8002740 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <osKernelInitialize+0x44>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <osKernelInitialize+0x44>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e002      	b.n	8002740 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	2000018c 	.word	0x2000018c

08002754 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800275a:	f3ef 8305 	mrs	r3, IPSR
 800275e:	603b      	str	r3, [r7, #0]
  return(result);
 8002760:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002766:	f06f 0305 	mvn.w	r3, #5
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	e010      	b.n	8002790 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <osKernelStart+0x48>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d109      	bne.n	800278a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002776:	f7ff ffbf 	bl	80026f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <osKernelStart+0x48>)
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002780:	f001 f87c 	bl	800387c <vTaskStartScheduler>
      stat = osOK;
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	e002      	b.n	8002790 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000018c 	.word	0x2000018c

080027a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08e      	sub	sp, #56	; 0x38
 80027a4:	af04      	add	r7, sp, #16
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b0:	f3ef 8305 	mrs	r3, IPSR
 80027b4:	617b      	str	r3, [r7, #20]
  return(result);
 80027b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d17e      	bne.n	80028ba <osThreadNew+0x11a>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d07b      	beq.n	80028ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027c6:	2318      	movs	r3, #24
 80027c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d045      	beq.n	8002866 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <osThreadNew+0x48>
        name = attr->name;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <osThreadNew+0x6e>
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b38      	cmp	r3, #56	; 0x38
 8002800:	d805      	bhi.n	800280e <osThreadNew+0x6e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <osThreadNew+0x72>
        return (NULL);
 800280e:	2300      	movs	r3, #0
 8002810:	e054      	b.n	80028bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00e      	beq.n	8002848 <osThreadNew+0xa8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2bbb      	cmp	r3, #187	; 0xbb
 8002830:	d90a      	bls.n	8002848 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <osThreadNew+0xa8>
        mem = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e010      	b.n	800286a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10c      	bne.n	800286a <osThreadNew+0xca>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <osThreadNew+0xca>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <osThreadNew+0xca>
          mem = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	e001      	b.n	800286a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d110      	bne.n	8002892 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002878:	9202      	str	r2, [sp, #8]
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	6a3a      	ldr	r2, [r7, #32]
 8002884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fe0c 	bl	80034a4 <xTaskCreateStatic>
 800288c:	4603      	mov	r3, r0
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	e013      	b.n	80028ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d110      	bne.n	80028ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	b29a      	uxth	r2, r3
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fe57 	bl	800355e <xTaskCreate>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <osThreadNew+0x11a>
            hTask = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028ba:	693b      	ldr	r3, [r7, #16]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028cc:	f3ef 8305 	mrs	r3, IPSR
 80028d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80028d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <osDelay+0x1c>
    stat = osErrorISR;
 80028d8:	f06f 0305 	mvn.w	r3, #5
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e007      	b.n	80028f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 ff92 	bl	8003814 <vTaskDelay>
    }
  }

  return (stat);
 80028f0:	68fb      	ldr	r3, [r7, #12]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <vApplicationGetIdleTaskMemory+0x2c>)
 800290c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4a06      	ldr	r2, [pc, #24]	; (800292c <vApplicationGetIdleTaskMemory+0x30>)
 8002912:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	601a      	str	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000190 	.word	0x20000190
 800292c:	2000024c 	.word	0x2000024c

08002930 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a07      	ldr	r2, [pc, #28]	; (800295c <vApplicationGetTimerTaskMemory+0x2c>)
 8002940:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <vApplicationGetTimerTaskMemory+0x30>)
 8002946:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	2000044c 	.word	0x2000044c
 8002960:	20000508 	.word	0x20000508

08002964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0208 	add.w	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f103 0208 	add.w	r2, r3, #8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 0208 	add.w	r2, r3, #8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d103      	bne.n	8002a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e00c      	b.n	8002a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3308      	adds	r3, #8
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e002      	b.n	8002a34 <vListInsert+0x2e>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d2f6      	bcs.n	8002a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6892      	ldr	r2, [r2, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6852      	ldr	r2, [r2, #4]
 8002a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d103      	bne.n	8002aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1e5a      	subs	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002af6:	f002 f875 	bl	8004be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	68f9      	ldr	r1, [r7, #12]
 8002b04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	441a      	add	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	3b01      	subs	r3, #1
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	441a      	add	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d114      	bne.n	8002b76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01a      	beq.n	8002b8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3310      	adds	r3, #16
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 f929 	bl	8003db0 <xTaskRemoveFromEventList>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d012      	beq.n	8002b8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <xQueueGenericReset+0xcc>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	e009      	b.n	8002b8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3310      	adds	r3, #16
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fef2 	bl	8002964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3324      	adds	r3, #36	; 0x24
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff feed 	bl	8002964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b8a:	f002 f85b 	bl	8004c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08e      	sub	sp, #56	; 0x38
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <xQueueGenericCreateStatic+0x52>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <xQueueGenericCreateStatic+0x56>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueGenericCreateStatic+0x58>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	623b      	str	r3, [r7, #32]
}
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <xQueueGenericCreateStatic+0x7e>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <xQueueGenericCreateStatic+0x82>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <xQueueGenericCreateStatic+0x84>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	61fb      	str	r3, [r7, #28]
}
 8002c36:	bf00      	nop
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c3a:	2350      	movs	r3, #80	; 0x50
 8002c3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d00a      	beq.n	8002c5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	61bb      	str	r3, [r7, #24]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f805 	bl	8002c8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3730      	adds	r7, #48	; 0x30
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cba:	2101      	movs	r1, #1
 8002cbc:	69b8      	ldr	r0, [r7, #24]
 8002cbe:	f7ff ff05 	bl	8002acc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08e      	sub	sp, #56	; 0x38
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xQueueGenericSend+0x32>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <xQueueGenericSend+0x40>
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <xQueueGenericSend+0x44>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <xQueueGenericSend+0x46>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <xQueueGenericSend+0x60>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSend+0x6e>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSend+0x72>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSend+0x74>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	623b      	str	r3, [r7, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d62:	f001 f9e7 	bl	8004134 <xTaskGetSchedulerState>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <xQueueGenericSend+0x9e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <xQueueGenericSend+0xa2>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <xQueueGenericSend+0xa4>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	61fb      	str	r3, [r7, #28]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d92:	f001 ff27 	bl	8004be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <xQueueGenericSend+0xd4>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d129      	bne.n	8002dfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dae:	f000 fa0b 	bl	80031c8 <prvCopyDataToQueue>
 8002db2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	3324      	adds	r3, #36	; 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fff5 	bl	8003db0 <xTaskRemoveFromEventList>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <xQueueGenericSend+0x1f8>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	e00a      	b.n	8002df4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <xQueueGenericSend+0x1f8>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002df4:	f001 ff26 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e063      	b.n	8002ec4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e02:	f001 ff1f 	bl	8004c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e05c      	b.n	8002ec4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 f82f 	bl	8003e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e1e:	f001 ff11 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e22:	f000 fd9b 	bl	800395c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e26:	f001 fedd 	bl	8004be4 <vPortEnterCritical>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d103      	bne.n	8002e40 <xQueueGenericSend+0x16c>
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x182>
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e56:	f001 fef5 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e5a:	1d3a      	adds	r2, r7, #4
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 f81e 	bl	8003ea4 <xTaskCheckForTimeOut>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d124      	bne.n	8002eb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e70:	f000 faa2 	bl	80033b8 <prvIsQueueFull>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ff44 	bl	8003d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8a:	f000 fa2d 	bl	80032e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e8e:	f000 fd73 	bl	8003978 <xTaskResumeAll>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f af7c 	bne.w	8002d92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <xQueueGenericSend+0x1f8>)
 8002e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	e772      	b.n	8002d92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eae:	f000 fa1b 	bl	80032e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eb2:	f000 fd61 	bl	8003978 <xTaskResumeAll>
 8002eb6:	e76c      	b.n	8002d92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eba:	f000 fa15 	bl	80032e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ebe:	f000 fd5b 	bl	8003978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3738      	adds	r7, #56	; 0x38
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b090      	sub	sp, #64	; 0x40
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <xQueueGenericSendFromISR+0x3c>
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <xQueueGenericSendFromISR+0x40>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <xQueueGenericSendFromISR+0x42>
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d103      	bne.n	8002f3a <xQueueGenericSendFromISR+0x6a>
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <xQueueGenericSendFromISR+0x6e>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <xQueueGenericSendFromISR+0x70>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	623b      	str	r3, [r7, #32]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f5a:	f001 ff25 	bl	8004da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f5e:	f3ef 8211 	mrs	r2, BASEPRI
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	61fa      	str	r2, [r7, #28]
 8002f74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d302      	bcc.n	8002f8c <xQueueGenericSendFromISR+0xbc>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d12f      	bne.n	8002fec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fa2:	f000 f911 	bl	80031c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fa6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d112      	bne.n	8002fd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d016      	beq.n	8002fe6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	3324      	adds	r3, #36	; 0x24
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fef7 	bl	8003db0 <xTaskRemoveFromEventList>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00e      	beq.n	8002fe6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e007      	b.n	8002fe6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fda:	3301      	adds	r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	b25a      	sxtb	r2, r3
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002fea:	e001      	b.n	8002ff0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ffa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3740      	adds	r7, #64	; 0x40
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <xQueueReceive+0x30>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	623b      	str	r3, [r7, #32]
}
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <xQueueReceive+0x3e>
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <xQueueReceive+0x42>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <xQueueReceive+0x44>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xQueueReceive+0x5e>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	61fb      	str	r3, [r7, #28]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003066:	f001 f865 	bl	8004134 <xTaskGetSchedulerState>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <xQueueReceive+0x6e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xQueueReceive+0x72>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueReceive+0x74>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueReceive+0x8e>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	61bb      	str	r3, [r7, #24]
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003096:	f001 fda5 	bl	8004be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01f      	beq.n	80030e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030aa:	f000 f8f7 	bl	800329c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00f      	beq.n	80030de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	3310      	adds	r3, #16
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fe74 	bl	8003db0 <xTaskRemoveFromEventList>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <xQueueReceive+0x1bc>)
 80030d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030de:	f001 fdb1 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e069      	b.n	80031ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ec:	f001 fdaa 	bl	8004c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e062      	b.n	80031ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 feba 	bl	8003e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003108:	f001 fd9c 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310c:	f000 fc26 	bl	800395c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003110:	f001 fd68 	bl	8004be4 <vPortEnterCritical>
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d103      	bne.n	800312a <xQueueReceive+0x122>
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003130:	b25b      	sxtb	r3, r3
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d103      	bne.n	8003140 <xQueueReceive+0x138>
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003140:	f001 fd80 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003144:	1d3a      	adds	r2, r7, #4
 8003146:	f107 0310 	add.w	r3, r7, #16
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fea9 	bl	8003ea4 <xTaskCheckForTimeOut>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d123      	bne.n	80031a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315a:	f000 f917 	bl	800338c <prvIsQueueEmpty>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	3324      	adds	r3, #36	; 0x24
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fdcf 	bl	8003d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003174:	f000 f8b8 	bl	80032e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003178:	f000 fbfe 	bl	8003978 <xTaskResumeAll>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d189      	bne.n	8003096 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <xQueueReceive+0x1bc>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	e780      	b.n	8003096 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003196:	f000 f8a7 	bl	80032e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800319a:	f000 fbed 	bl	8003978 <xTaskResumeAll>
 800319e:	e77a      	b.n	8003096 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a2:	f000 f8a1 	bl	80032e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a6:	f000 fbe7 	bl	8003978 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ac:	f000 f8ee 	bl	800338c <prvIsQueueEmpty>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f43f af6f 	beq.w	8003096 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3730      	adds	r7, #48	; 0x30
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d14d      	bne.n	800328a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 ffbc 	bl	8004170 <xTaskPriorityDisinherit>
 80031f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	e043      	b.n	800328a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d119      	bne.n	800323c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6858      	ldr	r0, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	461a      	mov	r2, r3
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	f002 f818 	bl	8005248 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d32b      	bcc.n	800328a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	e026      	b.n	800328a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68d8      	ldr	r0, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	461a      	mov	r2, r3
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	f001 fffe 	bl	8005248 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	425b      	negs	r3, r3
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	425b      	negs	r3, r3
 8003272:	441a      	add	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d105      	bne.n	800328a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3b01      	subs	r3, #1
 8003288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003292:	697b      	ldr	r3, [r7, #20]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d018      	beq.n	80032e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d303      	bcc.n	80032d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68d9      	ldr	r1, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	461a      	mov	r2, r3
 80032da:	6838      	ldr	r0, [r7, #0]
 80032dc:	f001 ffb4 	bl	8005248 <memcpy>
	}
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032f0:	f001 fc78 	bl	8004be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032fc:	e011      	b.n	8003322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b00      	cmp	r3, #0
 8003304:	d012      	beq.n	800332c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3324      	adds	r3, #36	; 0x24
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fd50 	bl	8003db0 <xTaskRemoveFromEventList>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003316:	f000 fe27 	bl	8003f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3b01      	subs	r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	dce9      	bgt.n	80032fe <prvUnlockQueue+0x16>
 800332a:	e000      	b.n	800332e <prvUnlockQueue+0x46>
					break;
 800332c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003336:	f001 fc85 	bl	8004c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800333a:	f001 fc53 	bl	8004be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003346:	e011      	b.n	800336c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3310      	adds	r3, #16
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd2b 	bl	8003db0 <xTaskRemoveFromEventList>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003360:	f000 fe02 	bl	8003f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	3b01      	subs	r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800336c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003370:	2b00      	cmp	r3, #0
 8003372:	dce9      	bgt.n	8003348 <prvUnlockQueue+0x60>
 8003374:	e000      	b.n	8003378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	22ff      	movs	r2, #255	; 0xff
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003380:	f001 fc60 	bl	8004c44 <vPortExitCritical>
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003394:	f001 fc26 	bl	8004be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e001      	b.n	80033aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033aa:	f001 fc4b 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c0:	f001 fc10 	bl	8004be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d102      	bne.n	80033d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e001      	b.n	80033da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033da:	f001 fc33 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e014      	b.n	8003422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033f8:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <vQueueAddToRegistry+0x50>)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003404:	490c      	ldr	r1, [pc, #48]	; (8003438 <vQueueAddToRegistry+0x50>)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <vQueueAddToRegistry+0x50>)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800341a:	e006      	b.n	800342a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3301      	adds	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b07      	cmp	r3, #7
 8003426:	d9e7      	bls.n	80033f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000908 	.word	0x20000908

0800343c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800344c:	f001 fbca 	bl	8004be4 <vPortEnterCritical>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003456:	b25b      	sxtb	r3, r3
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d103      	bne.n	8003466 <vQueueWaitForMessageRestricted+0x2a>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800346c:	b25b      	sxtb	r3, r3
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d103      	bne.n	800347c <vQueueWaitForMessageRestricted+0x40>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800347c:	f001 fbe2 	bl	8004c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3324      	adds	r3, #36	; 0x24
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fc61 	bl	8003d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003496:	6978      	ldr	r0, [r7, #20]
 8003498:	f7ff ff26 	bl	80032e8 <prvUnlockQueue>
	}
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08e      	sub	sp, #56	; 0x38
 80034a8:	af04      	add	r7, sp, #16
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	623b      	str	r3, [r7, #32]
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xTaskCreateStatic+0x46>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	61fb      	str	r3, [r7, #28]
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ea:	23bc      	movs	r3, #188	; 0xbc
 80034ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2bbc      	cmp	r3, #188	; 0xbc
 80034f2:	d00a      	beq.n	800350a <xTaskCreateStatic+0x66>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	61bb      	str	r3, [r7, #24]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800350a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01e      	beq.n	8003550 <xTaskCreateStatic+0xac>
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01b      	beq.n	8003550 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003520:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	2202      	movs	r2, #2
 8003526:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800352a:	2300      	movs	r3, #0
 800352c:	9303      	str	r3, [sp, #12]
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	9302      	str	r3, [sp, #8]
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f850 	bl	80035e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800354a:	f000 f8f3 	bl	8003734 <prvAddNewTaskToReadyList>
 800354e:	e001      	b.n	8003554 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003554:	697b      	ldr	r3, [r7, #20]
	}
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	; 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800355e:	b580      	push	{r7, lr}
 8003560:	b08c      	sub	sp, #48	; 0x30
 8003562:	af04      	add	r7, sp, #16
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fc58 	bl	8004e28 <pvPortMalloc>
 8003578:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003580:	20bc      	movs	r0, #188	; 0xbc
 8003582:	f001 fc51 	bl	8004e28 <pvPortMalloc>
 8003586:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
 8003594:	e005      	b.n	80035a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f001 fd12 	bl	8004fc0 <vPortFree>
 800359c:	e001      	b.n	80035a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d017      	beq.n	80035d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035b0:	88fa      	ldrh	r2, [r7, #6]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9303      	str	r3, [sp, #12]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f80e 	bl	80035e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035cc:	69f8      	ldr	r0, [r7, #28]
 80035ce:	f000 f8b1 	bl	8003734 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035d2:	2301      	movs	r3, #1
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	e002      	b.n	80035de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
 80035dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035de:	69bb      	ldr	r3, [r7, #24]
	}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	461a      	mov	r2, r3
 8003600:	21a5      	movs	r1, #165	; 0xa5
 8003602:	f001 fe2f 	bl	8005264 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003610:	3b01      	subs	r3, #1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f023 0307 	bic.w	r3, r3, #7
 800361e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <prvInitialiseNewTask+0x58>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	617b      	str	r3, [r7, #20]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01f      	beq.n	8003686 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e012      	b.n	8003672 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	7819      	ldrb	r1, [r3, #0]
 8003654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	3334      	adds	r3, #52	; 0x34
 800365c:	460a      	mov	r2, r1
 800365e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	3301      	adds	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d9e9      	bls.n	800364c <prvInitialiseNewTask+0x64>
 8003678:	e000      	b.n	800367c <prvInitialiseNewTask+0x94>
			{
				break;
 800367a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003684:	e003      	b.n	800368e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	2b37      	cmp	r3, #55	; 0x37
 8003692:	d901      	bls.n	8003698 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003694:	2337      	movs	r3, #55	; 0x37
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	2200      	movs	r2, #0
 80036a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	3304      	adds	r3, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f978 	bl	80029a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	3318      	adds	r3, #24
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff f973 	bl	80029a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	3354      	adds	r3, #84	; 0x54
 80036e8:	2260      	movs	r2, #96	; 0x60
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fdb9 	bl	8005264 <memset>
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <prvInitialiseNewTask+0x140>)
 80036f6:	659a      	str	r2, [r3, #88]	; 0x58
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	4a0c      	ldr	r2, [pc, #48]	; (800372c <prvInitialiseNewTask+0x144>)
 80036fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <prvInitialiseNewTask+0x148>)
 8003702:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	69b8      	ldr	r0, [r7, #24]
 800370a:	f001 f941 	bl	8004990 <pxPortInitialiseStack>
 800370e:	4602      	mov	r2, r0
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003720:	bf00      	nop
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	08005534 	.word	0x08005534
 800372c:	08005554 	.word	0x08005554
 8003730:	08005514 	.word	0x08005514

08003734 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800373c:	f001 fa52 	bl	8004be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <prvAddNewTaskToReadyList+0xc4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <prvAddNewTaskToReadyList+0xc4>)
 8003748:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800374a:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <prvAddNewTaskToReadyList+0xc8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <prvAddNewTaskToReadyList+0xc8>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <prvAddNewTaskToReadyList+0xc4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d110      	bne.n	8003782 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003760:	f000 fc26 	bl	8003fb0 <prvInitialiseTaskLists>
 8003764:	e00d      	b.n	8003782 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003766:	4b26      	ldr	r3, [pc, #152]	; (8003800 <prvAddNewTaskToReadyList+0xcc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <prvAddNewTaskToReadyList+0xc8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	429a      	cmp	r2, r3
 800377a:	d802      	bhi.n	8003782 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <prvAddNewTaskToReadyList+0xc8>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <prvAddNewTaskToReadyList+0xd0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <prvAddNewTaskToReadyList+0xd0>)
 800378a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <prvAddNewTaskToReadyList+0xd0>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <prvAddNewTaskToReadyList+0xd4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d903      	bls.n	80037a8 <prvAddNewTaskToReadyList+0x74>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <prvAddNewTaskToReadyList+0xd4>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4a15      	ldr	r2, [pc, #84]	; (800380c <prvAddNewTaskToReadyList+0xd8>)
 80037b6:	441a      	add	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f7ff f8fd 	bl	80029be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037c4:	f001 fa3e 	bl	8004c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <prvAddNewTaskToReadyList+0xcc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00e      	beq.n	80037ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <prvAddNewTaskToReadyList+0xc8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d207      	bcs.n	80037ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037de:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <prvAddNewTaskToReadyList+0xdc>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000e1c 	.word	0x20000e1c
 80037fc:	20000948 	.word	0x20000948
 8003800:	20000e28 	.word	0x20000e28
 8003804:	20000e38 	.word	0x20000e38
 8003808:	20000e24 	.word	0x20000e24
 800380c:	2000094c 	.word	0x2000094c
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d017      	beq.n	8003856 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <vTaskDelay+0x60>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <vTaskDelay+0x30>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	60bb      	str	r3, [r7, #8]
}
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003844:	f000 f88a 	bl	800395c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003848:	2100      	movs	r1, #0
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fcfe 	bl	800424c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003850:	f000 f892 	bl	8003978 <xTaskResumeAll>
 8003854:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <vTaskDelay+0x64>)
 800385e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000e44 	.word	0x20000e44
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800388a:	463a      	mov	r2, r7
 800388c:	1d39      	adds	r1, r7, #4
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f832 	bl	80028fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	9202      	str	r2, [sp, #8]
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	460a      	mov	r2, r1
 80038aa:	4924      	ldr	r1, [pc, #144]	; (800393c <vTaskStartScheduler+0xc0>)
 80038ac:	4824      	ldr	r0, [pc, #144]	; (8003940 <vTaskStartScheduler+0xc4>)
 80038ae:	f7ff fdf9 	bl	80034a4 <xTaskCreateStatic>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <vTaskStartScheduler+0xc8>)
 80038b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038b8:	4b22      	ldr	r3, [pc, #136]	; (8003944 <vTaskStartScheduler+0xc8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038c0:	2301      	movs	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e001      	b.n	80038ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038d0:	f000 fd10 	bl	80042f4 <xTimerCreateTimerTask>
 80038d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d11b      	bne.n	8003914 <vTaskStartScheduler+0x98>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	613b      	str	r3, [r7, #16]
}
 80038ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <vTaskStartScheduler+0xcc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3354      	adds	r3, #84	; 0x54
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <vTaskStartScheduler+0xd0>)
 80038f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <vTaskStartScheduler+0xd4>)
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <vTaskStartScheduler+0xd8>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <vTaskStartScheduler+0xdc>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800390e:	f001 f8c7 	bl	8004aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003912:	e00e      	b.n	8003932 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d10a      	bne.n	8003932 <vTaskStartScheduler+0xb6>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <vTaskStartScheduler+0xb4>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	0800545c 	.word	0x0800545c
 8003940:	08003f81 	.word	0x08003f81
 8003944:	20000e40 	.word	0x20000e40
 8003948:	20000948 	.word	0x20000948
 800394c:	20000010 	.word	0x20000010
 8003950:	20000e3c 	.word	0x20000e3c
 8003954:	20000e28 	.word	0x20000e28
 8003958:	20000e20 	.word	0x20000e20

0800395c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <vTaskSuspendAll+0x18>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <vTaskSuspendAll+0x18>)
 8003968:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000e44 	.word	0x20000e44

08003978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003986:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <xTaskResumeAll+0x118>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	603b      	str	r3, [r7, #0]
}
 80039a0:	bf00      	nop
 80039a2:	e7fe      	b.n	80039a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039a4:	f001 f91e 	bl	8004be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039a8:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <xTaskResumeAll+0x118>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	4a38      	ldr	r2, [pc, #224]	; (8003a90 <xTaskResumeAll+0x118>)
 80039b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <xTaskResumeAll+0x118>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d162      	bne.n	8003a80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ba:	4b36      	ldr	r3, [pc, #216]	; (8003a94 <xTaskResumeAll+0x11c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05e      	beq.n	8003a80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c2:	e02f      	b.n	8003a24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039c4:	4b34      	ldr	r3, [pc, #208]	; (8003a98 <xTaskResumeAll+0x120>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3318      	adds	r3, #24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f851 	bl	8002a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f84c 	bl	8002a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <xTaskResumeAll+0x124>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d903      	bls.n	80039f4 <xTaskResumeAll+0x7c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <xTaskResumeAll+0x124>)
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <xTaskResumeAll+0x128>)
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f7fe ffd7 	bl	80029be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <xTaskResumeAll+0x12c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <xTaskResumeAll+0x120>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1cb      	bne.n	80039c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a32:	f000 fb5f 	bl	80040f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <xTaskResumeAll+0x134>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a42:	f000 f847 	bl	8003ad4 <xTaskIncrementTick>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f1      	bne.n	8003a42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <xTaskResumeAll+0x134>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <xTaskResumeAll+0x130>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <xTaskResumeAll+0x138>)
 8003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a80:	f001 f8e0 	bl	8004c44 <vPortExitCritical>

	return xAlreadyYielded;
 8003a84:	68bb      	ldr	r3, [r7, #8]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000e44 	.word	0x20000e44
 8003a94:	20000e1c 	.word	0x20000e1c
 8003a98:	20000ddc 	.word	0x20000ddc
 8003a9c:	20000e24 	.word	0x20000e24
 8003aa0:	2000094c 	.word	0x2000094c
 8003aa4:	20000948 	.word	0x20000948
 8003aa8:	20000e30 	.word	0x20000e30
 8003aac:	20000e2c 	.word	0x20000e2c
 8003ab0:	e000ed04 	.word	0xe000ed04

08003ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <xTaskGetTickCount+0x1c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ac0:	687b      	ldr	r3, [r7, #4]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000e20 	.word	0x20000e20

08003ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ade:	4b4f      	ldr	r3, [pc, #316]	; (8003c1c <xTaskIncrementTick+0x148>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 808f 	bne.w	8003c06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ae8:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <xTaskIncrementTick+0x14c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <xTaskIncrementTick+0x14c>)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d120      	bne.n	8003b3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003afc:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <xTaskIncrementTick+0x150>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	603b      	str	r3, [r7, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <xTaskIncrementTick+0x46>
 8003b1c:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <xTaskIncrementTick+0x150>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <xTaskIncrementTick+0x154>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <xTaskIncrementTick+0x150>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <xTaskIncrementTick+0x154>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <xTaskIncrementTick+0x158>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <xTaskIncrementTick+0x158>)
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	f000 fadb 	bl	80040f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b3e:	4b3c      	ldr	r3, [pc, #240]	; (8003c30 <xTaskIncrementTick+0x15c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d349      	bcc.n	8003bdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <xTaskIncrementTick+0x150>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <xTaskIncrementTick+0x15c>)
 8003b54:	f04f 32ff 	mov.w	r2, #4294967295
 8003b58:	601a      	str	r2, [r3, #0]
					break;
 8003b5a:	e03f      	b.n	8003bdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <xTaskIncrementTick+0x150>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d203      	bcs.n	8003b7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b74:	4a2e      	ldr	r2, [pc, #184]	; (8003c30 <xTaskIncrementTick+0x15c>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b7a:	e02f      	b.n	8003bdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe ff79 	bl	8002a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3318      	adds	r3, #24
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe ff70 	bl	8002a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <xTaskIncrementTick+0x160>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d903      	bls.n	8003bac <xTaskIncrementTick+0xd8>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <xTaskIncrementTick+0x160>)
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <xTaskIncrementTick+0x164>)
 8003bba:	441a      	add	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f7fe fefb 	bl	80029be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <xTaskIncrementTick+0x168>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3b8      	bcc.n	8003b48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bda:	e7b5      	b.n	8003b48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bdc:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <xTaskIncrementTick+0x168>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	4915      	ldr	r1, [pc, #84]	; (8003c38 <xTaskIncrementTick+0x164>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d901      	bls.n	8003bf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <xTaskIncrementTick+0x16c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e004      	b.n	8003c10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <xTaskIncrementTick+0x170>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <xTaskIncrementTick+0x170>)
 8003c0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c10:	697b      	ldr	r3, [r7, #20]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000e44 	.word	0x20000e44
 8003c20:	20000e20 	.word	0x20000e20
 8003c24:	20000dd4 	.word	0x20000dd4
 8003c28:	20000dd8 	.word	0x20000dd8
 8003c2c:	20000e34 	.word	0x20000e34
 8003c30:	20000e3c 	.word	0x20000e3c
 8003c34:	20000e24 	.word	0x20000e24
 8003c38:	2000094c 	.word	0x2000094c
 8003c3c:	20000948 	.word	0x20000948
 8003c40:	20000e30 	.word	0x20000e30
 8003c44:	20000e2c 	.word	0x20000e2c

08003c48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <vTaskSwitchContext+0xb0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c56:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <vTaskSwitchContext+0xb4>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c5c:	e046      	b.n	8003cec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <vTaskSwitchContext+0xb4>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c64:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <vTaskSwitchContext+0xb8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e010      	b.n	8003c8e <vTaskSwitchContext+0x46>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	607b      	str	r3, [r7, #4]
}
 8003c84:	bf00      	nop
 8003c86:	e7fe      	b.n	8003c86 <vTaskSwitchContext+0x3e>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	491d      	ldr	r1, [pc, #116]	; (8003d04 <vTaskSwitchContext+0xbc>)
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0e4      	beq.n	8003c6c <vTaskSwitchContext+0x24>
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <vTaskSwitchContext+0xbc>)
 8003cae:	4413      	add	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d104      	bne.n	8003cd2 <vTaskSwitchContext+0x8a>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <vTaskSwitchContext+0xc0>)
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <vTaskSwitchContext+0xb8>)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <vTaskSwitchContext+0xc0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3354      	adds	r3, #84	; 0x54
 8003ce8:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <vTaskSwitchContext+0xc4>)
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000e44 	.word	0x20000e44
 8003cfc:	20000e30 	.word	0x20000e30
 8003d00:	20000e24 	.word	0x20000e24
 8003d04:	2000094c 	.word	0x2000094c
 8003d08:	20000948 	.word	0x20000948
 8003d0c:	20000010 	.word	0x20000010

08003d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60fb      	str	r3, [r7, #12]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <vTaskPlaceOnEventList+0x44>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fe fe61 	bl	8002a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d44:	2101      	movs	r1, #1
 8003d46:	6838      	ldr	r0, [r7, #0]
 8003d48:	f000 fa80 	bl	800424c <prvAddCurrentTaskToDelayedList>
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000948 	.word	0x20000948

08003d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	617b      	str	r3, [r7, #20]
}
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <vTaskPlaceOnEventListRestricted+0x54>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3318      	adds	r3, #24
 8003d86:	4619      	mov	r1, r3
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7fe fe18 	bl	80029be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	68b8      	ldr	r0, [r7, #8]
 8003d9e:	f000 fa55 	bl	800424c <prvAddCurrentTaskToDelayedList>
	}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000948 	.word	0x20000948

08003db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60fb      	str	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3318      	adds	r3, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fe49 	bl	8002a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de6:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <xTaskRemoveFromEventList+0xb0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11d      	bne.n	8003e2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fe40 	bl	8002a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <xTaskRemoveFromEventList+0xb4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d903      	bls.n	8003e0c <xTaskRemoveFromEventList+0x5c>
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4a16      	ldr	r2, [pc, #88]	; (8003e64 <xTaskRemoveFromEventList+0xb4>)
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <xTaskRemoveFromEventList+0xb8>)
 8003e1a:	441a      	add	r2, r3
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f7fe fdcb 	bl	80029be <vListInsertEnd>
 8003e28:	e005      	b.n	8003e36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3318      	adds	r3, #24
 8003e2e:	4619      	mov	r1, r3
 8003e30:	480e      	ldr	r0, [pc, #56]	; (8003e6c <xTaskRemoveFromEventList+0xbc>)
 8003e32:	f7fe fdc4 	bl	80029be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <xTaskRemoveFromEventList+0xc0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d905      	bls.n	8003e50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <xTaskRemoveFromEventList+0xc4>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e001      	b.n	8003e54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e54:	697b      	ldr	r3, [r7, #20]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000e44 	.word	0x20000e44
 8003e64:	20000e24 	.word	0x20000e24
 8003e68:	2000094c 	.word	0x2000094c
 8003e6c:	20000ddc 	.word	0x20000ddc
 8003e70:	20000948 	.word	0x20000948
 8003e74:	20000e30 	.word	0x20000e30

08003e78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <vTaskInternalSetTimeOutState+0x24>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <vTaskInternalSetTimeOutState+0x28>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	605a      	str	r2, [r3, #4]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	20000e34 	.word	0x20000e34
 8003ea0:	20000e20 	.word	0x20000e20

08003ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	613b      	str	r3, [r7, #16]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	60fb      	str	r3, [r7, #12]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ee6:	f000 fe7d 	bl	8004be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <xTaskCheckForTimeOut+0xbc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f02:	d102      	bne.n	8003f0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	e023      	b.n	8003f52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <xTaskCheckForTimeOut+0xc0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d007      	beq.n	8003f26 <xTaskCheckForTimeOut+0x82>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e015      	b.n	8003f52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d20b      	bcs.n	8003f48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad2      	subs	r2, r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff9b 	bl	8003e78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e004      	b.n	8003f52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f52:	f000 fe77 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 8003f56:	69fb      	ldr	r3, [r7, #28]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000e20 	.word	0x20000e20
 8003f64:	20000e34 	.word	0x20000e34

08003f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <vTaskMissedYield+0x14>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000e30 	.word	0x20000e30

08003f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f88:	f000 f852 	bl	8004030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <prvIdleTask+0x28>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d9f9      	bls.n	8003f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <prvIdleTask+0x2c>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fa4:	e7f0      	b.n	8003f88 <prvIdleTask+0x8>
 8003fa6:	bf00      	nop
 8003fa8:	2000094c 	.word	0x2000094c
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	e00c      	b.n	8003fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4a12      	ldr	r2, [pc, #72]	; (8004010 <prvInitialiseTaskLists+0x60>)
 8003fc8:	4413      	add	r3, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fcca 	bl	8002964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b37      	cmp	r3, #55	; 0x37
 8003fda:	d9ef      	bls.n	8003fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fdc:	480d      	ldr	r0, [pc, #52]	; (8004014 <prvInitialiseTaskLists+0x64>)
 8003fde:	f7fe fcc1 	bl	8002964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fe2:	480d      	ldr	r0, [pc, #52]	; (8004018 <prvInitialiseTaskLists+0x68>)
 8003fe4:	f7fe fcbe 	bl	8002964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fe8:	480c      	ldr	r0, [pc, #48]	; (800401c <prvInitialiseTaskLists+0x6c>)
 8003fea:	f7fe fcbb 	bl	8002964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fee:	480c      	ldr	r0, [pc, #48]	; (8004020 <prvInitialiseTaskLists+0x70>)
 8003ff0:	f7fe fcb8 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <prvInitialiseTaskLists+0x74>)
 8003ff6:	f7fe fcb5 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <prvInitialiseTaskLists+0x78>)
 8003ffc:	4a05      	ldr	r2, [pc, #20]	; (8004014 <prvInitialiseTaskLists+0x64>)
 8003ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004000:	4b0a      	ldr	r3, [pc, #40]	; (800402c <prvInitialiseTaskLists+0x7c>)
 8004002:	4a05      	ldr	r2, [pc, #20]	; (8004018 <prvInitialiseTaskLists+0x68>)
 8004004:	601a      	str	r2, [r3, #0]
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	2000094c 	.word	0x2000094c
 8004014:	20000dac 	.word	0x20000dac
 8004018:	20000dc0 	.word	0x20000dc0
 800401c:	20000ddc 	.word	0x20000ddc
 8004020:	20000df0 	.word	0x20000df0
 8004024:	20000e08 	.word	0x20000e08
 8004028:	20000dd4 	.word	0x20000dd4
 800402c:	20000dd8 	.word	0x20000dd8

08004030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004036:	e019      	b.n	800406c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004038:	f000 fdd4 	bl	8004be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <prvCheckTasksWaitingTermination+0x50>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fd15 	bl	8002a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <prvCheckTasksWaitingTermination+0x54>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3b01      	subs	r3, #1
 8004054:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <prvCheckTasksWaitingTermination+0x54>)
 8004056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <prvCheckTasksWaitingTermination+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <prvCheckTasksWaitingTermination+0x58>)
 8004060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004062:	f000 fdef 	bl	8004c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f810 	bl	800408c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <prvCheckTasksWaitingTermination+0x58>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e1      	bne.n	8004038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000df0 	.word	0x20000df0
 8004084:	20000e1c 	.word	0x20000e1c
 8004088:	20000e04 	.word	0x20000e04

0800408c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3354      	adds	r3, #84	; 0x54
 8004098:	4618      	mov	r0, r3
 800409a:	f001 f8f9 	bl	8005290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d108      	bne.n	80040ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 ff87 	bl	8004fc0 <vPortFree>
				vPortFree( pxTCB );
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 ff84 	bl	8004fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040b8:	e018      	b.n	80040ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d103      	bne.n	80040cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 ff7b 	bl	8004fc0 <vPortFree>
	}
 80040ca:	e00f      	b.n	80040ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d00a      	beq.n	80040ec <prvDeleteTCB+0x60>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60fb      	str	r3, [r7, #12]
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <prvDeleteTCB+0x5e>
	}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <prvResetNextTaskUnblockTime+0x38>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <prvResetNextTaskUnblockTime+0x3c>)
 8004106:	f04f 32ff 	mov.w	r2, #4294967295
 800410a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800410c:	e008      	b.n	8004120 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <prvResetNextTaskUnblockTime+0x38>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <prvResetNextTaskUnblockTime+0x3c>)
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	20000dd4 	.word	0x20000dd4
 8004130:	20000e3c 	.word	0x20000e3c

08004134 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <xTaskGetSchedulerState+0x34>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004142:	2301      	movs	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	e008      	b.n	800415a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <xTaskGetSchedulerState+0x38>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004150:	2302      	movs	r3, #2
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	e001      	b.n	800415a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800415a:	687b      	ldr	r3, [r7, #4]
	}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	20000e28 	.word	0x20000e28
 800416c:	20000e44 	.word	0x20000e44

08004170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d056      	beq.n	8004234 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004186:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <xTaskPriorityDisinherit+0xd0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d00a      	beq.n	80041a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60bb      	str	r3, [r7, #8]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c8:	1e5a      	subs	r2, r3, #1
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d02c      	beq.n	8004234 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d128      	bne.n	8004234 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe fc46 	bl	8002a78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <xTaskPriorityDisinherit+0xd4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d903      	bls.n	8004214 <xTaskPriorityDisinherit+0xa4>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <xTaskPriorityDisinherit+0xd4>)
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <xTaskPriorityDisinherit+0xd8>)
 8004222:	441a      	add	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f7fe fbc7 	bl	80029be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004230:	2301      	movs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004234:	697b      	ldr	r3, [r7, #20]
	}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000948 	.word	0x20000948
 8004244:	20000e24 	.word	0x20000e24
 8004248:	2000094c 	.word	0x2000094c

0800424c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <prvAddCurrentTaskToDelayedList+0x90>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3304      	adds	r3, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fc08 	bl	8002a78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d10a      	bne.n	8004286 <prvAddCurrentTaskToDelayedList+0x3a>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004276:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4819      	ldr	r0, [pc, #100]	; (80042e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004280:	f7fe fb9d 	bl	80029be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004284:	e026      	b.n	80042d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	429a      	cmp	r2, r3
 800429c:	d209      	bcs.n	80042b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f7fe fbab 	bl	8002a06 <vListInsert>
}
 80042b0:	e010      	b.n	80042d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b2:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fba1 	bl	8002a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d202      	bcs.n	80042d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6013      	str	r3, [r2, #0]
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000e20 	.word	0x20000e20
 80042e0:	20000948 	.word	0x20000948
 80042e4:	20000e08 	.word	0x20000e08
 80042e8:	20000dd8 	.word	0x20000dd8
 80042ec:	20000dd4 	.word	0x20000dd4
 80042f0:	20000e3c 	.word	0x20000e3c

080042f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042fe:	f000 fb07 	bl	8004910 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xTimerCreateTimerTask+0x80>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d021      	beq.n	800434e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004312:	1d3a      	adds	r2, r7, #4
 8004314:	f107 0108 	add.w	r1, r7, #8
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fb07 	bl	8002930 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	9202      	str	r2, [sp, #8]
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	2302      	movs	r3, #2
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2300      	movs	r3, #0
 8004332:	460a      	mov	r2, r1
 8004334:	4910      	ldr	r1, [pc, #64]	; (8004378 <xTimerCreateTimerTask+0x84>)
 8004336:	4811      	ldr	r0, [pc, #68]	; (800437c <xTimerCreateTimerTask+0x88>)
 8004338:	f7ff f8b4 	bl	80034a4 <xTaskCreateStatic>
 800433c:	4603      	mov	r3, r0
 800433e:	4a10      	ldr	r2, [pc, #64]	; (8004380 <xTimerCreateTimerTask+0x8c>)
 8004340:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004342:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <xTimerCreateTimerTask+0x8c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800434a:	2301      	movs	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	613b      	str	r3, [r7, #16]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800436a:	697b      	ldr	r3, [r7, #20]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000e78 	.word	0x20000e78
 8004378:	08005464 	.word	0x08005464
 800437c:	080044b9 	.word	0x080044b9
 8004380:	20000e7c 	.word	0x20000e7c

08004384 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004392:	2300      	movs	r3, #0
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	623b      	str	r3, [r7, #32]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <xTimerGenericCommand+0x98>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02a      	beq.n	8004410 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	dc18      	bgt.n	80043fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043cc:	f7ff feb2 	bl	8004134 <xTaskGetSchedulerState>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d109      	bne.n	80043ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <xTimerGenericCommand+0x98>)
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	f107 0110 	add.w	r1, r7, #16
 80043de:	2300      	movs	r3, #0
 80043e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e2:	f7fe fc77 	bl	8002cd4 <xQueueGenericSend>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24
 80043e8:	e012      	b.n	8004410 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <xTimerGenericCommand+0x98>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f107 0110 	add.w	r1, r7, #16
 80043f2:	2300      	movs	r3, #0
 80043f4:	2200      	movs	r2, #0
 80043f6:	f7fe fc6d 	bl	8002cd4 <xQueueGenericSend>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24
 80043fc:	e008      	b.n	8004410 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <xTimerGenericCommand+0x98>)
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	f107 0110 	add.w	r1, r7, #16
 8004406:	2300      	movs	r3, #0
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	f7fe fd61 	bl	8002ed0 <xQueueGenericSendFromISR>
 800440e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004412:	4618      	mov	r0, r3
 8004414:	3728      	adds	r7, #40	; 0x28
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000e78 	.word	0x20000e78

08004420 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <prvProcessExpiredTimer+0x94>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fb1d 	bl	8002a78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d022      	beq.n	8004492 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	18d1      	adds	r1, r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	6978      	ldr	r0, [r7, #20]
 800445a:	f000 f8d1 	bl	8004600 <prvInsertTimerInActiveList>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01f      	beq.n	80044a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004464:	2300      	movs	r3, #0
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2300      	movs	r3, #0
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	2100      	movs	r1, #0
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f7ff ff88 	bl	8004384 <xTimerGenericCommand>
 8004474:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d113      	bne.n	80044a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	6978      	ldr	r0, [r7, #20]
 80044aa:	4798      	blx	r3
}
 80044ac:	bf00      	nop
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000e70 	.word	0x20000e70

080044b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044c0:	f107 0308 	add.w	r3, r7, #8
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f857 	bl	8004578 <prvGetNextExpireTime>
 80044ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4619      	mov	r1, r3
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f803 	bl	80044dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044d6:	f000 f8d5 	bl	8004684 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044da:	e7f1      	b.n	80044c0 <prvTimerTask+0x8>

080044dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044e6:	f7ff fa39 	bl	800395c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044ea:	f107 0308 	add.w	r3, r7, #8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f866 	bl	80045c0 <prvSampleTimeNow>
 80044f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d130      	bne.n	800455e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <prvProcessTimerOrBlockTask+0x3c>
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	429a      	cmp	r2, r3
 8004508:	d806      	bhi.n	8004518 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800450a:	f7ff fa35 	bl	8003978 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800450e:	68f9      	ldr	r1, [r7, #12]
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff85 	bl	8004420 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004516:	e024      	b.n	8004562 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <prvProcessTimerOrBlockTask+0x90>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <prvProcessTimerOrBlockTask+0x50>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <prvProcessTimerOrBlockTask+0x52>
 800452c:	2300      	movs	r3, #0
 800452e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <prvProcessTimerOrBlockTask+0x94>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	4619      	mov	r1, r3
 800453e:	f7fe ff7d 	bl	800343c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004542:	f7ff fa19 	bl	8003978 <xTaskResumeAll>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <prvProcessTimerOrBlockTask+0x98>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
}
 800455c:	e001      	b.n	8004562 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800455e:	f7ff fa0b 	bl	8003978 <xTaskResumeAll>
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000e74 	.word	0x20000e74
 8004570:	20000e78 	.word	0x20000e78
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <prvGetNextExpireTime+0x44>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <prvGetNextExpireTime+0x16>
 800458a:	2201      	movs	r2, #1
 800458c:	e000      	b.n	8004590 <prvGetNextExpireTime+0x18>
 800458e:	2200      	movs	r2, #0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800459c:	4b07      	ldr	r3, [pc, #28]	; (80045bc <prvGetNextExpireTime+0x44>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e001      	b.n	80045ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045ac:	68fb      	ldr	r3, [r7, #12]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000e70 	.word	0x20000e70

080045c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045c8:	f7ff fa74 	bl	8003ab4 <xTaskGetTickCount>
 80045cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <prvSampleTimeNow+0x3c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d205      	bcs.n	80045e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045d8:	f000 f936 	bl	8004848 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e002      	b.n	80045ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045ea:	4a04      	ldr	r2, [pc, #16]	; (80045fc <prvSampleTimeNow+0x3c>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045f0:	68fb      	ldr	r3, [r7, #12]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000e80 	.word	0x20000e80

08004600 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	429a      	cmp	r2, r3
 8004624:	d812      	bhi.n	800464c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	1ad2      	subs	r2, r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e01b      	b.n	8004672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <prvInsertTimerInActiveList+0x7c>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3304      	adds	r3, #4
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f7fe f9de 	bl	8002a06 <vListInsert>
 800464a:	e012      	b.n	8004672 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d206      	bcs.n	8004662 <prvInsertTimerInActiveList+0x62>
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d302      	bcc.n	8004662 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800465c:	2301      	movs	r3, #1
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	e007      	b.n	8004672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <prvInsertTimerInActiveList+0x80>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3304      	adds	r3, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f7fe f9ca 	bl	8002a06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004672:	697b      	ldr	r3, [r7, #20]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000e74 	.word	0x20000e74
 8004680:	20000e70 	.word	0x20000e70

08004684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08e      	sub	sp, #56	; 0x38
 8004688:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800468a:	e0ca      	b.n	8004822 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	da18      	bge.n	80046c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	3304      	adds	r3, #4
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	61fb      	str	r3, [r7, #28]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ba:	6850      	ldr	r0, [r2, #4]
 80046bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046be:	6892      	ldr	r2, [r2, #8]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f2c0 80aa 	blt.w	8004820 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	3304      	adds	r3, #4
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe f9cb 	bl	8002a78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046e2:	463b      	mov	r3, r7
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff6b 	bl	80045c0 <prvSampleTimeNow>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b09      	cmp	r3, #9
 80046f0:	f200 8097 	bhi.w	8004822 <prvProcessReceivedCommands+0x19e>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <prvProcessReceivedCommands+0x78>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004725 	.word	0x08004725
 8004700:	08004725 	.word	0x08004725
 8004704:	08004725 	.word	0x08004725
 8004708:	08004799 	.word	0x08004799
 800470c:	080047ad 	.word	0x080047ad
 8004710:	080047f7 	.word	0x080047f7
 8004714:	08004725 	.word	0x08004725
 8004718:	08004725 	.word	0x08004725
 800471c:	08004799 	.word	0x08004799
 8004720:	080047ad 	.word	0x080047ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	18d1      	adds	r1, r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004744:	f7ff ff5c 	bl	8004600 <prvInsertTimerInActiveList>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d069      	beq.n	8004822 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004754:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d05e      	beq.n	8004822 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	441a      	add	r2, r3
 800476c:	2300      	movs	r3, #0
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	2100      	movs	r1, #0
 8004774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004776:	f7ff fe05 	bl	8004384 <xTimerGenericCommand>
 800477a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d14f      	bne.n	8004822 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	61bb      	str	r3, [r7, #24]
}
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80047aa:	e03a      	b.n	8004822 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	617b      	str	r3, [r7, #20]
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	18d1      	adds	r1, r2, r3
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f0:	f7ff ff06 	bl	8004600 <prvInsertTimerInActiveList>
					break;
 80047f4:	e015      	b.n	8004822 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004806:	f000 fbdb 	bl	8004fc0 <vPortFree>
 800480a:	e00a      	b.n	8004822 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800481e:	e000      	b.n	8004822 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004820:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <prvProcessReceivedCommands+0x1c0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	1d39      	adds	r1, r7, #4
 8004828:	2200      	movs	r2, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fbec 	bl	8003008 <xQueueReceive>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	f47f af2a 	bne.w	800468c <prvProcessReceivedCommands+0x8>
	}
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3730      	adds	r7, #48	; 0x30
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000e78 	.word	0x20000e78

08004848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800484e:	e048      	b.n	80048e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <prvSwitchTimerLists+0xc0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485a:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <prvSwitchTimerLists+0xc0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3304      	adds	r3, #4
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe f905 	bl	8002a78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02e      	beq.n	80048e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	429a      	cmp	r2, r3
 8004894:	d90e      	bls.n	80048b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048a2:	4b19      	ldr	r3, [pc, #100]	; (8004908 <prvSwitchTimerLists+0xc0>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7fe f8aa 	bl	8002a06 <vListInsert>
 80048b2:	e016      	b.n	80048e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048b4:	2300      	movs	r3, #0
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2300      	movs	r3, #0
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	2100      	movs	r1, #0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fd60 	bl	8004384 <xTimerGenericCommand>
 80048c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	603b      	str	r3, [r7, #0]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <prvSwitchTimerLists+0xc0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1b1      	bne.n	8004850 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <prvSwitchTimerLists+0xc0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <prvSwitchTimerLists+0xc4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a04      	ldr	r2, [pc, #16]	; (8004908 <prvSwitchTimerLists+0xc0>)
 80048f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048fa:	4a04      	ldr	r2, [pc, #16]	; (800490c <prvSwitchTimerLists+0xc4>)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000e70 	.word	0x20000e70
 800490c:	20000e74 	.word	0x20000e74

08004910 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004916:	f000 f965 	bl	8004be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <prvCheckForValidListAndQueue+0x60>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d120      	bne.n	8004964 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004922:	4814      	ldr	r0, [pc, #80]	; (8004974 <prvCheckForValidListAndQueue+0x64>)
 8004924:	f7fe f81e 	bl	8002964 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004928:	4813      	ldr	r0, [pc, #76]	; (8004978 <prvCheckForValidListAndQueue+0x68>)
 800492a:	f7fe f81b 	bl	8002964 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800492e:	4b13      	ldr	r3, [pc, #76]	; (800497c <prvCheckForValidListAndQueue+0x6c>)
 8004930:	4a10      	ldr	r2, [pc, #64]	; (8004974 <prvCheckForValidListAndQueue+0x64>)
 8004932:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004934:	4b12      	ldr	r3, [pc, #72]	; (8004980 <prvCheckForValidListAndQueue+0x70>)
 8004936:	4a10      	ldr	r2, [pc, #64]	; (8004978 <prvCheckForValidListAndQueue+0x68>)
 8004938:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800493a:	2300      	movs	r3, #0
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <prvCheckForValidListAndQueue+0x74>)
 8004940:	4a11      	ldr	r2, [pc, #68]	; (8004988 <prvCheckForValidListAndQueue+0x78>)
 8004942:	2110      	movs	r1, #16
 8004944:	200a      	movs	r0, #10
 8004946:	f7fe f929 	bl	8002b9c <xQueueGenericCreateStatic>
 800494a:	4603      	mov	r3, r0
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <prvCheckForValidListAndQueue+0x60>)
 800494e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <prvCheckForValidListAndQueue+0x60>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <prvCheckForValidListAndQueue+0x60>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	490b      	ldr	r1, [pc, #44]	; (800498c <prvCheckForValidListAndQueue+0x7c>)
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fd42 	bl	80033e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004964:	f000 f96e 	bl	8004c44 <vPortExitCritical>
}
 8004968:	bf00      	nop
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000e78 	.word	0x20000e78
 8004974:	20000e48 	.word	0x20000e48
 8004978:	20000e5c 	.word	0x20000e5c
 800497c:	20000e70 	.word	0x20000e70
 8004980:	20000e74 	.word	0x20000e74
 8004984:	20000f24 	.word	0x20000f24
 8004988:	20000e84 	.word	0x20000e84
 800498c:	0800546c 	.word	0x0800546c

08004990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3b04      	subs	r3, #4
 80049a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3b04      	subs	r3, #4
 80049ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3b04      	subs	r3, #4
 80049be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049c0:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <pxPortInitialiseStack+0x64>)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3b14      	subs	r3, #20
 80049ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f06f 0202 	mvn.w	r2, #2
 80049de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b20      	subs	r3, #32
 80049e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049e6:	68fb      	ldr	r3, [r7, #12]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	080049f9 	.word	0x080049f9

080049f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <prvTaskExitError+0x54>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d00a      	beq.n	8004a22 <prvTaskExitError+0x2a>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60fb      	str	r3, [r7, #12]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <prvTaskExitError+0x28>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	60bb      	str	r3, [r7, #8]
}
 8004a34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a36:	bf00      	nop
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0fc      	beq.n	8004a38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	2000000c 	.word	0x2000000c

08004a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pxCurrentTCBConst2>)
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	f380 8809 	msr	PSP, r0
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8811 	msr	BASEPRI, r0
 8004a6a:	4770      	bx	lr
 8004a6c:	f3af 8000 	nop.w

08004a70 <pxCurrentTCBConst2>:
 8004a70:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a78:	4808      	ldr	r0, [pc, #32]	; (8004a9c <prvPortStartFirstTask+0x24>)
 8004a7a:	6800      	ldr	r0, [r0, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f380 8808 	msr	MSP, r0
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8814 	msr	CONTROL, r0
 8004a8a:	b662      	cpsie	i
 8004a8c:	b661      	cpsie	f
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	df00      	svc	0
 8004a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed08 	.word	0xe000ed08

08004aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004aa6:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <xPortStartScheduler+0x120>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a46      	ldr	r2, [pc, #280]	; (8004bc4 <xPortStartScheduler+0x124>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10a      	bne.n	8004ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	; (8004bc0 <xPortStartScheduler+0x120>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a3f      	ldr	r2, [pc, #252]	; (8004bc8 <xPortStartScheduler+0x128>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10a      	bne.n	8004ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <xPortStartScheduler+0x130>)
 8004b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b0e:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b10:	2207      	movs	r2, #7
 8004b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b14:	e009      	b.n	8004b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b80      	cmp	r3, #128	; 0x80
 8004b34:	d0ef      	beq.n	8004b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1c3 0307 	rsb	r3, r3, #7
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d00a      	beq.n	8004b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60bb      	str	r3, [r7, #8]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b76:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b8e:	f000 f8dd 	bl	8004d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <xPortStartScheduler+0x13c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b98:	f000 f8fc 	bl	8004d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <xPortStartScheduler+0x140>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <xPortStartScheduler+0x140>)
 8004ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ba8:	f7ff ff66 	bl	8004a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bac:	f7ff f84c 	bl	8003c48 <vTaskSwitchContext>
	prvTaskExitError();
 8004bb0:	f7ff ff22 	bl	80049f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000ed00 	.word	0xe000ed00
 8004bc4:	410fc271 	.word	0x410fc271
 8004bc8:	410fc270 	.word	0x410fc270
 8004bcc:	e000e400 	.word	0xe000e400
 8004bd0:	20000f74 	.word	0x20000f74
 8004bd4:	20000f78 	.word	0x20000f78
 8004bd8:	e000ed20 	.word	0xe000ed20
 8004bdc:	2000000c 	.word	0x2000000c
 8004be0:	e000ef34 	.word	0xe000ef34

08004be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	607b      	str	r3, [r7, #4]
}
 8004bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10f      	bne.n	8004c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <vPortEnterCritical+0x5c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	603b      	str	r3, [r7, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vPortEnterCritical+0x4a>
	}
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <vPortExitCritical+0x50>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <vPortExitCritical+0x24>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	607b      	str	r3, [r7, #4]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <vPortExitCritical+0x50>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <vPortExitCritical+0x50>)
 8004c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <vPortExitCritical+0x50>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <vPortExitCritical+0x42>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f383 8811 	msr	BASEPRI, r3
}
 8004c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c
	...

08004ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f01e 0f10 	tst.w	lr, #16
 8004cb0:	bf08      	it	eq
 8004cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	6010      	str	r0, [r2, #0]
 8004cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cc4:	f380 8811 	msr	BASEPRI, r0
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f7fe ffba 	bl	8003c48 <vTaskSwitchContext>
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f380 8811 	msr	BASEPRI, r0
 8004cdc:	bc09      	pop	{r0, r3}
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6808      	ldr	r0, [r1, #0]
 8004ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce6:	f01e 0f10 	tst.w	lr, #16
 8004cea:	bf08      	it	eq
 8004cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cf0:	f380 8809 	msr	PSP, r0
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst>:
 8004d00:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d22:	f7fe fed7 	bl	8003ad4 <xTaskIncrementTick>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <xPortSysTickHandler+0x40>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
}
 8004d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <vPortSetupTimerInterrupt+0x38>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <vPortSetupTimerInterrupt+0x3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <vPortSetupTimerInterrupt+0x40>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <vPortSetupTimerInterrupt+0x44>)
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d70:	2207      	movs	r2, #7
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e010 	.word	0xe000e010
 8004d84:	e000e018 	.word	0xe000e018
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	10624dd3 	.word	0x10624dd3
 8004d90:	e000e014 	.word	0xe000e014

08004d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004da4 <vPortEnableVFP+0x10>
 8004d98:	6801      	ldr	r1, [r0, #0]
 8004d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d9e:	6001      	str	r1, [r0, #0]
 8004da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004da2:	bf00      	nop
 8004da4:	e000ed88 	.word	0xe000ed88

08004da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dae:	f3ef 8305 	mrs	r3, IPSR
 8004db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d914      	bls.n	8004de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <vPortValidateInterruptPriority+0x70>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <vPortValidateInterruptPriority+0x74>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	7afa      	ldrb	r2, [r7, #11]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d20a      	bcs.n	8004de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	607b      	str	r3, [r7, #4]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <vPortValidateInterruptPriority+0x78>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dec:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <vPortValidateInterruptPriority+0x7c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d90a      	bls.n	8004e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	603b      	str	r3, [r7, #0]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <vPortValidateInterruptPriority+0x60>
	}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000e3f0 	.word	0xe000e3f0
 8004e1c:	20000f74 	.word	0x20000f74
 8004e20:	e000ed0c 	.word	0xe000ed0c
 8004e24:	20000f78 	.word	0x20000f78

08004e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e34:	f7fe fd92 	bl	800395c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e38:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <pvPortMalloc+0x180>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e40:	f000 f920 	bl	8005084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e44:	4b59      	ldr	r3, [pc, #356]	; (8004fac <pvPortMalloc+0x184>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 8093 	bne.w	8004f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01d      	beq.n	8004e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e58:	2208      	movs	r2, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d014      	beq.n	8004e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f023 0307 	bic.w	r3, r3, #7
 8004e70:	3308      	adds	r3, #8
 8004e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <pvPortMalloc+0x6c>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	617b      	str	r3, [r7, #20]
}
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06e      	beq.n	8004f78 <pvPortMalloc+0x150>
 8004e9a:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <pvPortMalloc+0x188>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d869      	bhi.n	8004f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ea4:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <pvPortMalloc+0x18c>)
 8004ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ea8:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <pvPortMalloc+0x18c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eae:	e004      	b.n	8004eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d903      	bls.n	8004ecc <pvPortMalloc+0xa4>
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f1      	bne.n	8004eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ecc:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <pvPortMalloc+0x180>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d050      	beq.n	8004f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2208      	movs	r2, #8
 8004edc:	4413      	add	r3, r2
 8004ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d91f      	bls.n	8004f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <pvPortMalloc+0xf8>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	613b      	str	r3, [r7, #16]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f32:	69b8      	ldr	r0, [r7, #24]
 8004f34:	f000 f908 	bl	8005148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <pvPortMalloc+0x190>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d203      	bcs.n	8004f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <pvPortMalloc+0x190>)
 8004f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <pvPortMalloc+0x184>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <pvPortMalloc+0x194>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <pvPortMalloc+0x194>)
 8004f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f78:	f7fe fcfe 	bl	8003978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <pvPortMalloc+0x174>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	60fb      	str	r3, [r7, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <pvPortMalloc+0x172>
	return pvReturn;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20001b84 	.word	0x20001b84
 8004fac:	20001b98 	.word	0x20001b98
 8004fb0:	20001b88 	.word	0x20001b88
 8004fb4:	20001b7c 	.word	0x20001b7c
 8004fb8:	20001b8c 	.word	0x20001b8c
 8004fbc:	20001b90 	.word	0x20001b90

08004fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d04d      	beq.n	800506e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	425b      	negs	r3, r3
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4413      	add	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <vPortFree+0xb8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <vPortFree+0x44>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <vPortFree+0x62>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60bb      	str	r3, [r7, #8]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <vPortFree+0xb8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11a      	bne.n	800506e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <vPortFree+0xb8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	43db      	mvns	r3, r3
 8005042:	401a      	ands	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005048:	f7fe fc88 	bl	800395c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <vPortFree+0xbc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4413      	add	r3, r2
 8005056:	4a09      	ldr	r2, [pc, #36]	; (800507c <vPortFree+0xbc>)
 8005058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800505a:	6938      	ldr	r0, [r7, #16]
 800505c:	f000 f874 	bl	8005148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <vPortFree+0xc0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a06      	ldr	r2, [pc, #24]	; (8005080 <vPortFree+0xc0>)
 8005068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800506a:	f7fe fc85 	bl	8003978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20001b98 	.word	0x20001b98
 800507c:	20001b88 	.word	0x20001b88
 8005080:	20001b94 	.word	0x20001b94

08005084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800508a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800508e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <prvHeapInit+0xac>)
 8005092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3307      	adds	r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <prvHeapInit+0xac>)
 80050b4:	4413      	add	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <prvHeapInit+0xb0>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <prvHeapInit+0xb0>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050d0:	2208      	movs	r2, #8
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0307 	bic.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <prvHeapInit+0xb4>)
 80050e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <prvHeapInit+0xb4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <prvHeapInit+0xb4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <prvHeapInit+0xb4>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <prvHeapInit+0xb8>)
 8005112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a09      	ldr	r2, [pc, #36]	; (8005140 <prvHeapInit+0xbc>)
 800511a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <prvHeapInit+0xc0>)
 800511e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000f7c 	.word	0x20000f7c
 8005134:	20001b7c 	.word	0x20001b7c
 8005138:	20001b84 	.word	0x20001b84
 800513c:	20001b8c 	.word	0x20001b8c
 8005140:	20001b88 	.word	0x20001b88
 8005144:	20001b98 	.word	0x20001b98

08005148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <prvInsertBlockIntoFreeList+0xac>)
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e002      	b.n	800515c <prvInsertBlockIntoFreeList+0x14>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	d8f7      	bhi.n	8005156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4413      	add	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d108      	bne.n	800518a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	441a      	add	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d118      	bne.n	80051d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <prvInsertBlockIntoFreeList+0xb0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d00d      	beq.n	80051c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e008      	b.n	80051d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <prvInsertBlockIntoFreeList+0xb0>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e003      	b.n	80051d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d002      	beq.n	80051e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20001b7c 	.word	0x20001b7c
 80051f8:	20001b84 	.word	0x20001b84

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	4d0d      	ldr	r5, [pc, #52]	; (8005234 <__libc_init_array+0x38>)
 8005200:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005202:	1b64      	subs	r4, r4, r5
 8005204:	10a4      	asrs	r4, r4, #2
 8005206:	2600      	movs	r6, #0
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	4d0b      	ldr	r5, [pc, #44]	; (800523c <__libc_init_array+0x40>)
 800520e:	4c0c      	ldr	r4, [pc, #48]	; (8005240 <__libc_init_array+0x44>)
 8005210:	f000 f8f2 	bl	80053f8 <_init>
 8005214:	1b64      	subs	r4, r4, r5
 8005216:	10a4      	asrs	r4, r4, #2
 8005218:	2600      	movs	r6, #0
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f855 3b04 	ldr.w	r3, [r5], #4
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f855 3b04 	ldr.w	r3, [r5], #4
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	08005574 	.word	0x08005574
 8005238:	08005574 	.word	0x08005574
 800523c:	08005574 	.word	0x08005574
 8005240:	08005578 	.word	0x08005578

08005244 <__retarget_lock_acquire_recursive>:
 8005244:	4770      	bx	lr

08005246 <__retarget_lock_release_recursive>:
 8005246:	4770      	bx	lr

08005248 <memcpy>:
 8005248:	440a      	add	r2, r1
 800524a:	4291      	cmp	r1, r2
 800524c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005250:	d100      	bne.n	8005254 <memcpy+0xc>
 8005252:	4770      	bx	lr
 8005254:	b510      	push	{r4, lr}
 8005256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800525a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800525e:	4291      	cmp	r1, r2
 8005260:	d1f9      	bne.n	8005256 <memcpy+0xe>
 8005262:	bd10      	pop	{r4, pc}

08005264 <memset>:
 8005264:	4402      	add	r2, r0
 8005266:	4603      	mov	r3, r0
 8005268:	4293      	cmp	r3, r2
 800526a:	d100      	bne.n	800526e <memset+0xa>
 800526c:	4770      	bx	lr
 800526e:	f803 1b01 	strb.w	r1, [r3], #1
 8005272:	e7f9      	b.n	8005268 <memset+0x4>

08005274 <cleanup_glue>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	460c      	mov	r4, r1
 8005278:	6809      	ldr	r1, [r1, #0]
 800527a:	4605      	mov	r5, r0
 800527c:	b109      	cbz	r1, 8005282 <cleanup_glue+0xe>
 800527e:	f7ff fff9 	bl	8005274 <cleanup_glue>
 8005282:	4621      	mov	r1, r4
 8005284:	4628      	mov	r0, r5
 8005286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800528a:	f000 b869 	b.w	8005360 <_free_r>
	...

08005290 <_reclaim_reent>:
 8005290:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <_reclaim_reent+0xb4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4283      	cmp	r3, r0
 8005296:	b570      	push	{r4, r5, r6, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	d051      	beq.n	8005340 <_reclaim_reent+0xb0>
 800529c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800529e:	b143      	cbz	r3, 80052b2 <_reclaim_reent+0x22>
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d14a      	bne.n	800533c <_reclaim_reent+0xac>
 80052a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a8:	6819      	ldr	r1, [r3, #0]
 80052aa:	b111      	cbz	r1, 80052b2 <_reclaim_reent+0x22>
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 f857 	bl	8005360 <_free_r>
 80052b2:	6961      	ldr	r1, [r4, #20]
 80052b4:	b111      	cbz	r1, 80052bc <_reclaim_reent+0x2c>
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 f852 	bl	8005360 <_free_r>
 80052bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052be:	b111      	cbz	r1, 80052c6 <_reclaim_reent+0x36>
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 f84d 	bl	8005360 <_free_r>
 80052c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80052c8:	b111      	cbz	r1, 80052d0 <_reclaim_reent+0x40>
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f848 	bl	8005360 <_free_r>
 80052d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80052d2:	b111      	cbz	r1, 80052da <_reclaim_reent+0x4a>
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 f843 	bl	8005360 <_free_r>
 80052da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80052dc:	b111      	cbz	r1, 80052e4 <_reclaim_reent+0x54>
 80052de:	4620      	mov	r0, r4
 80052e0:	f000 f83e 	bl	8005360 <_free_r>
 80052e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80052e6:	b111      	cbz	r1, 80052ee <_reclaim_reent+0x5e>
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 f839 	bl	8005360 <_free_r>
 80052ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80052f0:	b111      	cbz	r1, 80052f8 <_reclaim_reent+0x68>
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 f834 	bl	8005360 <_free_r>
 80052f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052fa:	b111      	cbz	r1, 8005302 <_reclaim_reent+0x72>
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 f82f 	bl	8005360 <_free_r>
 8005302:	69a3      	ldr	r3, [r4, #24]
 8005304:	b1e3      	cbz	r3, 8005340 <_reclaim_reent+0xb0>
 8005306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005308:	4620      	mov	r0, r4
 800530a:	4798      	blx	r3
 800530c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800530e:	b1b9      	cbz	r1, 8005340 <_reclaim_reent+0xb0>
 8005310:	4620      	mov	r0, r4
 8005312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005316:	f7ff bfad 	b.w	8005274 <cleanup_glue>
 800531a:	5949      	ldr	r1, [r1, r5]
 800531c:	b941      	cbnz	r1, 8005330 <_reclaim_reent+0xa0>
 800531e:	3504      	adds	r5, #4
 8005320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005322:	2d80      	cmp	r5, #128	; 0x80
 8005324:	68d9      	ldr	r1, [r3, #12]
 8005326:	d1f8      	bne.n	800531a <_reclaim_reent+0x8a>
 8005328:	4620      	mov	r0, r4
 800532a:	f000 f819 	bl	8005360 <_free_r>
 800532e:	e7ba      	b.n	80052a6 <_reclaim_reent+0x16>
 8005330:	680e      	ldr	r6, [r1, #0]
 8005332:	4620      	mov	r0, r4
 8005334:	f000 f814 	bl	8005360 <_free_r>
 8005338:	4631      	mov	r1, r6
 800533a:	e7ef      	b.n	800531c <_reclaim_reent+0x8c>
 800533c:	2500      	movs	r5, #0
 800533e:	e7ef      	b.n	8005320 <_reclaim_reent+0x90>
 8005340:	bd70      	pop	{r4, r5, r6, pc}
 8005342:	bf00      	nop
 8005344:	20000010 	.word	0x20000010

08005348 <__malloc_lock>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__malloc_lock+0x8>)
 800534a:	f7ff bf7b 	b.w	8005244 <__retarget_lock_acquire_recursive>
 800534e:	bf00      	nop
 8005350:	20001b9c 	.word	0x20001b9c

08005354 <__malloc_unlock>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__malloc_unlock+0x8>)
 8005356:	f7ff bf76 	b.w	8005246 <__retarget_lock_release_recursive>
 800535a:	bf00      	nop
 800535c:	20001b9c 	.word	0x20001b9c

08005360 <_free_r>:
 8005360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005362:	2900      	cmp	r1, #0
 8005364:	d044      	beq.n	80053f0 <_free_r+0x90>
 8005366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536a:	9001      	str	r0, [sp, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f1a1 0404 	sub.w	r4, r1, #4
 8005372:	bfb8      	it	lt
 8005374:	18e4      	addlt	r4, r4, r3
 8005376:	f7ff ffe7 	bl	8005348 <__malloc_lock>
 800537a:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <_free_r+0x94>)
 800537c:	9801      	ldr	r0, [sp, #4]
 800537e:	6813      	ldr	r3, [r2, #0]
 8005380:	b933      	cbnz	r3, 8005390 <_free_r+0x30>
 8005382:	6063      	str	r3, [r4, #4]
 8005384:	6014      	str	r4, [r2, #0]
 8005386:	b003      	add	sp, #12
 8005388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800538c:	f7ff bfe2 	b.w	8005354 <__malloc_unlock>
 8005390:	42a3      	cmp	r3, r4
 8005392:	d908      	bls.n	80053a6 <_free_r+0x46>
 8005394:	6825      	ldr	r5, [r4, #0]
 8005396:	1961      	adds	r1, r4, r5
 8005398:	428b      	cmp	r3, r1
 800539a:	bf01      	itttt	eq
 800539c:	6819      	ldreq	r1, [r3, #0]
 800539e:	685b      	ldreq	r3, [r3, #4]
 80053a0:	1949      	addeq	r1, r1, r5
 80053a2:	6021      	streq	r1, [r4, #0]
 80053a4:	e7ed      	b.n	8005382 <_free_r+0x22>
 80053a6:	461a      	mov	r2, r3
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	b10b      	cbz	r3, 80053b0 <_free_r+0x50>
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d9fa      	bls.n	80053a6 <_free_r+0x46>
 80053b0:	6811      	ldr	r1, [r2, #0]
 80053b2:	1855      	adds	r5, r2, r1
 80053b4:	42a5      	cmp	r5, r4
 80053b6:	d10b      	bne.n	80053d0 <_free_r+0x70>
 80053b8:	6824      	ldr	r4, [r4, #0]
 80053ba:	4421      	add	r1, r4
 80053bc:	1854      	adds	r4, r2, r1
 80053be:	42a3      	cmp	r3, r4
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	d1e0      	bne.n	8005386 <_free_r+0x26>
 80053c4:	681c      	ldr	r4, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	6053      	str	r3, [r2, #4]
 80053ca:	4421      	add	r1, r4
 80053cc:	6011      	str	r1, [r2, #0]
 80053ce:	e7da      	b.n	8005386 <_free_r+0x26>
 80053d0:	d902      	bls.n	80053d8 <_free_r+0x78>
 80053d2:	230c      	movs	r3, #12
 80053d4:	6003      	str	r3, [r0, #0]
 80053d6:	e7d6      	b.n	8005386 <_free_r+0x26>
 80053d8:	6825      	ldr	r5, [r4, #0]
 80053da:	1961      	adds	r1, r4, r5
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf04      	itt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	bf04      	itt	eq
 80053e8:	1949      	addeq	r1, r1, r5
 80053ea:	6021      	streq	r1, [r4, #0]
 80053ec:	6054      	str	r4, [r2, #4]
 80053ee:	e7ca      	b.n	8005386 <_free_r+0x26>
 80053f0:	b003      	add	sp, #12
 80053f2:	bd30      	pop	{r4, r5, pc}
 80053f4:	20001ba0 	.word	0x20001ba0

080053f8 <_init>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr

08005404 <_fini>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr
